{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f6\froman\fcharset0\fprq2{\*\panose 02020603040505020304}Tms Rmn{\*\falt Times New Roman};}
{\f36\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}Penoles Penoles SILManuscriptL;}{\f37\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}SILDoulos IPA93;}{\f38\fnil\fcharset0\fprq2{\*\panose 00000400000000000000}PNG SILDoulos;}
{\f39\fnil\fcharset0\fprq2{\*\panose 02000503060000020004}Gentium;}{\f40\fnil\fcharset2\fprq2{\*\panose 00000400000000000000}SILDoulosIPA;}{\f288\fnil\fcharset2\fprq0{\*\panose 00000000000000000000}StarSymbol{\*\falt Arial Unicode MS};}
{\f289\froman\fcharset238\fprq2 Times New Roman CE;}{\f290\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f292\froman\fcharset161\fprq2 Times New Roman Greek;}{\f293\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f294\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f295\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f296\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f297\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\f299\fswiss\fcharset238\fprq2 Arial CE;}{\f300\fswiss\fcharset204\fprq2 Arial Cyr;}{\f302\fswiss\fcharset161\fprq2 Arial Greek;}{\f303\fswiss\fcharset162\fprq2 Arial Tur;}{\f304\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f305\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f306\fswiss\fcharset186\fprq2 Arial Baltic;}{\f307\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f309\fmodern\fcharset238\fprq1 Courier New CE;}{\f310\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f312\fmodern\fcharset161\fprq1 Courier New Greek;}{\f313\fmodern\fcharset162\fprq1 Courier New Tur;}{\f314\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f315\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f316\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f317\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f679\fnil\fcharset238\fprq2 Gentium CE;}{\f682\fnil\fcharset161\fprq2 Gentium Greek;}{\f683\fnil\fcharset162\fprq2 Gentium Tur;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 
Normal;}{\s1\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\outlinelevel0\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 1;}{
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 2;}{
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 3;}{
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 4;}{
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 5;}{
\s6\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl5\outlinelevel5\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 6;}{
\s7\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl6\outlinelevel6\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 7;}{
\s8\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl7\outlinelevel7\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 8;}{
\s9\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl8\outlinelevel8\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 heading 9;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}
{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\qc \li0\ri0\sb120\sa60\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon51 \snext0 \ssemihidden caption;}{\s16\qc \li0\ri0\sb160\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\b\fs36\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext17 Title;}{\s17\qc \li0\ri0\sb240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext35 
Author;}{\s18\ql \li0\ri0\nowidctlpar\tqc\tx4507\tqr\tx9000\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon31 \snext18 header;}{\s19\ql \li0\ri0\nowidctlpar
\tqc\tx4507\tqr\tx9000\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon31 \snext19 footer;}{\s20\ql \li720\ri0\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 
\f36\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext20 penolesexample;}{\s21\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext21 Heading Base;}{\s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext22 Paragraph;}{
\s23\qj \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext23 Body Text;}{\*\cs24 \additive \super \sbasedon10 \ssemihidden endnote reference;}{\*\cs25 \additive \super 
\sbasedon10 \ssemihidden footnote reference;}{\s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext26 \ssemihidden toc 4;}{
\s27\ql \fi-720\li1440\ri720\keep\nowidctlpar\tqr\tldot\tx9029\nooverflow\faroman\rin720\lin1440\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext27 TOC Base;}{\s28\ql \li240\ri0\nowidctlpar
\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext28 \ssemihidden toc 3;}{\s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 
\scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext29 \ssemihidden toc 2;}{\s30\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 
\b\caps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext30 \ssemihidden toc 1;}{\s31\ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext31 
Header Base;}{\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon33 \snext32 \ssemihidden footnote text;}{
\s33\qj \li0\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext33 Footnote Base;}{\s34\qc \li0\ri0\sb160\sa60\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\b\i\fs24\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon16 \snext34 Subtitle;}{\s35\qc \li0\ri0\sb120\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon21 \snext95 Institution;}{\s36\qj \fi432\li720\ri720\sb360\sa240\nowidctlpar\nooverflow\faroman\rin720\lin720\itap0 \i\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext36 Abstract;}{
\s37\qj \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon38 \snext37 Num Ex Base;}{
\s38\qj \li720\ri0\sb60\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext38 Example Base;}{\s39\ql \li0\ri0\sb240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon40 \snext39 Bibliog Author (AAA style);}{\s40\qj \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext40 
Bibliog Base;}{\s41\qj \fi-1008\li1440\ri0\sb60\nowidctlpar\tx1440\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon40 \snext41 Bibliog Citation (AAA style);}{
\s42\qj \fi-720\li720\ri0\sb120\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon40 \snext42 Bibliog Entry;}{\s43\qc \li0\ri0\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 Chapter Author;}{\s44\qc \li0\ri0\sb480\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon21 \snext45 Chapter Number;}{\s45\qc \li0\ri0\sb240\sa240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext43 Chapter Title;}{
\s46\qc \li0\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon33 \snext47 Example in Footnote;}{\s47\qj \li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon33 \snext32 Footnote Continuation;}{\s48\qc \li0\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext49 
Example in Paragraph;}{\s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon22 \snext22 Paragraph Continuation;}{
\s50\qc \li0\ri0\sb240\sa240\keep\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon51 \snext50 Figure Body;}{\s51\qc \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext51 Figure Base;}{\s52\qc \li0\ri0\sb240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext22 
Front/Back Matter Heading;}{\s53\qc \li0\ri0\sa60\keep\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon51 \snext22 Figure Source;}{
\s54\ql \li720\ri0\sb60\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon38 \snext54 Plain Example;}{\s55\qj \li720\ri720\sb120\widctlpar\nooverflow\faroman\rin720\lin720\itap0 
\fs19\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon56 \snext49 Quotation Continuation;}{\s56\qj \fi360\li720\ri720\sb120\widctlpar\nooverflow\faroman\rin720\lin720\itap0 \fs19\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon23 \snext49 Quotation Paragraph;}{\s57\ql \fi-200\li200\ri0\nowidctlpar\tqr\tldot\tx9029\nooverflow\faroman\rin0\lin200\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 \ssemihidden index 1;}{
\s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon37 \snext58 Text Example;}{\s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar
\tqr\tx864\tx1440\tx3845\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon37 \snext59 Phono Ex Lettered;}{\s60\qj \li0\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon33 \snext60 \ssemihidden endnote text;}{\*\cs61 \additive \caps\fs18 Acronym (all caps);}{\*\cs62 \additive \b Bold;}{\*\cs63 \additive \i Book or Journal Title;}{\*\cs64 \additive \i 
Emphasized Word(s);}{\*\cs65 \additive \b Defined Word(s);}{\*\cs66 \additive \i Foreign Word(s);}{\*\cs67 \additive \i Metalinguistic Word(s);}{\*\cs68 \additive \b\f1 Paragraph Title;}{\*\cs69 \additive \i\f38\fs22\lang1024\langfe1024\noproof 
Vernacular Word(s);}{\*\cs70 \additive \i Italic;}{\*\cs71 \additive \v Comment;}{\*\cs72 \additive \v Index Entry;}{\*\cs73 \additive \sub Subscript;}{\*\cs74 \additive \super Superscript;}{\s75\ql \li1440\ri0\nowidctlpar
\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin1440\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext75 \ssemihidden toc 8;}{\s76\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl10\ls2047\pnrnot0
\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls2047\ilvl10\rin720\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext76 List Bullet;}{
\s77\qj \fi-360\li1080\ri720\sb60\widctlpar\nooverflow\faroman\rin720\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext77 List Base;}{\s78\qj \fi-360\li1440\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl10\ls2047\pnrnot0
\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls2047\ilvl10\rin720\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext78 List Bullet 2;}{
\s79\ql \fi-360\li1080\ri720\sb60\widctlpar\nooverflow\faroman\rin720\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext79 List;}{\s80\ql \fi-360\li1440\ri720\sb60\widctlpar\nooverflow\faroman\rin720\lin1440\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext80 List 2;}{\s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls2047\ilvl11\rin720\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext81 List Number;}{\s82\qj \fi-360\li1440\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0
\pnlcltr\pnstart1\pnindent360\pnhang {\pntxta )}}\nooverflow\faroman\ls2047\ilvl11\rin720\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext82 List Number 2;}{\s83\ql \fi-1080\li1800\ri720\sb60\widctlpar
\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext83 List Labelled;}{\s84\ql \li1080\ri720\sb60\widctlpar\nooverflow\faroman\rin720\lin1080\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext84 List Continue;}{\*\cs85 \additive \f40\lang1024\langfe1024\noproof \sbasedon10 Phonetic Characters;}{\*\cs86 \additive \f1\fs18 \sbasedon10 StyleName;}{
\s87\qj \fi-360\li1440\ri720\sb60\widctlpar\nooverflow\faroman\rin720\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon77 \snext87 List Continue 2;}{\*\cs88 \additive \sbasedon10 page number;}{\*\cs89 \additive \b\scaps\f1 
\sbasedon10 Figure Number;}{\s90\ql \li0\ri0\sb120\keepn\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext90 Table Heading;}{
\s91\ql \li0\ri0\sb120\keepn\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon23 \snext91 Table Entry;}{\s92\ql \fi-200\li200\ri720\keep\nowidctlpar
\tqr\tldot\tx9029\nooverflow\faroman\rin720\lin200\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext0 \ssemihidden table of authorities;}{\s93\ql \fi-400\li400\ri720\keep\nowidctlpar
\tqr\tldot\tx9029\nooverflow\faroman\rin720\lin400\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext0 \ssemihidden table of figures;}{\s94\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\b\f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon21 \snext57 \ssemihidden index heading;}{\s95\qc \li0\ri0\sa240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon21 \snext36 Date;}{\s96\ql \fi-1440\li1440\ri0\sb60\keep\widctlpar\tqr\tx864\tx3845\tx6235\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon37 \snext96 Phono Ex;}{
\s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon37 \snext100 Interlin Example;}{\s98\ql \li1080\ri0\sb60\keep\widctlpar
\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon37 \snext97 Free Translation;}{\s99\ql \li1080\ri0\sb120\keep\keepn\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon37 \snext97 Interlin Heading;}{\s100\ql \li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon37 \snext100 Interlin Continuation;}{\s101\ql \fi-144\li144\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon22 \snext101 StyleTable;}{\s102\ql \li720\ri0\nowidctlpar
\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext102 \ssemihidden toc 5;}{\s103\ql \li960\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin960\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext103 \ssemihidden toc 6;}{\s104\ql \li1200\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin1200\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon27 \snext104 \ssemihidden toc 7;}{\s105\ql \li1680\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin1680\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon27 \snext105 \ssemihidden toc 9;}{\*\cs106 \additive 
\b\i\f38\fs22\lang1024\langfe1024\noproof \sbasedon69 Emphasized Vernacular Word(s);}{\s107\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3845\tx6235\nooverflow\faroman\rin0\lin1080\itap0 
\f36\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon59 \snext107 Example word(s);}{\s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
\sbasedon0 \snext108 Ref;}{\*\cs109 \additive \f2\fs22 \sbasedon10 ComputerText;}{\s110\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\tx360{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pndec\pnf6 }\nooverflow\faroman\ls2047\ilvl11\rin0\lin0\itap0 
\b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext110 Appendix 1;}{\s111\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\tx360{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pndec\pnf6 }
\nooverflow\faroman\ls2047\ilvl11\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon1 \snext111 Preface;}{\s112\ql \li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0 
\f2\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext112 Example;}{\*\cs113 \additive \styrsid14369330 Voetnootteken;}{\*\cs114 \additive \fs20\loch\f2\hich\af2\dbch\af2 \styrsid14369330 Brontekst;}{
\s115\ql \li0\ri0\sb100\sa100\sbauto1\saauto1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext115 \styrsid15742764 Normal (Web);}}
{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\listtable{\list\listtemplateid-1784397900{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\s1}
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\s2}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold
\levelspace144\levelindent0{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\s3}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers
\'01\'03\'05\'07;}\s4}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\s5}{\listlevel\levelnfc0\levelnfcn0
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\s6}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelold\levelspace144\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\s7}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0
{\leveltext\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\s8}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace144\levelindent0{\leveltext
\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\s9}{\listname ;}\listid-5}{\list\listtemplateid1498708672\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat0
\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}{\list\listtemplateid1{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}
\f3\fs18 \fi-283\li283\jclisttab\tx283\lin283 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li567\jclisttab\tx567\lin567 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li850\jclisttab\tx850\lin850 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1134\jclisttab\tx1134\lin1134 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1417\jclisttab\tx1417\lin1417 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1701
\jclisttab\tx1701\lin1701 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1984\jclisttab\tx1984\lin1984 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li2268\jclisttab\tx2268\lin2268 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li2551\jclisttab\tx2551\lin2551 }{\listname ;}\listid1}{\list\listtemplateid2{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li283\jclisttab\tx283\lin283 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}
\f3\fs18 \fi-283\li566\jclisttab\tx566\lin566 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li849\jclisttab\tx849\lin849 }{\listlevel
\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1132\jclisttab\tx1132\lin1132 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1415\jclisttab\tx1415\lin1415 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1698\jclisttab\tx1698\lin1698 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li1981
\jclisttab\tx1981\lin1981 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li2264\jclisttab\tx2264\lin2264 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs18 \fi-283\li2547\jclisttab\tx2547\lin2547 }{\listname ;}\listid2}{\list\listtemplateid1792420690\listsimple{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li1080\lin1080 }{\listname ;}\listid592520313}{\list\listtemplateid-1034243834\listsimple{\listlevel
\levelnfc4\levelnfcn4\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'02\'00);}{\levelnumbers\'01;}\fi-360\li1080\lin1080 }{\listname ;}\listid1295479797}{\list\listtemplateid1792420690\listsimple{\listlevel
\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li1080\lin1080 }{\listname ;}\listid1743598529}}{\*\listoverridetable{\listoverride\listid-5
\listoverridecount0\ls1}{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent-360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}
\f3\fbias0 }}\ls2}{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}
\f3\fbias0 \fi-360\li1080\lin1080 }}\ls3}{\listoverride\listid1295479797\listoverridecount0\ls4}{\listoverride\listid1743598529\listoverridecount0\ls5}{\listoverride\listid592520313\listoverridecount0\ls6}{\listoverride\listid1\listoverridecount0\ls7}
{\listoverride\listid2\listoverridecount0\ls8}}{\*\revtbl {Unknown;}}{\*\pgptbl {\pgp\ipgp0\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp1\itap0\li0\ri0\sb0\sa0}{\pgp\ipgp1\itap0\li0\ri0\sb0\sa0}}{\*\rsidtbl \rsid1006936\rsid1444013\rsid1721597\rsid2756292\rsid3939289\rsid4137652
\rsid4744936\rsid6688044\rsid10569393\rsid13449299\rsid14046460\rsid14120796\rsid14369330\rsid14774461\rsid15605875\rsid15742764\rsid15991423\rsid16659165}{\*\generator Microsoft Word 11.0.5604;}{\info{\title this is my file.}{\author Andy Black}
{\operator Andy Black}{\creatim\yr2005\mo10\dy10\hr8\min3}{\revtim\yr2005\mo10\dy10\hr8\min3}{\printim\yr1997\mo7\dy18\hr16\min20}{\version2}{\edmins0}{\nofpages72}{\nofwords24178}{\nofchars137820}{\*\company SIL International}{\nofcharsws161675}
{\vern24689}}\margl1440\margr1440 \deftab360\widowctrl\ftnbj\aenddoc\nospaceforul\lytprtmet\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow1\dgvshow0
\jexpand\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot\bdrrlswsix\nolnhtadjtbl\oldas\rsidroot14369330 \fet0{\*\template D:\\MSOFFICE\\WINWORD\\TEMPLATE\\ACPUBPNG.DOT}{\*\ftnsep \pard\plain \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2756292 \chftnsep 
\par }}{\*\ftnsepc \pard\plain \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2756292 \chftnsepc 
\par }}{\*\aftnsep \pard\plain \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2756292 \chftnsep 
\par }}{\*\aftnsepc \pard\plain \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid2756292 \chftnsepc 
\par }}\sectd \linex0\endnhere\titlepg\sectdefaultcl\sftnbj {\header \pard\plain \s18\qr \li0\ri0\nowidctlpar\tqc\tx4507\tqr\tx9000\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6688044 
Conceptual Introduction to AMPLE
\par }}{\footer \pard\plain \s19\ql \li0\ri0\nowidctlpar\tqc\tx4507\tqr\tx9000\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\field{\*\fldinst {\insrsid6688044  TIME \\@ "MMMM d, yyyy" }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid6688044 October 7, 2005}}}{\insrsid6688044  \tab }{\field{\*\fldinst {\insrsid6688044 PAGE}}{\fldrslt {\lang1024\langfe1024\noproof\insrsid15991423 72}}}{\insrsid6688044 
\par }}{\footerf \pard\plain \s19\qc \li0\ri0\nowidctlpar\tqc\tx4507\tqr\tx9000\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid6688044 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s16\qc \li0\ri0\sb160\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 
\b\fs36\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {\fs48\insrsid1444013 A Conceptual Introduction
\par }\pard \s16\qc \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 {\fs48\insrsid1444013 to  Morphological  Parsing
\par using  AMPLE
\par }\pard\plain \qc \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
\par 
\par }\pard\plain \s17\qc \li0\ri0\sb2480\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs28\insrsid1444013 by H. Andrew Black and Cheryl A. Black}{
\cs25\fs28\super\insrsid14046460\charrsid14046460 {\field{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 14}{\fldrslt\f3\fs28}}{\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044\charrsid14046460 {\field{\*\fldinst SYMBOL 183 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\insrsid6688044  Section }{\field{\*\fldinst {\insrsid6688044  REF _Ref116457608 \\
r \\h }{\insrsid6688044 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f005200650066003100310036003400350037003600300038000000}}}{\fldrslt {\insrsid6688044 3.4.2.3.3}}}{\insrsid6688044 
 was written by Marius Doornenbal of SIL International.}}}{\fs28\insrsid1444013 
\par }\pard\plain \s35\qc \li0\ri0\sb120\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
\par }\pard\plain \s95\qc \li0\ri0\sa240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Summer Institute of Linguistics\line and\line University of North Dakota
\par }\pard \s95\qc \li0\ri0\sb4560\sa240\keep\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14046460 {\insrsid1444013 Version of }{\insrsid14046460 October}{\insrsid1444013  }{\insrsid14046460 7}{\insrsid1444013 , }{\insrsid14046460 2005}{
\insrsid1444013 
\par }\pard\plain \s35\qc \li0\ri0\sb120\sa240\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f0\fs32\insrsid1444013 Table of Contents}{\f0\insrsid1444013 
\par }\pard\plain \s30\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \b\caps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\*\bkmkstart _Toc393786496}{\*\bkmkstart _Toc393852491}{\*\bkmkstart _Toc393873626}
{\*\bkmkstart _Ref392991302}{\field\fldedit{\*\fldinst {\scaps\caps0\insrsid1444013  TOC \\o "1-5" \\t "Appendix 1,1,Preface,1" }}{\fldrslt {\insrsid1444013 ACKNOWLEDGMENTS\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013 
 GOTOBUTTON _Toc393875611  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875611 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 5}}}}}{\insrsid1444013 
\par PREFACE\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013  GOTOBUTTON _Toc393875612  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875612 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 6}}}}}{\insrsid1444013 
\par 1. INTRODUCTION\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013  GOTOBUTTON _Toc393875613  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875613 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 8}}}}}{\insrsid1444013 

\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 1.1 KEY ISSUES\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013 
 GOTOBUTTON _Toc393875614  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875614 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 8}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 1.1.1 CATEGORY-CHANGING AFFIXES\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875615  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875615 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 8}}}}}{\insrsid1444013 
\par 1.1.2 AMBIGUITY\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875616  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875616 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 9}}}}}{\insrsid1444013 
\par 1.1.3 AN (IM)PRACTICAL ORTHOGRAPHY\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875617  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875617 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 9}}}}}{\insrsid1444013 

\par 1.1.4 EPENTHESIS\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875618  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875618 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 9}}}}}{\insrsid1444013 
\par 1.1.5 DISCONTINUOUS MORPHEMES\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875619  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875619 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 9}}}}}{\insrsid1444013 
\par 1.1.6 INFIXATION\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875620  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875620 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 10}}}}}{\insrsid1444013 
\par 1.1.7 REDUPLICATION\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875621  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875621 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 10}}}}}{\insrsid1444013 
\par 1.1.8 ROOT AND PATTERN MORPHOLOGY\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875622  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875622 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 10}}}}}{\insrsid1444013 

\par 1.1.9 VOWEL DELETION\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875623  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875623 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 11}}}}}{\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 1.2 TASKS FOR ANY MORPHOLOGICAL PARSER\tab }{\field\flddirty{\*\fldinst {
\scaps0\insrsid1444013  GOTOBUTTON _Toc393875624  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875624 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 11}}}}}{\insrsid1444013 
\par 1.3 HOW AMPLE DOES IT\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875625  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875625 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 13}}}}}{
\insrsid1444013 
\par }\pard\plain \s30\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \b\caps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 2. TEXTIN\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013 
 GOTOBUTTON _Toc393875626  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875626 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 13}}}}}{\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 2.1 FIELD CODES TO PARSE\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013 
 GOTOBUTTON _Toc393875627  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875627 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 14}}}}}{\insrsid1444013 
\par 2.2 WORD FORMATION CHARACTERS\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875628  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875628 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 14}}}}}{
\insrsid1444013 
\par 2.3 CHANGING THE PRACTICAL ORTHOGRAPHY\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875629  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875629 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 
15}}}}}{\insrsid1444013 
\par 2.4 CAPITALIZATION\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875630  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875630 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 16}}}}}{
\insrsid1444013 
\par }\pard\plain \s30\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \b\caps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3. ANALYSIS\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013 
 GOTOBUTTON _Toc393875631  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875631 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 16}}}}}{\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.1 ANALYSIS CODE TABLE\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013 
 GOTOBUTTON _Toc393875632  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875632 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 17}}}}}{\insrsid1444013 
\par 3.2 DICTIONARY ORTHOGRAPHY CHANGE TABLE\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875633  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875633 }}{\fldrslt {
\scaps0\lang1024\langfe1024\noproof\insrsid14046460 18}}}}}{\insrsid1444013 
\par 3.3 DICTIONARIES AND ANALYSIS DATA CONTROL FILE\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875634  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875634 }}{\fldrslt {
\scaps0\lang1024\langfe1024\noproof\insrsid14046460 18}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.3.1 HOW AMPLE PARSES A WORD\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875635  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875635 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 19}}}}}{\insrsid1444013 
\par 3.3.2 SUCCESSOR TESTS VERSUS FINAL TESTS\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875636  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875636 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 20}}}}}{
\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4 MORPHOTACTICS\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013 
 GOTOBUTTON _Toc393875637  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875637 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 21}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.1 ORDERCLASS\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875638  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875638 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 21}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.1.1 Strictly Increasing Order\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875639  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875639 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 21}}}}}{\insrsid1444013 
\par 3.4.1.2 Non-Decreasing Order\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875640  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875640 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 22}}}}}{\insrsid1444013 
\par 3.4.1.3 Morphemes without a Fixed Order\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875641  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875641 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 22}}}}}{
\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.2 CATEGORY MAPPING\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875642  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875642 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 23}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.2.1 Key Concepts for Categories\tab }{\field\flddirty{\*\fldinst {
\insrsid1444013  GOTOBUTTON _Toc393875643  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875643 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 23}}}}}{\insrsid1444013 
\par 3.4.2.2 Determining and Keying the Categories\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875644  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875644 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 24}}}}}{
\insrsid1444013 
\par 3.4.2.3 Category Tests\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875645  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875645 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}}}{\insrsid1444013 
\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.2.3.1 Languages with Suffixes Only\tab }{\field\flddirty{\*\fldinst {
\insrsid1444013  GOTOBUTTON _Toc393875646  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875646 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 26}}}}}{\insrsid1444013 
\par 3.4.2.3.2 Languages with both Prefixes and Suffixes\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875647  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875647 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 26}}}}}{
\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.3 CO-OCCURRENCE CONSTRAINTS\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875648  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875648 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 31}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.4.3.1 MCCs and Morpheme Classes\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875649  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875649 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 32}}}}}{\insrsid1444013 
\par 3.4.3.2 MCC Writing Drills\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875650  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875650 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 35}}}}}{\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.5 MORPHOPHONEMICS\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013 
 GOTOBUTTON _Toc393875652  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875652 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 36}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.5.1 STRING ENVIRONMENT CONSTRAINTS\tab }{\field\flddirty{\*\fldinst {
\insrsid1444013  GOTOBUTTON _Toc393875653  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875653 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 36}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.5.1.1 Reduplication\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875654  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875654 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 37}}}}}{\insrsid1444013 
\par 3.5.1.2 Epenthesis\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875655  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875655 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 37}}}}}{\insrsid1444013 
\par 3.5.1.3 SEC Writing Drill\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875656  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875656 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 38}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.5.2 MORPHEME ENVIRONMENT CONSTRAINTS\tab }{\field\flddirty{\*\fldinst {
\insrsid1444013  GOTOBUTTON _Toc393875657  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875657 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 39}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.5.2.1 Combinations of MECs and SECs\tab }{\field\flddirty{\*\fldinst {
\insrsid1444013  GOTOBUTTON _Toc393875658  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875658 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 40}}}}}{\insrsid1444013 
\par 3.5.2.2 Multiple Negative Constraints\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875659  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875659 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 42}}}}}{
\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.6 INFIXATION\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013 
 GOTOBUTTON _Toc393875660  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875660 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 42}}}}}{\insrsid1444013 
\par 3.7 TESTS\tab }{\field\flddirty{\*\fldinst {\scaps0\insrsid1444013  GOTOBUTTON _Toc393875661  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875661 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 43}}}}}{\insrsid1444013 

\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.1 ORDERCLASS TESTS\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875662  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875662 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 43}}}}}{\insrsid1444013 
\par 3.7.2 CATEGORY TESTS\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875663  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875663 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 46}}}}}{\insrsid1444013 
\par 3.7.3 PROPERTIES\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875664  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875664 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 47}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.1 A regular process of affix allomorphy tied to root classes    (Tojolob
\rquote al consonant epenthesis)\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875665  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875665 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 48}}}}}{\insrsid1444013 

\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.1.1 The Test Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875666  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875666 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 48}}}}}{\insrsid1444013 
\par 3.7.3.1.2 The MEC Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875667  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875667 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 49}}}}}{\insrsid1444013 
\par 3.7.3.1.3 The test and MEC Methods Compared\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875668  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875668 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 49}}}}}{
\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.2 A regular process of root allomorphy tied to particular affixes   (Tatana
\rquote  vowel neutralization)\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875669  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875669 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}}}{\insrsid1444013 

\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.2.1 The MEC Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875670  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875670 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}}}{\insrsid1444013 
\par 3.7.3.2.2 The Test Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875671  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875671 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 51}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.3 A regular process of allomorphy in compound roots (Zapotec reduced stress)
\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875672  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875672 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 53}}}}}{\insrsid1444013 
\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.3.1 The MEC Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875673  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875673 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 53}}}}}{\insrsid1444013 
\par 3.7.3.3.2 The Test Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875674  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875674 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 53}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.4 Allomorphy of lexical exceptions (Quiegolani Zapotec Potential aspect)\tab }
{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875675  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875675 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 55}}}}}{\insrsid1444013 
\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.4.1 The Test Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875676  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875676 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 55}}}}}{\insrsid1444013 
\par 3.7.3.4.2 The MEC Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875677  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875677 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 56}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.5 Two co
ntrastive properties instead of one exceptional property   (Axininca Campa possessive allomorphy)\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875678  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875678 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 56}}}}}{\insrsid1444013 
\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.5.1 The MEC Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875679  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875679 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 57}}}}}{\insrsid1444013 
\par 3.7.3.5.2 The Test Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875680  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875680 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 57}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
3.7.3.6 Affix allomorphy tied to property of a root, with possible compound roots   (Isthmus Zapotec aspect markers)\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875681  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875681 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 58}}}}}{\insrsid1444013 
\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.6.1 The Test Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875682  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875682 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 58}}}}}{\insrsid1444013 
\par 3.7.3.6.2 The MEC Method\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875683  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875683 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 60}}}}}{\insrsid1444013 
\par }\pard\plain \s26\ql \li480\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin480\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.7 Cases where MECs or MCCs alone will not do\tab }{\field\flddirty{\*\fldinst 
{\insrsid1444013  GOTOBUTTON _Toc393875684  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875684 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 60}}}}}{\insrsid1444013 
\par }\pard\plain \s102\ql \li720\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin720\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 3.7.3.7.1 Optional Affixation (Isthmus Zapotec Adjectives with Aspect)\tab }
{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875685  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875685 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 60}}}}}{\insrsid1444013 
\par 3.7.3.7.2 Identification of Non-contiguous Morphemes (Yal\'e1lag Zapotec Imperatives)\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875686  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875686 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 61}}}}}{\insrsid1444013 
\par }\pard\plain \s30\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \b\caps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 4. DEALING WITH TONE\tab }{\field\flddirty{\*\fldinst {
\caps0\insrsid1444013  GOTOBUTTON _Toc393875687  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875687 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 63}}}}}{\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 4.1 UNDERLYING TONE IS MARKED\tab }{\field\flddirty{\*\fldinst {
\scaps0\insrsid1444013  GOTOBUTTON _Toc393875688  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875688 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 64}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 4.1.1 TONE AS SUPPLETION METHOD\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875689  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875689 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 64}}}}}{\insrsid1444013 
\par 4.1.2 TONE AS ALLOMORPHY METHOD\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875690  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875690 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 64}}}}}{\insrsid1444013 

\par 4.1.3 TONE AS INFIX METHOD\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875691  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875691 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 65}}}}}{\insrsid1444013 
\par }\pard\plain \s29\ql \li0\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \scaps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 4.2 SURFACE TONE IS MARKED\tab }{\field\flddirty{\*\fldinst {
\scaps0\insrsid1444013  GOTOBUTTON _Toc393875692  }{\field{\*\fldinst {\scaps0\insrsid1444013  PAGEREF _Toc393875692 }}{\fldrslt {\scaps0\lang1024\langfe1024\noproof\insrsid14046460 66}}}}}{\insrsid1444013 
\par }\pard\plain \s28\ql \li240\ri0\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin240\itap0 \i\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 4.2.1 TONE AS INFIX METHOD\tab }{\field\flddirty{\*\fldinst {\insrsid1444013 
 GOTOBUTTON _Toc393875693  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875693 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 66}}}}}{\insrsid1444013 
\par 4.2.2 TONE AS AUTOSEGMENT METHOD\tab }{\field\flddirty{\*\fldinst {\insrsid1444013  GOTOBUTTON _Toc393875694  }{\field{\*\fldinst {\insrsid1444013  PAGEREF _Toc393875694 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 66}}}}}{\insrsid1444013 

\par }\pard\plain \s30\ql \li0\ri0\sb120\sa120\nowidctlpar\tqr\tldot\tx9360\nooverflow\faroman\rin0\lin0\itap0 \b\caps\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 5. CONCLUSION\tab }{\field\flddirty{\*\fldinst {
\caps0\insrsid1444013  GOTOBUTTON _Toc393875695  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875695 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 68}}}}}{\insrsid1444013 
\par APPENDIX A: Answers to MCC Drills\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013  GOTOBUTTON _Toc393875696  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875696 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 69}}}}}{
\insrsid1444013 
\par Appendix B: Answers to SEC Drills\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013  GOTOBUTTON _Toc393875697  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875697 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 71}}}}}{
\insrsid1444013 
\par REFERENCES\tab }{\field\flddirty{\*\fldinst {\caps0\insrsid1444013  GOTOBUTTON _Toc393875698  }{\field{\*\fldinst {\caps0\insrsid1444013  PAGEREF _Toc393875698 }}{\fldrslt {\caps0\lang1024\langfe1024\noproof\insrsid14046460 73}}}}}{\insrsid1444013 
\par }\pard\plain \s111\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 }}\pard\plain 
\s111\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart _Toc393875611}ACKNOWLEDGMENTS
{\*\bkmkstart acknowledgements}{\*\bkmkend _Toc393786496}{\*\bkmkend _Toc393852491}{\*\bkmkend _Toc393873626}{\*\bkmkend _Toc393875611}{\*\bkmkend acknowledgements}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
No work is ever done totally independently of others and this is especially true of this one.  We gratefully acknowledge our colleagues who have teamed together to make the AMPLE program what it is today.  In particular, we t
hank David Weber, Bill Mann, Bob Kasper, Bob Reed, Ken Zook, Evan Antworth, Steve McConnel, Alan and Karen Buseman, and Clarence Rathbone who have contributed in many valuable ways to AMPLE.
\par All the participants in the workshops and courses we have held have also contributed greatly to the content of this book.  While we would surely miss someone if we tried to name them all, we truly appreciate each one.
\par We are grateful to Randy Regnier and Barbara Glaser for making valuable comments on an eariler version.
\par }{\insrsid14046460 Marius Doornenbal not only added section }{\field{\*\fldinst {\insrsid14046460  REF _Ref116457608 \\r \\h }{\insrsid1444013 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f005200650066003100310036003400350037003600300038000000}}}{\fldrslt {\insrsid14046460 3.4.2.3.3}}}{\insrsid16659165  on \lquote jitterbug\rquote 
 scanners, but also wrote the code to make it happen.}{\insrsid14046460 
\par }{\insrsid1444013 We also wish to thank our professors in the Linguistics Board at the University of California, Santa Cruz w
ho taught and exemplified a pedagogical style that we have found extremely useful.  We especially thank Jorge Hankamer and Sandy Chung in this regard.  The presentation and focus of this book reflects what we learned from them.  (As always, however, all e
rrors are ours alone.)
\par Finally, we thank our Lord Jesus Christ for all that He has done for all of mankind, especially in showing us the way to live a meaningful and purposeful life.
\par }\pard\plain \s111\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart _Toc393786497}
{\*\bkmkstart _Toc393852492}{\*\bkmkstart _Toc393873627}{\*\bkmkstart _Toc393875612}PREFACE{\*\bkmkstart preface}{\*\bkmkend _Toc393786497}{\*\bkmkend _Toc393852492}{\*\bkmkend _Toc393873627}{\*\bkmkend _Toc393875612}{\*\bkmkend preface}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The material in this book is from Andy\rquote s lecture notes from the Au
tomated Parsing (1990, 1994) and Computational Linguistics (1995-6) courses he taught at the Summer Institute of Linguistics session at the University of North Dakota as well as from leading workshops in Tucson and Papua New Guinea.  Most of the data exam
p
les come from personal consulting experiences with field linguists.  Unlike any of the other books on AMPLE (Weber, Black, and McConnel 1988, Buseman, Weber, Black, and McConnel 1992, Buseman 1993a, 1993b), this one focuses on presenting the key concepts 
i
n the tool.  It also seeks to show how to tightly constrain the system in order to not only correctly analyze well-formed words, but also to reject ill-formed words (thus enhancing the spell-checking capabilities of an implementation).  While the other bo
oks list and illustrate how to employ all of the mechanisms of the programs, the motivation behind these mechanisms was not their main focus.  Thus, we offer this concept-oriented introduction to discuss why and when one would want to use the program
\rquote s various capabilities.  As such, we do not see this book as replacing any of its predecessors but rather as complementing them.
\par The intended audience is any AMPLE user desiring a better understanding of why the tool offers the mechanisms it does and what factor
s to consider in modeling his or her own data.  CARLA consultants (or anyone aspiring to be a CARLA consultant) should especially find it useful.
\par Because the other books deal with the details of how to control the programs and what buttons to push to do so, we do not spend much time on that.  There are now four ways of providing AMPLE with the information it needs:
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}
\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {\insrsid1444013 Keying all data in the files by hand.
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}
\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {\insrsid1444013 Using the CarlaMenu user interface.
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}
\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {\insrsid1444013 Using the AmpleLinks user interface.
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}
\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {\insrsid1444013 Using the CARLAStudio user interface.
\par }\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 {\insrsid1444013 
When AMPLE first came out, one had to key all data by hand and remember which file contained what pieces of information.  This meant that users had to spend a significant amount of energy dealing with the details of file management.  Alan and Karen Bu
seman then created the CarlaMenu tool which greatly eased this load.  The AmpleLinks user interface takes CarlaMenu another step by actually modeling the AMPLE concepts in the LinguaLinks}{\super\insrsid1444013 tm}{\insrsid1444013 
 environment.  More recently, John Hatton has created a new Windows-based tool called CARLAStudio.  Keith Miller is also producing a Windows version of the CarlaMenu tool.
\par Whenever we discuss how to enter information for AMPLE, we speak in terms of the \'93by hand\'94 method and give footnotes briefly referring to how one would do the same thing in CarlaMenu, AmpleLinks, and CARLAStudio}{\cs25\super\insrsid1444013 
{\field{\*\fldinst SYMBOL 42 \\f "Symbol" \\s 12}{\fldrslt\f3\fs24}}{\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs25\super\insrsid6688044 {\field{\*\fldinst SYMBOL 42 \\f "Symbol" \\s 9}{\fldrslt\f3\fs18}}}{\insrsid6688044  CARLAStudio actually has two \'93views\'94
 of the data: CARLA Menu style and Functional style.  We assume the Functional style when describing how to do the item in CARLAStudio.  The CARLA Menu style will be quite similar to what we have for CarlaMenu.}}}{\insrsid1444013 
 .  This is primarily for the benefit of CARLA consultants who may well need to know the nitty-gritty details of the files.  Other users may consult the appropriate documentation to learn the details of the keystrokes involved.
\par We pray that you will find this conceptual introduction to AMPLE enlightening and useful.
\par {\*\bkmkstart _Toc393786498}{\*\bkmkstart _Toc393852493}{\*\bkmkstart _Toc393873628}{\*\bkmkstart _Toc393875613}{\listtext\pard\plain\s1 \b\scaps\fs32\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard\plain 
\s1\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\ls1\outlinelevel0\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 INTRODUCTION{\*\bkmkstart introduction}
{\*\bkmkend _Ref392991302}{\*\bkmkend _Toc393786498}{\*\bkmkend _Toc393852493}{\*\bkmkend _Toc393873628}{\*\bkmkend _Toc393875613}{\*\bkmkend introduction}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Morphology is the study of word forms.  Morphological parsers are computational tools that will automatically produce a 
morphological analysis for a given word form.  Such tools have proven to be quite useful as spelling checkers, as morphological grammar checkers, and in adaptation of a text from one related language to another.  Especially for the case of adaptation, it 
i
s important to realize that languages may be quite closely related at the morphological level (i.e. the meaning or function of the morpheme) without being very similar at the phonetic level; a certain degree of mutual intelligibility is not at all require
d!  This book is designed to help the reader do morphological parsing using the AMPLE program.{\*\bkmkstart _Ref393005239}
\par {\*\bkmkstart _Ref393686854}{\*\bkmkstart _Toc393786499}{\*\bkmkstart _Toc393852494}{\*\bkmkstart _Toc393873629}{\*\bkmkstart _Toc393875614}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 KEY ISSUES{\*\bkmkstart keyIssues}{\*\bkmkend _Ref393005239}
{\*\bkmkend _Ref393686854}{\*\bkmkend _Toc393786499}{\*\bkmkend _Toc393852494}{\*\bkmkend _Toc393873629}{\*\bkmkend _Toc393875614}{\*\bkmkend keyIssues}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
We begin by addressing some of the key issues that any general morphological parser must face.  What kinds of language phenomena must such a computational tool be able to handle if it will indeed be a general tool?
\par {\*\bkmkstart _Toc393852495}{\*\bkmkstart _Ref393852569}{\*\bkmkstart _Toc393873630}{\*\bkmkstart _Toc393875615}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.1\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CATEGORY-CHANGING AFFIXES{\*\bkmkend _Toc393852495}{\*\bkmkend _Ref393852569
}{\*\bkmkend _Toc393873630}{\*\bkmkend _Toc393875615}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 We\rquote ll start with some English examples.}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  These are taken from Spencer 1991:9.}}}{
\insrsid1444013   Consider the forms in (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 ).  What is happening here?  How do you get a dumb computer to \'93understand\'94
 these forms correctly?
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3845\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x1}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\v\insrsid1444013 x1}{\insrsid1444013 {\*\bkmkend x1})\tab a.}{\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institute\line }{\insrsid1444013 b.}{\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institution\line }{
\insrsid1444013 c.}{\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutional\line }{\insrsid1444013 d.}{\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutionalize\line }{\insrsid1444013 e.}{\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutionalization
\line }{\insrsid1444013 f.}{\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutionalizational\line }{\insrsid1444013 g.}{
\cs69\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutionalizationally
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Before we can tell the computer what to do, we need to understand what is going on
 linguistically.  In (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 a) }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institute}{\i\insrsid1444013  }{
\insrsid1444013 is a verb root (e.g. }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 We need to institute some changes around here}{\i\insrsid1444013 .}{\insrsid1444013 ).  By adding the suffix }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -ion}{\insrsid1444013  as in (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 
b), the word is changed to a noun.  The suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -al}{\insrsid1444013  can be added to a noun stem to change it to an adjective, as in (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 c).  The suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -ize}{\insrsid1444013  changes an adjective into a verb (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x1 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 d).  Further category changes occur with the addition of each suffix in (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 e-f).  From this English example, we have seen that th
e computer needs to be able to distinguish between roots and suffixes, with each one restricted as to what category it attaches to and what category it changes the stem to.  (Note, for example, that the suffix }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -ly}{\i\insrsid1444013  }{\insrsid1444013 cannot be added to either a verb stem or a noun stem: }{\i\insrsid1444013 *}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutely}{
\i\insrsid1444013 , *}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutionly}{\i\insrsid1444013 .}{\insrsid1444013 )
\par A Quechua example showing similar category changes along with various types of verbal and nominal affixes is given in (}{\field{\*\fldinst {\insrsid1444013  seq nx x2 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 2}}}{\insrsid1444013 
).  The verb root meaning \lquote to see\rquote  has the imperfective aspect marker added, followed by the first person object marker, yielding \lquote to see me.\rquote   The addition of the nominalizer changes the form to a noun meaning \lquote 
seeing me.\rquote   The noun form can now be possessed by the second person possessive marker and then the purpose marker may optionally follow, finally giving \lquote your seeing me with a purpose.\rquote }{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Quechua form are: IMP = imperfective aspect; 1OBJ = first person object marker; 2POS = second person possessor; NOM = nominalizer; PUR = action for or with a purpose.  The data is from Weber, Black, and McConnel 1988:8.}}}{
\insrsid1444013 
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3845\tx4950\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x2}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 2}}}{\v\insrsid1444013 x2}{\insrsid1444013 {\*\bkmkend x2})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 rikaykaamaanaykipaq}{\b\insrsid1444013 \tab 
\tab }{\insrsid1444013 \lquote in order that you might be seeing me\rquote \line rika-yka:-ma:-na-yki-paq\line see-IMP-1OBJ-NOM-2POS-PUR
\par {\*\bkmkstart _Toc393852496}{\*\bkmkstart _Toc393873631}{\*\bkmkstart _Toc393875616}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 AMBIGUITY{\*\bkmkend _Toc393852496}{\*\bkmkend _Toc393873631}
{\*\bkmkend _Toc393875616}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Ambiguity is also apparent in (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 a), since }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institute}{\i\insrsid1444013  }{\insrsid1444013 can be either a verb, as above, or a noun, as in }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 Summer Institute of Linguistics}{\i\insrsid1444013 . }{\insrsid1444013   Note that there are different types of ambiguity in natural language as well.  For example, the word }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bank}{\insrsid1444013  (among other things) can mean either the side of a river or a building that holds money.  With either meaning, }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bank}{\insrsid1444013 
 is a noun. A morphological parser must be able to deal with the fact that individual words can legitimately be ambiguous.  In many cases, the ambiguity is eliminated when the word is seen in co
ntext, so computational tools that look beyond a single word are also needed.
\par {\*\bkmkstart _Toc393852497}{\*\bkmkstart _Toc393873632}{\*\bkmkstart _Toc393875617}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.3\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 AN (IM)PRACTICAL ORTHOGRAPHY{\*\bkmkend _Toc393852497}
{\*\bkmkend _Toc393873632}{\*\bkmkend _Toc393875617}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\keepn\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 A final issue seen in (}{\field{\*\fldinst {\insrsid1444013  seq nx x1 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 1}}}{\insrsid1444013 a-b,d-e) is that the final }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 e}{\insrsid1444013  is dropped before adding the suffixes }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_ion}{\i\insrsid1444013  }{\insrsid1444013 and \_}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ation}{\i\insrsid1444013 .}{\insrsid1444013   This is really an orthogra
phic issue rather than a phonetic one, but since AMPLE must parse the practical orthography, two different forms called allomorphs (with and without the final }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 e}{\insrsid1444013 
) are needed.  Part of our task is then to appropriately condition these allomorphs.
\par {\*\bkmkstart _Toc393852498}{\*\bkmkstart _Toc393873633}{\*\bkmkstart _Toc393875618}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.4\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 EPENTHESIS{\*\bkmkend _Toc393852498}{\*\bkmkend _Toc393873633}
{\*\bkmkend _Toc393875618}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
There are still other types of challenges for morphological parsing.  For example, consider the Caquinte word in (}{\field{\*\fldinst {\insrsid1444013  seq nx x3 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 3}}}{\insrsid1444013 ):}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Caquinte forms are: 3M = third person masculine subject; 3FO = third person feminine object; DAT = dative; PAS = passive; FUT = 
future prefix; F = future suffix; NF = non-future suffix.  All Caquinte data are from Ken Swift, p.c. and Swift 1988.}}}{\insrsid1444013 
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3845\tx4950\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x3}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 3}}}{\v\insrsid1444013 x3}{\insrsid1444013 {\*\bkmkend x3})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 itsavetakohitiro}{\insrsid1444013 \tab \tab 
\lquote she is told about\rquote \line i-tsave-(t)-ako-hi-(t)-i-ro \line 3M-tell- -DAT-PAS- -NF-3FO
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 (t)}{\insrsid1444013  in 
two places on the second line (which shows the word broken into morphemes) are not really morphemes at all.  Instead, they are epenthetic consonants added to serve as onsets to syllables.  Caquinte does not allow vowel clusters nor syllables without onset
s (in this part of the verb), so whenever two vowels come together at a morpheme break, an epenthetic }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 t}{\i\insrsid1444013  }{\insrsid1444013 
is inserted.  The parser must be able to determine which characters are part of a morpheme and which are simply epenthetic forms inserted to preserve syllable structure.
\par {\*\bkmkstart _Toc393852499}{\*\bkmkstart _Toc393873634}{\*\bkmkstart _Toc393875619}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.5\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 DISCONTINUOUS MORPHEMES{\*\bkmkend _Toc393852499}{\*\bkmkend _Toc393873634}
{\*\bkmkend _Toc393875619}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now consider the Caquinte form in (}{\field{\*\fldinst {\insrsid1444013  seq nx x4 }}{\fldrslt 
{\lang1024\langfe1024\noproof\insrsid14046460 4}}}{\insrsid1444013 ), which is the same word as in (}{\field{\*\fldinst {\insrsid1444013  seq nx x3 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 3}}}{\insrsid1444013 
), but changed to future tense:
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx4950\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x4}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 4}}}{\v\insrsid1444013 x4}{\insrsid1444013 {\*\bkmkend x4})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 intsavetacojitero}{\insrsid1444013 \tab 
\lquote she will be told about\rquote \line i-n-tsave-(t)-ako-hi-(t)-e-ro \line 3M-FUT-tell- -DAT-PAS- -F-3FO
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
What is the challenge here?  The future tense is realized as a discontinuous morpheme: it is composed of the prefix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n-}{\i\insrsid1444013  }{\insrsid1444013 and the suffix }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -e}{\i\insrsid1444013 .}{\insrsid1444013   The computer must be able to check these noncontiguous parts of the word to corr
ectly analyze the future tense in Caquinte; one part cannot be present without the other.
\par {\*\bkmkstart _Toc393852500}{\*\bkmkstart _Ref393855132}{\*\bkmkstart _Toc393873635}{\*\bkmkstart _Toc393875620}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.6\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 INFIXATION{\*\bkmkend _Toc393852500}{\*\bkmkend _Ref393855132}
{\*\bkmkend _Toc393873635}{\*\bkmkend _Toc393875620}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Tagalog forms (from Spencer 1991:12-13) in (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x5 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 5}}}{\insrsid1444013 ) illustrate another challenge:
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx4320\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x5}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 5}}}{\v\insrsid1444013 x5}{\insrsid1444013 {\*\bkmkend x5})\tab a.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sulat}{\insrsid1444013 \tab \lquote 
to write or writing (infinitive form)\rquote \line b.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sumulat}{\insrsid1444013 \tab \lquote to write (with actor focus)\rquote \line c.\tab }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sinulat}{\insrsid1444013 \tab \lquote to write (with object focus)\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 What's happening here?  This is a case of infixation, where the root }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sulat}{\insrsid1444013  splits into two parts so that the focus morpheme, }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -um-}{\i\insrsid1444013  }{\insrsid1444013 or }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -in-}{\insrsid1444013 , can be inserted.
\par {\*\bkmkstart _Toc393852501}{\*\bkmkstart _Ref393853616}{\*\bkmkstart _Ref393853651}{\*\bkmkstart _Toc393873636}{\*\bkmkstart _Toc393875621}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.7\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 REDUPLICATION{\*\bkmkend _Toc393852501}{\*\bkmkend _Ref393853616}
{\*\bkmkend _Ref393853651}{\*\bkmkend _Toc393873636}{\*\bkmkend _Toc393875621}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Look at the additional Tagalog forms in (}{\field{\*\fldinst {\insrsid1444013  seq nx x6 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 6}}}{\insrsid1444013 ) to determine how the imperfective aspect is marked:
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx4320\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x6}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 6}}}{\v\insrsid1444013 x6}{\insrsid1444013 {\*\bkmkend x6})\tab a.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 susulat}{\insrsid1444013 \tab 
\lquote to write (imperfective)\rquote \line b.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 magpasulat}{\insrsid1444013 \tab \lquote to make someone write (perfective)\rquote \line c.\tab }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 magpapasulat}{\insrsid1444013 \tab \lquote to make someone write (imperfective)\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 We know from (}{\field{\*\fldinst {\insrsid1444013  seq nx x5 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 5}}}{\insrsid1444013 a) that }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sulat}{\insrsid1444013  means \lquote to write\rquote .  So in (}{\field{\*\fldinst {\insrsid1444013  seq nx x6 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 6}}}{\insrsid1444013 a) it appears that the imperfective marker is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 su}{\i\insrsid1444013 , }{\insrsid1444013 
but we cannot tell if it is a prefix or an infix without looking at other forms.  (}{\field{\*\fldinst {\insrsid1444013  seq nx x6 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 6}}}{\insrsid1444013 b) shows that the causative \lquote 
to make someone\rquote  is the prefix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 magpa-}{\insrsid1444013 .  But the imperfective of this causative form is not }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sumagpasulat}{
\i\insrsid1444013  }{\insrsid1444013 nor is it }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 magpasusulat}{\insrsid1444013  as we would expect from either prefixing or infixing }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
su}{\i\insrsid1444013 .}{\insrsid1444013   Instead, we have }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 magpapasulat}{\i\insrsid1444013  }{\insrsid1444013 in (}{\field{\*\fldinst {\insrsid1444013  seq nx x6 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 6}}}{\insrsid1444013 c) where it is clear that the marker for imperfective is the extra }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 pa}{\i\insrsid1444013 .}{\insrsid1444013 
  The correct analysis is therefore that imperfective aspect is marked in Tagalog by reduplicating either the first syllable of the root or the syllable immediately preceding the root.  Reduplication is a definite challenge for a morphological parser.

\par {\*\bkmkstart _Toc393852502}{\*\bkmkstart _Toc393873637}{\*\bkmkstart _Toc393875622}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.8\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 ROOT AND PATTERN MORPHOLOGY{\*\bkmkend _Toc393852502}
{\*\bkmkend _Toc393873637}{\*\bkmkend _Toc393875622}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Semitic languages pose a special challenge with their root and pattern morphology. These languages have roots composed of three consonants, as exemplified in the Silt'i data in (}{\field{\*\fldinst {\insrsid1444013  seq nx x15 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 7}}}{\insrsid1444013 ), where \lquote buy\rquote  is the root }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 wkb}{\insrsid1444013 
.  The aspect markers are composed of vowel patterns that fit between or around the root consonants, such as the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a-a}{\insrsid1444013  vowel pattern indicating the perfective aspect shown in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x15 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 7}}}{\insrsid1444013 ).
  The parser needs to be able to find the root consonants and corresponding vowels of the aspect, even though they are intermingled in the surface form of the word.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Silt'i form are: PERF = perfective aspect; 3rdSgPERF = third person singular subject marker in the perfective aspect.  The data is from Gardner 1994.}}}{\insrsid1444013 
\par }\pard\plain \s96\ql \fi-1440\li1440\ri0\sb60\keep\widctlpar\tqr\tx864\tx4320\tx6235\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x15}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 7}}}{\v\insrsid1444013 x15}{\insrsid1444013 {\*\bkmkend x15})\tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 wakaba}{\insrsid1444013 \tab \lquote 
he bought\rquote \line a-a-wkb-a\line PERF-buy-3rdSgPERF
\par {\*\bkmkstart _Toc393852503}{\*\bkmkstart _Toc393873638}{\*\bkmkstart _Toc393875623}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1.9\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 VOWEL DELETION{\*\bkmkend _Toc393852503}{\*\bkmkend _Toc393873638}
{\*\bkmkend _Toc393875623}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 For a final challenge, consider these Caquinte forms (you don\rquote 
t need to understand all the morpheme glosses here; just concentrate on the initial subject prefixes):
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\widctlpar\tqr\tx864\tx1440\tx4320\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x8}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 8}}}{\v\insrsid1444013 x8}{\insrsid1444013 {\*\bkmkend x8})\tab a.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 anehero}{\insrsid1444013 \tab 
\lquote we will see her\rquote \line \tab a-0-neh-e-ro \line \tab 1I-FUT-see-F-3FO\line \line b.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 okeekake}{\insrsid1444013 \tab \lquote she had dug\rquote \line \tab o-keek-ak-e \line 
\tab 3F-dig-PERF-NF \line \line c.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 oasanomahakemparime}{\insrsid1444013 \tab \lquote we/she will not really be eating it\rquote \line \tab 0-0-o-a-sano-maha-k-e-Npa-ri-me \line \tab }{
\fs22\insrsid1444013 1I-FUT-eat-&-VERI.M-VERI-PROG-F-R-3MO-CNTR\line \tab 3F-FUT-eat-&-VERI.M-VERI-PROG-F-R-3MO-CNTR
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 What's the problem with the subject prefixes?  In (}{\field{\*\fldinst {\insrsid1444013  seq nx x8 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 8}}}{\insrsid1444013 a) we see that the first person inclusive subject marker is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a-}{\insrsid1444013 , and in (}{\field{\*\fldinst {
\insrsid1444013  seq nx x8 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 8}}}{\insrsid1444013 b) the third person feminine subject marker is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o-}{\i\insrsid1444013 .  }{
\insrsid1444013 Yet, in (}{\field{\*\fldinst {\insrsid1444013  seq nx x8 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 8}}}{\insrsid1444013 c), the gloss shows ambiguity between \lquote we\rquote  and \lquote she\rquote  as the 
subject, and both of these are represented as null.  This is because both subject prefixes are vowels and the stem in (}{\field{\*\fldinst {\insrsid1444013  seq nx x8 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 8}}}{\insrsid1444013 
c) is vowel-initial, yielding two vowels together.  Recall from (}{\field{\*\fldinst {\insrsid1444013  seq nx x3 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 3}}}{\insrsid1444013 ) that Caquinte generally does not allow v
owel clusters, and therefore adds an epenthetic }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -t-}{\i\insrsid1444013  }{\insrsid1444013 
when necessary to avoid such clusters.  It turns out that epenthesis is only used in the suffixes.  Within the prefixes, the initial vowel of a cluster deletes, causing the ambiguity seen in (}{\field{\*\fldinst {\insrsid1444013  seq nx x8 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 8}}}{\insrsid1444013 c).
\par {\*\bkmkstart _Toc393852504}{\*\bkmkstart _Toc393873639}{\*\bkmkstart _Toc393875624}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.2\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TASKS FOR ANY MORPHOLOGICAL PARSER{\*\bkmkend _Toc393852504}
{\*\bkmkend _Toc393873639}{\*\bkmkend _Toc393875624}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Given the challenges of morphological parsing we\rquote 
ve seen, how can a computer program go about analyzing words into their constituent morphemes?  Let's say that the task of a morphological parser is to take a form like }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 itsavetacojitiro}{
\insrsid1444013  (}{\field{\*\fldinst {\insrsid1444013  seq nx x3 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 3}}}{\insrsid1444013 ) and 
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s76\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls3\rin720\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 see if it is a legitimate word, 
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}give an indication of which characters correspond to what morpheme, and 
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}produce an ordered list of its constituent morphemes (give glosses).
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 What are some of the things our parse
r is going to have to know and what are some of the things that it is going to have to do?
\par Things the parser needs to KNOW:
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s76\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls3\rin720\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 the forms and glosses of prefixes, infixes, roots, and suffixes,
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}which of the affixes go with which roots,
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}the order of the affixes, and
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s76\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls3\rin720\lin1080\itap0\pararsid6688044 {\insrsid1444013 when a particular shape of a form is legitimate and when it is not (allomorphy/phonology).}{\insrsid6688044 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\nooverflow\faroman\rin0\lin0\itap0\pararsid6688044 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Things the parser needs to DO:
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s76\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls3\rin720\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 find the affixes and root in a given word, and 
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}check to see whether a particular affix can go with the rest of the word.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 These a
re most of the issues that must be addressed by a morphological parser.  We are now ready to look directly at how AMPLE knows and does the necessary tasks.
\par {\*\bkmkstart _Toc393786500}{\*\bkmkstart _Toc393852505}{\*\bkmkstart _Toc393873640}{\*\bkmkstart _Toc393875625}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.3\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 HOW AMPLE DOES IT{\*\bkmkstart howAmpleDoesIt}{\*\bkmkend _Toc393786500}
{\*\bkmkend _Toc393852505}{\*\bkmkend _Toc393873640}{\*\bkmkend _Toc393875625}{\*\bkmkend howAmpleDoesIt}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 AMPLE is composed of two modules: TEXTIN and ANALYSIS.  A diagram of the input and
 output of each module is shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x9 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 9}}}{\insrsid1444013 
).  TEXTIN is responsible for determining where the individual words that need to be parsed are in an input text.  The other information, such as punctuation, is stripped off and stored so that the text ca
n be recreated later.  Then ANALYSIS actually does the morphological parsing on the remaining words.
\par }\pard\plain \s15\qc \li0\ri0\sb120\sa60\nowidctlpar\pvpara\phpg\posx2009\posy285\dxfrtext187\dfrmtxtx187\dfrmtxty0\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\pard\plain 
\s15\qc \li0\ri0\sb120\sa60\nowidctlpar\pvpara\phpg\posx2009\posy285\dxfrtext187\dfrmtxtx187\dfrmtxty0\nooverflow\faroman\rin0\lin0\itap0 \f1\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033\insrsid1444013 {\object\objemb\objw8190\objh1622
{\*\objclass Word.Picture.8}{\*\objdata 01050000020000000f000000576f72642e506963747572652e38000000000000000000003a0000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff09000000feffffff04000000050000000600000007000000080000000a0000000f0000000b0000000c0000000d0000000e0000001a000000feffffff110000001200000013000000140000001500000016000000170000001800000019000000feffffff1b000000feffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff040000000709020000000000c0000000000000460000000000000000000000004081
5dc8abcdc50103000000801800000000000001004f006c00650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
0000000000000000000000001400000000000000030050004900430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0002010100000003000000ffffffff0000000000000000000000000000000000000000000000000000
00000000000000000000010000004c0000000000000003004d004500540041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000201ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
00000000000000000000000003000000080a000000000000feffffff02000000feffffff0400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b000000feffffff2d000000fefffffffeffffff30000000310000003200000033000000340000003500000036000000370000003800000039000000
3a0000003b0000003c0000003d0000003e0000003f000000400000004100000042000000430000004400000045000000460000004700000048000000490000004a0000004b0000004c0000004d0000004e0000004f00000050000000510000005200000053000000540000005500000056000000feffffff580000005900
00005a0000005b0000005c0000005d0000005e0000005f0000006000000061000000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff010000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c00000000000000000008006c3800002d0b0000fd1f0000560600000000
0000000000000000000000000000f1030000f10300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008006c382d0b160f010009000003ea04000007009800000000001400
000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b0200000000050000000c025201aa060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02ceff000000000000900100000000040000125469
6d6573204e657720526f6d616e004c00040000002d0101000500000009020000000095000000320a020000005c00040000000000aa06520120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202073657175656e63650d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d001300160019001900160018001600160004000000020101000400000002010100040000002d0101006d000000320a3d0000004100040000000000aa065201
74657874202020202020202054455854494e2020202020202020202020776f726473202020202020202020414e414c595349532020202020202020202020206f66000f00160018000f000d000d000d000d000d000d000d000d001f001f0024001f00110024000d000d000d000d000d000d000d000d000d000d000d002400
1a001100190013000d000d000d000d000d000d000d000d000d002300240023001e0024001c0011001c000d000d000d000d000d000d000d000d000d000d000d000d001a000f0004000000020101000400000002010100040000002d01010098000000320a780000005e00040000000000aa06520120202020202020202020
2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020206d6f727068656d65730d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d0025001a00110019001800160025001600130004000000020101000400000002010100040000002d01010004000000020101000400000002010100040000002d01010098000000320aee0000005e00040000000000aa065201202020202020202020202020202020202020202020202020202020202020202020202020
202070756e6374756174696f6e2c20776869746573706163652c206361706974616c697a6174696f6e2c206e6f6e2d616c7068616265746963730d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d0019001900180016000f00190016000f000c001a0018000d000d00240018000c000f001600130019001600160016000d000d001600160019000c000f0016000c000c00160016000f000c001a0018000d000d0018001a001800110016000c00190018001600180016000f000c0016001300040000000201
0100040000000201010009000000fa02000003000000000000002200040000002d0102000500000014025a004b000500000013025a009a0009000000fa02000000000000000000002200040000002d01030004000000f001020007000000fc020000000000000000040000002d01020009000000fa020000010000000000
00002200040000002d0104000a000000240303009600500096006400a5005a0007000000fc020000ffffff000000040000002d010500040000002d01030004000000f00104000400000002010100040000000201010007000000fc020100000000000000040000002d01040009000000fa02000004000000000000002200
040000002d010600070000001b04790078013c00a500040000002d01030004000000f0010600040000002d01050004000000020101000400000002010100040000002d01040009000000fa02000004000000000000002200040000002d010600070000001b047900ee033c00df02040000002d01030004000000f0010600
040000002d0105000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a0077010500000013025a00e401040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a0000002403
0300e0015000e0016400ef015a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a0085020500000013025a00d402040000002d01030004000000f0010600040000002d0102000900
0000fa02000001000000000000002200040000002d0106000a00000024030300d0025000d0026400df025a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a00ed03050000001302
5a003c04040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300380450003804640047045a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000
000000002200040000002d01060005000000140278001d010500000013020e011d01040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014020e011d010500000013020e01c601040000002d01030004000000f001
0600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300c2010401c2011801d1010e01040000002d010500040000002d01030004000000f00106000400000002010100040000002d010000030000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100feff030a0000ffffffff0709020000000000c000000000000046170000004d6963726f736f667420576f726420506963
74757265000a0000004d53576f7264446f63000f000000576f72642e506963747572652e3800f439b271000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000ffffffff030000000400000001000000ffffffff00000000000000006c3800002d0b0000d4090000010009000003ea0400000700980000000000140000002606010043006f006d0070004f0062006a00000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000120002010200000006000000ffffffff0000000000000000000000000000000000000000000000000000000000000000000000002c000000680000000000000003004f0062006a0049006e0066006f0000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000012000201ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000002e00000006000000000000004f0062006a0065006300740050006f006f006c0000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000160001010500000008000000ffffffff000000000000000000000000000000000000000040815dc8abcdc50140815dc8abcdc50100000000000000000000000002004f006c0065005000720065007300300030003000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000018000200ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000002f000000fc090000000000000f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f726405000000
0b0200000000050000000c025201aa060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02ceff0000000000009001000000000400001254696d6573204e657720526f6d616e004c00040000002d0101000500000009020000000095000000320a0200
00005c00040000000000aa06520120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202073657175656e63650d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d001300160019001900160018001600160004000000020101000400000002010100040000002d0101006d000000320a3d0000004100040000000000aa06520174657874202020202020202054455854494e2020202020202020202020776f7264732020202020202020
20414e414c595349532020202020202020202020206f66000f00160018000f000d000d000d000d000d000d000d000d001f001f0024001f00110024000d000d000d000d000d000d000d000d000d000d000d0024001a001100190013000d000d000d000d000d000d000d000d000d002300240023001e0024001c0011001c00
0d000d000d000d000d000d000d000d000d000d000d000d001a000f0004000000020101000400000002010100040000002d01010098000000320a780000005e00040000000000aa06520120202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020202020202020202020206d6f727068656d65730d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0025001a00110019001800160025001600130004000000020101000400000002010100040000002d01
010004000000020101000400000002010100040000002d01010098000000320aee0000005e00040000000000aa065201202020202020202020202020202020202020202020202020202020202020202020202020202070756e6374756174696f6e2c20776869746573706163652c206361706974616c697a6174696f6e2c
206e6f6e2d616c7068616265746963730d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d0019001900180016000f00190016000f000c001a0018000d000d00240018000c000f00
1600130019001600160016000d000d001600160019000c000f0016000c000c00160016000f000c001a0018000d000d0018001a001800110016000c00190018001600180016000f000c00160013000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010200050000001402
5a004b000500000013025a009a0009000000fa02000000000000000000002200040000002d01030004000000f001020007000000fc020000000000000000040000002d01020009000000fa02000001000000000000002200040000002d0104000a000000240303009600500096006400a5005a0007000000fc020000ffff
ff000000040000002d010500040000002d01030004000000f00104000400000002010100040000000201010007000000fc020100000000000000040000002d01040009000000fa02000004000000000000002200040000002d010600070000001b04790078013c00a500040000002d01030004000000f001060004000000
2d01050004000000020101000400000002010100040000002d01040009000000fa02000004000000000000002200040000002d010600070000001b047900ee033c00df02040000002d01030004000000f0010600040000002d0105000400000002010100040000000201010009000000fa02000003000000000000002200
040000002d0106000500000014025a0077010500000013025a00e401040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300e0015000e0016400ef015a00040000002d010500040000002d01030004000000f001060004000000
02010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a0085020500000013025a00d402040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300d0025000d0026400df02
5a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a00ed030500000013025a003c04040000002d01030004000000f0010600040000002d01020009000000fa020000010000000000
00002200040000002d0106000a00000024030300380450003804640047045a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d01060005000000140278001d010500000013020e011d01040000002d010300
04000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014020e011d010500000013020e01c601040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a0000002403
0300c2010401c2011801d1010e01040000002d010500040000002d01030004000000f00106000400000002010100040000002d01000003000000000000000000feff0000035f00000000000000000000000000000000000001000000e0859ff2f94f6810ab9108002b27b3d9300000008c0200000d000000070000009800
000057006f007200640044006f00630075006d0065006e007400000000000000000000000000000000000000000000000000000000000000000000000000000000001a0002010700000009000000ffffffff00000000000000000000000000000000000000000000000000000000000000000000000010000000c4120000
000000000500530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e00000000000000000000000000000000000000000000000000000028000200ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000057000000bc02
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000dca5650033c00904000000006500000000000000000000000003000066040000c412000000000000000000000000000000000000660100000000000000000000000000000000000000000000000000000000000000000000000a00009c000000000a00009c0000009c0a0000000000009c0a0000
000000009c0a0000000000009c0a0000000000009c0a000014000000c60a00000c000000c60a000000000000d20a000000000000d20a000000000000d20a000000000000d20a00000a000000dc0a00000a000000c60a0000000000001712000031000000e60a000004000000ea0a000000000000ea0a000000000000ea0a
000000000000ea0a0000000000003e0b0000000000003e0b0000000000003e0b0000000000003e0b000002000000400b000000000000400b000000000000400b000021000000610b00004c030000ad0e00004c030000f91100001e00000048120000540000009c1200002800000017120000000000000000000000000000
00000000000000009c0a0000000000003e0b00000000000000000300040001000100ea0a0000540000003e0b000000000000000000000000000000000000000000003e0b0000000000003e0b00000000000017120000000000003e0b0000000000009c0a0000000000009c0a000000000000ea0a00000000000000000000
000000000000000000000000e60a0000000000003e0b0000000000003e0b0000000000003e0b0000000000003e0b0000000000009c0a000000000000ea0a0000000000009c0a000000000000ea0a0000000000003e0b00000000000000000000000000000000000000000000b00a000008000000b80a00000e0000009c0a
0000000000009c0a0000000000009c0a0000000000009c0a0000000000003e0b0000000000003e0b0000000000003e0b0000000000003e0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202073657175656e63650d0808080808087465787420
2020202020202054455854494e2020202020202020202020776f726473202020202020202020414e414c595349532020202020202020202020206f660d0820202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020206d6f727068656d65730d0d08202020202020202020202020202020202020202020202020202020202020202020202020202070756e6374756174696f6e2c20776869746573706163652c206361706974616c697a6174696f6e2c206e6f6e2d616c7068616265746963
730d0c00a6780fa75a00a85019a93c1e00003000010105300000010026005022001bb101010000000000b0010000000000000f0000001600140000004b0032000000300001010430000001002600901b001bb101010000000000b0010000000000000f0000001600140000004b0032000000300001010330000001002600
8016001b410201000000000040020000000000000f0000001600140000004b0032000000300001010230000003002600401d701a110521010000000014000000ffffff0000005e83000000004b0032005a7600003000010101300000030026009012701af10321010000000014000000ffffff0000005e83000000004b00
32005a760000300001010030000001002600e010001bb101010000000000b0010000000000000f0000001600140000004b0032000000300001010630000001002600d014901b0100d102000000000000d002000000000f0000001400140000004b0032000000300001010730000001002600d014601e6103010000000000
60030000000000000f0000001600140000004b0032003d19292dc5538d2f2e967640000300005d03000063030000a5030000a6030000060400000704000066040000f405000000f800f800f800f6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000027501000e750144040000000061000463140008000300005d030000a5030000050400000604000066040000fe000000000000fe0001fd1f1b01fe0001fd1f1b01fe0001fd1f1b01fe0001fd1f1b0100000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000050e001000080001004b000f00000000001c000040f1ff02001c00064e6f726d616c0002000000060061090463180000000000000000000000000000000000000022004140f2ffa10022001644
656661756c742050617261677261706820466f6e7400000000000000000000002e00fe4f0100f2002e000c54657874204578616d706c650014000f00070111380413c8fb153c000f050001600302000000000000660100000b00660400000800ffffffff01000421ffff0100000000006601000000000000000000000000
660100000600000000030000f4050000030000030000660400000400660100005d0000005e0000005f000000600000006100000062000000a50000000601000066010000740400000000a40400000000d40400000000040500000000340500000000640500000000940500000000c40500000000ff405449206d6963726f
4c617365722050533335004c5054313a0050534352495054005449206d6963726f4c6173657220505333350000000000000000000000000000000403049400b8021f67000001000100ea0a6f086400010001002c01010001002c010300000000000000000000000000000000000000000000000000000000000000000000
0000000800000060090000e40c00000100000000000000010000000200000000000000000000000000000000000000985f237ffcbc4793418b0300010001000000000001000000000002000200010058020000c20100000000000000006400000000000000ffff0000ffff0000ffff0100ffff0000ffff0000ffff0000ff
ff0000ffff0100ffff0100ffff0000ffff0100ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffff437573
746f6d207061676520310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000904200009042000000000000437573746f6d207061676520320000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000904200009042000000000000437573746f6d20706167652033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090420000904200000000000000000000000000005449206d6963726f4c61736572
20505333350000000000000000000000000000000403049400b8021f67000001000100ea0a6f086400010001002c01010001002c0103000000000000000000000000000000000000000000000000000000000000000000000000000800000060090000e40c00000100000000000000010000000200000000000000000000
000000000000000000985f237ffcbc4793418b0300010001000000000001000000000002000200010058020000c20100000000000000006400000000000000ffff0000ffff0000ffff0100ffff0000ffff0000ffff0000ffff0000ffff0100ffff0100ffff0000ffff0100ffff0000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffff437573746f6d2070616765203100000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000904200009042000000000000437573746f6d207061676520320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000904200009042000000000000437573746f6d2070616765
203300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009042000090420000000000000000000000000000018001001301000013010000120000800080130100000000000013010000310015169001000054696d6573204e657720526f6d
616e000c169001020053796d626f6c000b2690010000417269616c0022000400010888180000d0020000680100000000a3921306a4921346000000000200000000000000000000000000010001000000040083100100000000000000000000000100010000000100000000000000210328000000000000000a416e647920
426c61636b0a416e647920426c61636b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000dc00000008000000000100000c000000240100000b000000480100000d000000
6c0100000f0000009001000010000000b40100000a000000d801000012000000fc0100000e0000002002000009000000440200001300000068020000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1e00000028000000443a5c4d534f46464943455c57494e574f52
445c54454d504c4154455c4e4f524d414c2e444f540000000000000000000000000000000000000000001e0000000b000000416e647920426c61636b0000000000000000000000000000000000001e0000000b000000416e647920426c61636b0000000000000000000000000000000000004000000000a2dc078833bc01
0000000000000000000000000000000000000000000000004000000000c0a4598bb7de010000000000000000000000000000000000000000000000004000000000e89f2b8833bc01000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000
0000000000000300000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000001e000000130000004d6963726f736f667420576f726420362e3000000000000000000000030000000100000000000000
0000000000000000000000000000000000000000000000001e0000000200000032000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001050000050000000d000000
4d45544146494c4550494354006c380000d3f4ffffdc09000008006c382d0b0000
010009000003ea04000007009800000000001400000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b0200000000050000000c025201aa060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02
ceff0000000000009001000000000400001254696d6573204e657720526f6d616e004c00040000002d0101000500000009020000000095000000320a020000005c00040000000000aa0652012020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
2020202020202020202020202020202020202020202020202020202020202020202073657175656e63650d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d001300160019001900160018001600160004000000020101000400000002010100040000002d0101006d00
0000320a3d0000004100040000000000aa06520174657874202020202020202054455854494e2020202020202020202020776f726473202020202020202020414e414c595349532020202020202020202020206f66000f00160018000f000d000d000d000d000d000d000d000d001f001f0024001f00110024000d000d00
0d000d000d000d000d000d000d000d000d0024001a001100190013000d000d000d000d000d000d000d000d000d002300240023001e0024001c0011001c000d000d000d000d000d000d000d000d000d000d000d000d001a000f0004000000020101000400000002010100040000002d01010098000000320a780000005e00
040000000000aa065201202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020206d6f727068656d65730d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d0025001a00110019001800160025001600130004000000020101000400000002010100040000002d01010004000000020101000400000002010100040000002d01010098000000320aee0000005e00040000000000aa06520120202020202020202020202020202020
2020202020202020202020202020202020202020202070756e6374756174696f6e2c20776869746573706163652c206361706974616c697a6174696f6e2c206e6f6e2d616c7068616265746963730d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d0019001900180016000f00190016000f000c001a0018000d000d00240018000c000f001600130019001600160016000d000d001600160019000c000f0016000c000c00160016000f000c001a0018000d000d0018001a001800110016000c0019001800
1600180016000f000c00160013000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0102000500000014025a004b000500000013025a009a0009000000fa02000000000000000000002200040000002d01030004000000f001020007000000fc0200000000000000000400
00002d01020009000000fa02000001000000000000002200040000002d0104000a000000240303009600500096006400a5005a0007000000fc020000ffffff000000040000002d010500040000002d01030004000000f00104000400000002010100040000000201010007000000fc020100000000000000040000002d01
040009000000fa02000004000000000000002200040000002d010600070000001b04790078013c00a500040000002d01030004000000f0010600040000002d01050004000000020101000400000002010100040000002d01040009000000fa02000004000000000000002200040000002d010600070000001b047900ee03
3c00df02040000002d01030004000000f0010600040000002d0105000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a0077010500000013025a00e401040000002d01030004000000f0010600040000002d01020009000000fa02000001000000
000000002200040000002d0106000a00000024030300e0015000e0016400ef015a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a0085020500000013025a00d402040000002d01
030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300d0025000d0026400df025a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa0200000300000000000000220004000000
2d0106000500000014025a00ed030500000013025a003c04040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300380450003804640047045a00040000002d010500040000002d01030004000000f00106000400000002010100
040000000201010009000000fa02000003000000000000002200040000002d01060005000000140278001d010500000013020e011d01040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014020e011d0105000000
13020e01c601040000002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300c2010401c2011801d1010e01040000002d010500040000002d01030004000000f00106000400000002010100040000002d010000030000000000}{\result {
\fs20\insrsid1444013 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fLayoutInCell}{\sv 1}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0
\picw14444\pich2861\picwgoal8189\pichgoal1622\wmetafile8\bliptag-954000625\blipupi300{\*\blipuid c7231b0f4d0627e8cfab53ed89356ff6}
010009000003ea04000007009800000000001400000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b02
00000000050000000c025201aa060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02ceff
0000000000009001000000000400001254696d6573204e657720526f6d616e004c00040000002d0101000500000009020000000095000000320a020000005c00
040000000000aa065201202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
20202020202020202020202020202020202020202020202020202020202073657175656e63650d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d001300160019001900160018001600160004000000020101000400000002010100040000002d0101006d000000320a3d000000
4100040000000000aa06520174657874202020202020202054455854494e2020202020202020202020776f726473202020202020202020414e414c5953495320
20202020202020202020206f66000f00160018000f000d000d000d000d000d000d000d000d001f001f0024001f00110024000d000d000d000d000d000d000d00
0d000d000d000d0024001a001100190013000d000d000d000d000d000d000d000d000d002300240023001e0024001c0011001c000d000d000d000d000d000d00
0d000d000d000d000d000d001a000f0004000000020101000400000002010100040000002d01010098000000320a780000005e00040000000000aa0652012020
20202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020
202020202020202020202020202020202020206d6f727068656d65730d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d0025001a00110019001800160025001600130004000000020101000400000002010100040000002d01010004000000020101000400000002010100
040000002d01010098000000320aee0000005e00040000000000aa06520120202020202020202020202020202020202020202020202020202020202020202020
2020202070756e6374756174696f6e2c20776869746573706163652c206361706974616c697a6174696f6e2c206e6f6e2d616c7068616265746963730d000d00
0d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d000d00
0d000d000d000d0019001900180016000f00190016000f000c001a0018000d000d00240018000c000f001600130019001600160016000d000d00160016001900
0c000f0016000c000c00160016000f000c001a0018000d000d0018001a001800110016000c00190018001600180016000f000c00160013000400000002010100
040000000201010009000000fa02000003000000000000002200040000002d0102000500000014025a004b000500000013025a009a0009000000fa0200000000
0000000000002200040000002d01030004000000f001020007000000fc020000000000000000040000002d01020009000000fa02000001000000000000002200
040000002d0104000a000000240303009600500096006400a5005a0007000000fc020000ffffff000000040000002d010500040000002d01030004000000f001
04000400000002010100040000000201010007000000fc020100000000000000040000002d01040009000000fa02000004000000000000002200040000002d01
0600070000001b04790078013c00a500040000002d01030004000000f0010600040000002d01050004000000020101000400000002010100040000002d010400
09000000fa02000004000000000000002200040000002d010600070000001b047900ee033c00df02040000002d01030004000000f0010600040000002d010500
0400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a0077010500000013025a00e4010400
00002d01030004000000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300e0015000e0016400
ef015a00040000002d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa020000030000000000000022000400
00002d0106000500000014025a0085020500000013025a00d402040000002d01030004000000f0010600040000002d01020009000000fa020000010000000000
00002200040000002d0106000a00000024030300d0025000d0026400df025a00040000002d010500040000002d01030004000000f00106000400000002010100
040000000201010009000000fa02000003000000000000002200040000002d0106000500000014025a00ed030500000013025a003c04040000002d0103000400
0000f0010600040000002d01020009000000fa02000001000000000000002200040000002d0106000a00000024030300380450003804640047045a0004000000
2d010500040000002d01030004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d0106000500
0000140278001d010500000013020e011d01040000002d01030004000000f00106000400000002010100040000000201010009000000fa020000030000000000
00002200040000002d0106000500000014020e011d010500000013020e01c601040000002d01030004000000f0010600040000002d01020009000000fa020000
01000000000000002200040000002d0106000a00000024030300c2010401c2011801d1010e01040000002d010500040000002d01030004000000f00106000400000002010100040000002d010000030000000000}}}}}{\insrsid1444013 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x9}(}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 9}}}{\v\insrsid1444013 x9}{\insrsid1444013 {\*\bkmkend x9})
\par {\*\bkmkstart _Toc393786501}{\*\bkmkstart _Toc393852506}{\*\bkmkstart _Toc393873641}{\*\bkmkstart _Toc393875626}{\listtext\pard\plain\s1 \b\scaps\fs32\insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard\plain 
\s1\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\outlinelevel0\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TEXTIN{\*\bkmkstart textin}{\*\bkmkend _Toc393786501}
{\*\bkmkend _Toc393852506}{\*\bkmkend _Toc393873641}{\*\bkmkend _Toc393875626}{\*\bkmkend textin}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The very first task in the morphological parsing of a text is to determine where the words are in that text.  AMPLE relies on files being in SIL\rquote 
s Standard Format to help with this task.  Standard Format is a Data Base Management System of ASCII files with \lquote field codes\rquote , one of which may be designated as also being the record marker.  The fields may have vari
able length and the record content is also variable.  For example, a simple dictionary entry is shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x11 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 10}}}{\insrsid1444013 
).  The field codes in the example are }{\cs109\f2\fs22\insrsid1444013 \\s}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 \\g}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 \\c}{\insrsid1444013 , and }{\cs109\f2\fs22\insrsid1444013 \\o}{
\insrsid1444013 , which stand for \lquote suffix\rquote , \lquote gloss\rquote , \lquote category\rquote , and \lquote orderclass\rquote , respectiv
ely.  The contents of each field is assumed to be all material following the space after the field code until a new field code is given.
\par }\pard\plain \s96\ql \fi-1440\li1440\ri0\sb60\keep\widctlpar\tqr\tx864\tx3845\tx6235\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x11}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 10}}}{\v\insrsid1444013 x11}{\insrsid1444013 {\*\bkmkend x11})\tab }{\cs109\f2\fs22\insrsid1444013 \\s  i\line \\g  3M \line \\c  V1/V0 \line \\o  20}{\insrsid1444013 

\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart _Ref375368864}{\*\bkmkstart _Ref375456483}
An example of a Scripture text in Standard Format is given in (}{\field{\*\fldinst {\insrsid1444013  seq nx x13 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 11}}}{\insrsid1444013 
) (the data is from John and Margaret Daly, p.c.).  Think about what the computer needs to know and what it needs to do in order to pull out just the words to be parsed.  Given that the computer will \'93read\'94 the file one character at a time, le
ft-to-right sequentially through the file, how will it know when it has found a legitimate word of the text (and not some punctuation character, format maker or extraneous field)?
\par }\pard\plain \s20\ql \li0\ri0\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \f36\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart x13}\'28}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 11}}}{\v\insrsid1444013 \'78\'31\'33}{\insrsid1444013 {\*\bkmkend x13}\'29\tab }{\fs20\insrsid1444013 {\*\bkmkend _Ref375368864}{\*\bkmkend _Ref375456483}\'5c\'69\'64\'20\'70\'6d\'6c\'6b\'30\'31\'2e\'74\'78\'74
\'20\'20\'4c\'75\'6b\'65\'20\'31\'20\'20\'50\'65\'a4\'6f\'6c\'65\'73\'20\'4d\'69\'78\'74\'65\'63
\par }\pard \s20\ql \li720\ri0\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 {\fs20\insrsid1444013 \'5c\'74\'20\'54\'4e\'2f\'55\'48\'55\'20\'4e\'2f\'49\'20\'43\'48\'2f\'49\'44\'2f\'4f\'20\'54\'4e\'27\'55\'4e\'2f\'49\'20\'54\'2f\'45\'20\'4c\'27\'55\'43\'2f
\'41
\par \'5c\'73\'20\'4e\'85\'63\'75\'e6\'61\'20\'6e\'a1\'20\'6e\'67\'a2\'64\'a2\'20\'74\'6e\'97\'6e\'a1\'20\'74\'6e\'a3\'68\'75\'20\'59\'e6\'20\'4e\'64\'69\'99\'78\'a1
\par \'5c\'63\'20\'31\'20\'6f\'6e\'65
\par \'5c\'70\'20\'5c\'76\'20\'31\'20\'54\'65\'20\'76\'85\'69\'20\'a4\'e6\'79\'69\'75\'20\'63\'68\'8d\'64\'6f\'20\'74\'6e\'75\'6e\'a1\'79\'75\'20\'6e\'63\'68\'61\'61\'20\'6e\'85\'63\'75\'e6\'61\'20\'6e\'64\'97\'75
\par \'74\'6e\'a3\'68\'75\'20\'6e\'8d\'68\'a1\'79\'75\'20\'6e\'85\'63\'75\'e6\'61\'20\'6e\'a1\'20\'63\'75\'75\'2c\'20\'74\'65\'20\'6e\'63\'68\'6f\'6f\'20\'74\'6e\'85\'68\'a2\'20\'73\'85\'20\'6e\'61\'68\'6f
\par \'6e\'61\'63\'75\'e6\'61\'20\'6e\'a1\'20\'63\'75\'75\'2e\'20\'5c\'76\'20\'32\'20\'54\'65\'20\'64\'c5\'75\'6e\'69\'20\'6e\'63\'68\'61\'61\'20\'74\'6e\'a3\'68\'75\'20\'63\'68\'8d\'64\'6f
\par \'74\'6e\'75\'6e\'a1\'79\'75\'e6\'fc\'20\'63\'a3\'a3\'78\'a1\'20\'74\'6e\'9a\'68\'75\'20\'6e\'a1\'20\'63\'e6\'68\'e6\'fc\'20\'6e\'63\'68\'61\'61\'20\'63\'75\'65\'20\'74\'82\'65\'20\'6e\'a1
\par \'78\'69\'6e\'a1\'20\'6e\'64\'e6\'e6\'20\'6e\'85\'63\'75\'e6\'61\'20\'6e\'a1\'20\'63\'75\'75\'20\'6e\'64\'82\'82\'20\'64\'a1\'68\'6e\'61\'2c\'20\'63\'75\'65\'20\'74\'82\'65\'20\'6e\'a1
\par \'63\'e6\'68\'e6\'fc\'20\'74\'6e\'a3\'68\'75\'20\'59\'e6\'20\'4e\'64\'69\'99\'78\'a1\'2e\'20\'5c\'76\'20\'33\'20\'54\'65\'20\'79\'a3\'68\'a3\'20\'73\'61\'20\'6e\'a1\'20\'63\'75\'75\'20\'6e\'64\'75\'75
\par \'71\'75\'8d\'64\'65\'20\'63\'75\'65\'6e\'64\'e6\'a1\'20\'6e\'63\'68\'61\'61\'20\'6e\'85\'63\'75\'e6\'61\'20\'6e\'a1\'20\'63\'75\'75\'2c\'20\'6e\'a3\'75\'20\'78\'a1\'8e\'fc\'20\'6e\'a1\'20\'73\'61\'6e\'69
\par \'69\'6e\'a1\'a1\'20\'74\'65\'65\'20\'76\'e6\'68\'e7\'20\'6e\'63\'68\'61\'61\'20\'74\'6e\'a3\'68\'75\'61\'20\'6e\'a3\'a3\'20\'74\'97\'74\'a3\'20\'73\'e6\'20\'63\'a3\'a3\'78\'a1
\par \'79\'95\'68\'a2\'20\'74\'82\'20\'54\'e4\'6f\'66\'69\'6c\'a3\'20\'63\'68\'69\'20\'a1\'6f\'20\'76\'e6\'68\'61\'20\'63\'97\'75\'20\'69\'6e\'a1\'a1\'20\'73\'e6\'20\'63\'a3\'a3\'78\'a1\'6e\'2c
\par \'5c\'76\'20\'34\'20\'74\'65\'20\'74\'8a\'65\'a1\'20\'63\'75\'8a\'6e\'64\'e6\'20\'63\'75\'74\'6e\'97\'6e\'a1\'20\'69\'6e\'a1\'6e\'20\'73\'8e\'20\'73\'8e\'20\'6e\'64\'85\'e6
\par \'63\'a3\'a3\'78\'a1\'20\'6e\'63\'68\'85\'61\'20\'73\'e6\'20\'6e\'8d\'20\'64\'e6\'6e\'8a\'68\'82\'20\'a4\'e6\'68\'e6\'67\'81\'65\'64\'e4\'20\'78\'69\'69\'6e\'2e
\par \'5c\'73\'20\'ce\'c5\'fc\'20\'65\'73\'70\'a1\'72\'69\'74\'a3\'20\'78\'a1\'6e\'a3\'20\'63\'75\'8a\'63\'68\'69\'20\'6e\'a3\'a3\'20\'59\'8e\'20\'4e\'64\'69\'99\'78\'a1
\par \'63\'85\'63\'68\'a1\'78\'69\'20\'73\'e6\'20\'63\'e6\'63\'a3\'20\'b5\'c5\'fc\'20\'74\'82\'65\'20\'63\'75\'6e\'61\'6e\'69\'20\'4a\'75\'85\'e6
\par \'5c\'67\'20\'5c\'76\'20\'35\'20\'54\'65\'20\'63\'a3\'74\'6e\'85\'68\'e6\'20\'6e\'a1\'20\'78\'df\'6e\'64\'61\'68\'61\'20\'74\'e4\'20\'48\'8a\'72\'6f\'64\'82\'73\'20\'a4\'e6\'79\'69\'75
\par \'64\'69\'73\'74\'72\'8d\'74\'a3\'20\'4a\'97\'64\'65\'e6\'20\'64\'85\'76\'e6\'e6\'fc\'20\'6e\'8d\'20\'78\'a1\'6e\'64\'65\'63\'75\'20\'c5\'c5\'fc\'20\'64\'a3\'74\'a3}{\b\fs20\insrsid1444013 \'b7}{\fs20\insrsid1444013 \'20\'6e\'a1
\par \'78\'a1\'6e\'61\'6e\'69\'64\'e4\'20\'5a\'61\'63\'85\'72\'69\'e6\'2c\'20\'74\'65\'20\'6e\'a1\'20\'63\'75\'6e\'64\'c5\'68\'c5\'64\'82\'20\'63\'75\'65\'20\'64\'a3\'74\'a3\'20\'27\'41\'62\'69\'e6\'73\'2e\'20\'54\'65
\par \'a4\'61\'64\'b5\'68\'df\'64\'82\'20\'6e\'a1\'20\'78\'a1\'6e\'61\'6e\'69\'61\'fc\'20\'20\'27\'45\'6c\'69\'73\'61\'62\'82\'74\'2c\'20\'74\'65\'20\'a4\'61\'68\'61\'e6\'fc\'20\'6e\'e7\'20\'63\'75\'75\'61\'fc
\par \'a4\'61\'6e\'a1\'20\'74\'6e\'e6\'68\'e6\'20\'74\'e4\'20\'27\'41\'72\'a2\'6e\'2e\'20\'5c\'76\'20\'36\'20\'54\'65\'20\'6e\'64\'c5\'20\'6e\'64\'97\'a3\'79\'75\'20\'a1\'6f\'20\'6e\'a1
\par \'71\'75\'69\'64\'65\'20\'6e\'64\'61\'e6\'79\'75\'20\'6e\'a3\'a3\'20\'44\'9a\'74\'a3\'20\'4e\'64\'69\'99\'78\'a1\'2c\'20\'63\'68\'69\'20\'6e\'a1\'20\'74\'6e\'c5\'df\'79\'75\'20\'6e\'63\'68\'61\'61
\par \'74\'6e\'a3\'68\'75\'20\'6e\'a1\'20\'63\'e6\'68\'e6\'fc\'67\'e6\'2e\'20\'20\'5c\'76\'20\'37\'20\'54\'65\'20\'a4\'e6\'20\'74\'a3\'a3\'20\'6e\'8d\'20\'c5\'c5\'fc\'64\'82\'68\'65\'79\'75\'2c
\par \'63\'68\'69\'20\'64\'75\'63\'61\'fc\'20\'74\'8e\'68\'a3\'20\'74\'8e\'20\'45\'6c\'69\'73\'85\'62\'82\'74\'20\'73\'e6\'20\'76\'85\'20\'63\'a2\'a2\'20\'64\'e4\'68\'65\'61\'6e\'2c\'20\'74\'65
\par \'64\'75\'63\'61\'fc\'20\'6e\'64\'b5\'20\'6e\'64\'75\'a3\'79\'75\'20\'a1\'6f\'20\'6e\'a1\'20\'73\'61\'68\'6e\'a3\'79\'75\'2e
\par {\*\bkmkstart _Toc393852507}{\*\bkmkstart _Toc393873642}{\*\bkmkstart _Toc393875627}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.1\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 FIELD CODES TO PARSE{\*\bkmkend _Toc393852507}{\*\bkmkend _Toc393873642}
{\*\bkmkend _Toc393875627}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 First of all, the program needs to know what field codes contain the vernacular wo
rds to be parsed.  Note that in (}{\field{\*\fldinst {\insrsid1444013  seq nx x13 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 11}}}{\insrsid1444013 ) there is no need for AMPLE to parse the words in the }{\cs109\f2\fs22\insrsid1444013 \\id}{
\insrsid1444013  field because they are abbreviations and non-vernacular words.  We might want to be able to tell AMPLE to ignore the content of this field.  Altern
atively, we might want to tell AMPLE to parse the content of the fields containing vernacular words (i.e. }{\cs109\f2\fs22\insrsid1444013 \\t}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 \\s}{\insrsid1444013 , and }{\cs109\f2\fs22\insrsid1444013 \\v
}{\insrsid1444013 ).  How do we let AMPLE know which fields to exclude or which ones to include?  AMPLE actually uses a special file (called an input text
 control file) which has special fields of its own for just such information.  This file is usually named xxxINTX.CTL, where xxx is replaced by a three-letter code for your language.  We either use }{\cs109\f2\fs22\insrsid1444013 \\excl}{\insrsid1444013 
 to list the fields to be excluded, or }{\cs109\f2\fs22\insrsid1444013 \\incl}{\insrsid1444013  to list the fields to be included.  For the text in (}{\field{\*\fldinst {\insrsid1444013  seq nx x13 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 11}}}{\insrsid1444013 ), the }{\cs109\f2\fs22\insrsid1444013 \\id}{\insrsid1444013  field and the }{\cs109\f2\fs22\insrsid1444013 \\c}{\insrsid1444013 
 field do not need to be parsed, so we would probably use the }{\cs109\f2\fs22\insrsid1444013 \\excl}{\insrsid1444013  field.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Text/Text Markers.\line 
AmpleLinks users use External Text/Settings/Include or Exclude These fields.\line CARLAStudio users use Input tab, Character Sets/Text Markers}}}{\insrsid1444013 
\par {\*\bkmkstart _Toc393852508}{\*\bkmkstart _Toc393873643}{\*\bkmkstart _Toc393875628}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.2\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 WORD FORMATION CHARACTERS{\*\bkmkend _Toc393852508}{\*\bkmkend _Toc393873643
}{\*\bkmkend _Toc393875628}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\tx3060\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Next, as AMPLE reads through the appropriate fields from left to 
right one character at a time, the program needs to know which characters make up words and which are simply punctuation markers.  AMPLE assumes that upper and lower case letters }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a}{
\insrsid1444013  through }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 z}{\insrsid1444013  are word formation characters, so we only need to tell AMPLE the other special word formation characters.  In (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x13 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 11}}}{\insrsid1444013 ), there are a number of special characters to be noted.  For example, }{\f36\fs22\insrsid1444013 \'fc}{\insrsid1444013  (\'93superscript n\'94
 as in the second line of verse 2) is used  to indicate preceding nasalization , the special character }{\b\f36\insrsid1444013 \'b7}{\insrsid1444013 (\'93raised dot\'94
 as in the second line of verse 5, next to the last word) indicates a phonological phrase boundary, and there are also }{\f36\fs22\insrsid1444013 \'a4\'2c}{\insrsid1444013  }{\f36\fs22\insrsid1444013 \'c5\'2c}{\insrsid1444013  }{\f36\fs22\insrsid1444013 
\'81}{\insrsid1444013 , and many tone-marked vowels (including }{\f36\fs22\insrsid1444013 \'27\'41}{\insrsid1444013  and }{\f36\fs22\insrsid1444013 \'2f\'55}{\insrsid1444013  as indications of tones on capitalized vowels).
\par }\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 {\insrsid1444013 How do we tell AMPLE which of these are word formation characters?  If the character does not have one lowercase shape and one uppercase shape (such as 
the nasalization indicator }{\f36\fs22\insrsid1444013 \'fc}{\insrsid1444013 ), we use the }{\cs109\f2\fs22\insrsid1444013 \\wfc}{\insrsid1444013  field in the input text control file (wfc is an abbreviation for }{\ul\insrsid1444013 w}{\insrsid1444013 ord 
}{\ul\insrsid1444013 f}{\insrsid1444013 ormation }{\ul\insrsid1444013 c}{\insrsid1444013 haracter) and simply list all such characters in that field.  If the character does have both a lowercase and an uppercase shape, then we use the }{
\cs109\f2\fs22\insrsid1444013 \\luwfc}{\insrsid1444013  field (luwfc is an abbreviation for }{\ul\insrsid1444013 l}{\insrsid1444013 ower/}{\ul\insrsid1444013 u}{\insrsid1444013 pper }{\ul\insrsid1444013 w}{\insrsid1444013 ord }{\ul\insrsid1444013 f}{
\insrsid1444013 ormation }{\ul\insrsid1444013 c}{\insrsid1444013 haracter) and list the lower case character followed by the uppercase character.  For example, the lower and uppercase }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 tilde n}{
\insrsid1444013  would be entered as: }{\cs109\f2\fs22\insrsid1444013 \\luwfc}{\insrsid1444013  }{\f36\fs22\insrsid1444013 \'a4\'a5}{\insrsid1444013 .  Note that each of the lowercase and the uppercase characters can be only one character in length.}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 CarlaMenu users use Text/Character set/Edit source character set for \\wfc and edit Source case associations for \\luwfc.\line AmpleLinks users define these via their text encodings.\line CARLAStudio users use Input tab, Character Sets/Chars for \\
wfc and Input tab, Character Sets/Case Associations for \\luwfc.}}}{\insrsid1444013 
\par These field codes and their values are also keyed in the Text Input Control File.  You are allowed to specify changes you need to make in the ambiguity marker [%], the primary or secondary format markers [\\
], [|], the single character barcodes (used with the Manuscripter program, for example), or the decomposition separator [-].  Note that you only need to make changes (or use these fields at all) if your orthography
 uses one of the markers as a word formation character.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 
{\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users can change the decomposition separator via Text/Character set/character to Divide words.  The others have to be dealt with by hand.\line 
AmpleLinks users control these items via External Text/Settings.\line CARLAStudio users use Input tab, Character Sets/Chars.}}}{\insrsid1444013 
\par {\*\bkmkstart _Toc393852509}{\*\bkmkstart _Toc393873644}{\*\bkmkstart _Toc393875629}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.3\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CHANGING THE PRACTICAL ORTHOGRAPHY{\*\bkmkend _Toc393852509}
{\*\bkmkend _Toc393873644}{\*\bkmkend _Toc393875629}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Sometimes the practical orthography is not the easiest one to use for linguistic analysis.  The orthography can be converted to an internal orthography using the }{\cs109\f2\fs22\insrsid1444013 \\ch}{\insrsid1444013  field.  For the text in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x13 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 11}}}{\insrsid1444013 
) we could use this option to strip off the tone marking, if desired.  Another common usage of this field in areas where Spanish is the national language is to change }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 c}{\insrsid1444013  and }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 qu}{\insrsid1444013  to }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 k}{\insrsid1444013  internally.  Further, if there 
are morphemes that lengthen (or shorten) a vowel (or consonant, as in some analyses of fortis consonants), long vowels can be represented internally as a vowel plus a colon [:].  Such a change is exemplified in (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x12 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 12}}}{\insrsid1444013 ).  See Chapter 9 in Weber, Black and McConnel 1988 for more complete documentation on each available field.}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Text/Input text changes.
\line AmpleLinks users use External Text/Ortho Changes.\line CARLAStudio users use Input tab, Character Sets/Input Ortho Changes. }}}{\insrsid1444013 
\par }\pard\plain \s96\ql \fi-1440\li1440\ri0\sb60\keep\widctlpar\tqr\tx864\tx2880\tx3330\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab }{\lang3082\langfe1033\langnp3082\insrsid1444013 
{\*\bkmkstart x12}(}{\field{\*\fldinst {\lang3082\langfe1033\langnp3082\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\langnp3082\insrsid14046460 12}}}{\v\lang3082\langfe1033\langnp3082\insrsid1444013 x12}{
\lang3082\langfe1033\langnp3082\insrsid1444013 {\*\bkmkend x12})\tab }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\ch  \'94aa\'94\tab >\tab \'94a:\'94\line \\ch  \'94ee\'94\tab >\tab \'94e:\'94\line \\ch  \'94ii\'94\tab >\tab \'94i:\'94
\line \\ch  \'94oo\'94\tab >\tab \'94o:\'94\line \\ch  \'94uu\'94\tab >\tab \'94u:\'94
\par {\*\bkmkstart _Toc393852510}{\*\bkmkstart _Toc393873645}{\*\bkmkstart _Toc393875630}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.4\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CAPITALIZATION{\*\bkmkend _Toc393852510}{\*\bkmkend _Toc393873645}
{\*\bkmkend _Toc393875630}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 AMPLE also normally strips out all capitalization.  I
f you need to maintain the distinction between upper and lower case (as is the case in some non-Roman scripts), you can include the field code }{\cs109\f2\fs22\insrsid1444013 \\nocap}{\insrsid1444013 
 in your file, and then no capitalization changes will be made by the program.  Some words (such as }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 McConnel}{\insrsid1444013 
) have word medial capitalization.  AMPLE defaults to preserving such word medial capitalization information.  If you do not need this, include the }{\cs109\f2\fs22\insrsid1444013 \\noincap}{\insrsid1444013  field.}{\cs25\super\insrsid1444013 \chftn 
{\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 CarlaMenu users use Text/Character set/script has Upper & lower case and preserve word Medial caps.\line AmpleLinks users use External Text/Settings/No internal case normalization and External Text/Settings/No Internal Capitalization.\line 
CARLAStudio users use Input tab, Character Sets/Chars.}}}{\insrsid1444013 
\par As the TEXTIN module of AMPLE processes words, the capitalization information, as well as 
punctuation, spacing, line breaks, and format markers are stored for later retrieval in recreating the text.  The individual words are then sent to ANALYSIS to be parsed.
\par {\*\bkmkstart _Toc393786502}{\*\bkmkstart _Toc393852511}{\*\bkmkstart _Toc393873646}{\*\bkmkstart _Toc393875631}{\listtext\pard\plain\s1 \b\scaps\fs32\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard\plain 
\s1\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\outlinelevel0\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 ANALYSIS{\*\bkmkstart analysis}{\*\bkmkend _Toc393786502}
{\*\bkmkend _Toc393852511}{\*\bkmkend _Toc393873646}{\*\bkmkend _Toc393875631}{\*\bkmkend analysis}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The job of ANALYSIS is to break each word down into its individual morphemes
, including a gloss for each morpheme.  To do this, it uses a match and filter technique, illustrated below in (}{\field{\*\fldinst {\insrsid1444013  seq nx x14 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 13}}}{\insrsid1444013 ).
\par First, though, we need to determine what will be available in the dictionary to match.  There are two basic approaches to ph
onology/morphology: Item and Process versus Item and Arrangement.  In the Item and Process approach, the dictionary contains the underlying form for each morpheme and then a set of rules generates the correct surface form in its context.  In contrast, the
 
Item and Arrangement approach lists all the possible allomorphs of a particular morpheme in the dictionary, with appropriate conditions on the context that each can appear in.  You can think of the dictionary used by the Item and Arrangement approach as b
e
ing the output of applying the phonological rules to the underlying forms in the Item and Process approach.  ANALYSIS uses the Item and Arrangement approach since this allows it to match allomorphs directly with the surface string and the phonological rul
es do not need to be reprocessed for every word.{\*\bkmkstart x14}
\par }\pard \s22\ql \fi360\li0\ri0\sb120\keepn\widctlpar\nooverflow\faroman\rin0\lin0\itap0 {\insrsid1444013 (}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 13}}}{\v\insrsid1444013 x14}{\insrsid1444013 
{\*\bkmkend x14})\tab Match and Filter technique:
\par }\pard\plain \ql \li720\ri0\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\pard\plain \ql \li720\ri0\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033\insrsid1444013 {\object\objemb\objw7921\objh4412{\*\objclass Word.Picture.8}{\*\objdata 01050000020000000f000000576f72642e506963747572652e3800000000000000000000400000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff0900060000000000000000000000010000000100000000000000001000000200000001000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdffffff0a000000feffffff0400000005000000060000000700000008000000090000000b000000110000000c0000000d0000000e0000000f000000100000001d000000feffffff130000001400000015000000160000001700000018000000190000001a0000001b0000001c000000feffffff1e00
0000feffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffff040000000709020000000000c000000000000046000000000000000000000000303c
62c8abcdc50103000000c01c00000000000001004f006c00650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000201ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
0000000000000000000000001400000000000000030050004900430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0002010100000003000000ffffffff0000000000000000000000000000000000000000000000000000
00000000000000000000010000004c0000000000000003004d004500540041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000201ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
00000000000000000000000003000000280c000000000000feffffff02000000feffffff0400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f000000100000001100000012000000130000001400000015000000160000001700000018000000190000001a00
00001b0000001c0000001d0000001e0000001f000000200000002100000022000000230000002400000025000000260000002700000028000000290000002a0000002b0000002c0000002d0000002e0000002f00000030000000310000003200000033000000feffffff35000000fefffffffeffffff3800000039000000
3a0000003b0000003c0000003d0000003e0000003f000000400000004100000042000000430000004400000045000000460000004700000048000000490000004a0000004b0000004c0000004d0000004e0000004f0000005000000051000000520000005300000054000000550000005600000057000000580000005900
00005a0000005b0000005c0000005d0000005e0000005f0000006000000061000000620000006300000064000000650000006600000067000000feffffff690000006a0000006b0000006c0000006d0000006e0000006f000000700000007100000072000000feffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0100000200000000000000000000000000000000e8031400200045006e00740072007900000000000000000000000000000000000000000000000000000000004c000000000000000000080092360000641e0000f01e00003b1100000000
0000000000000000000000000000e8030000e80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008009236641e3e0e010009000003fd05000007002500000000001400
000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b0200000000050000000c02970372060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02ceff000000000000900100000000040000125469
6d6573204e657720526f6d616e003000040000002d01010005000000090200000000040000000201010004000000020101000400000002010100030000001e000700000016040b011a017c0013000400000002010100040000002d0101001a000000320a7e0028000a00040000000000720697036e6f726d616c697a6564
18001a001100250016000c000c0016001600190004000000020101000400000002010100040000002d01010013000000320ab9005800050004000000000072069703776f7264730024001a001100190013000400000002010100040000002701ffff040000000201010007000000fc020100000000000000040000002d01
020009000000fa02000004000000000000002200040000002d010300070000001b042d011c031e00b30109000000fa02000000000000000000002200040000002d01040004000000f001030007000000fc020000ffffff000000040000002d0103000400000002010100030000001e00070000001604260115032400b901
0400000002010100040000002d01010025000000320a2600bd01110004000000000072069703646973636f76657220706f737369626c650019000c00130016001a001800160011000d0019001a00130013000c0018000c00160004000000020101000400000002010100040000002d0101001d000000320a6100e8010c00
0400000000007206970373657175656e636573206f661300160019001900160018001600160013000d001a000f0004000000020101000400000002010100040000002d01010017000000320a9c000c020800040000000000720697036d61746368696e67250016000f00160018000c001800190004000000020101000400
000002010100040000002d0101001a000000320ad700f9010a0004000000000072069703616c6c6f6d6f7270687316000c000c001a0025001a0011001900180013000400000002010100040000002701ffff0400000002010100040000002d01020009000000fa02000004000000000000002200040000002d0105000700
00001b042d0138051e00ed03040000002d01040004000000f0010500040000002d0103000400000002010100030000001e00070000001604260131052400f3030400000002010100040000002d0101001f000000320a2600f3030d0004000000000072069703656c696d696e617465206261640016000c000c0025000c00
180016000f0016000d0018001600190004000000020101000400000002010100040000002d01010023000000320a6100f3031000040000000000720697037061727365732062792074657374732c1900160011001300160013000d00180017000d000f00160013000f0013000d0004000000020101000400000002010100
040000002d01010025000000320a9c00f303110004000000000072069703636f6e73747261696e74732c206574632e0016001a00180013000f00110016000c0018000f0013000d000d0016000f0016000d000400000002010100040000002701ffff04000000020101000400000002010100030000001e00070000001604
ed0060069a0095050400000002010100040000002d01010017000000320a9c009505080004000000000072069703616e616c797365731600180016000c0017001300160013000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010500050000001402
b4001d01050000001302b400a801040000002d01040004000000f001050007000000fc020000000000000000040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300a401aa00a401be00b301b400040000002d010300040000002d01040004000000f001060004000000
02010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4001b03050000001302b400e203040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300de03aa00de03be00ed03
b400040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4003705050000001302b4008605040000002d01040004000000f0010600040000002d01050009000000fa020000010000000000
00002200040000002d0106000a000000240303008205aa008205be009105b400040000002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e0007000000160455025601e40113000400000002010100040000002d0101001c000000320ae6011300
0b0004000000000072069703787878494e54582e43544c00180018001800110024001f0024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e001a5000500000013021901a500040000002d0104000400
0000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303009b001d01af001d01a5000e01040000002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e0007000000160463031803e401
b7010400000002010100040000002d01010019000000320ae601b70109000400000000007206970378787843442e54414200180018001800210024000d001f002300210004000000020101000400000002010100040000002d0101001c000000320a2102b7010b00040000000000720697037878784f5244432e54414200
18001800180024002100240021000d001f002300210004000000020101000400000002010100040000002d01010019000000320a5c02b70109000400000000007206970378787850462e444943001800180018001c001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320a
9702b70109000400000000007206970378787853462e444943001800180018001c001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320ad202b70109000400000000007206970378787849462e4449430018001800180011001b000d002400110021000400000002010100
0400000002010100040000002d01010019000000320a0d03b70109000400000000007206970378787852542e4449430018001800180021001f000d002400110021000400000002010100040000002701ffff04000000020101000400000002010100030000001e0007000000160437027005e401f1030400000002010100
040000002d01010019000000320ae601f10309000400000000007206970378787841442e43544c00180018001800230024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e00149020500000013023701
4902040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303003f023b0153023b0149022c01040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa020000030000000000
00002200040000002d010600050000001402e001830405000000130237018304040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a0000002403030079043b018d043b0183042c01040000002d010300040000002d01040004000000f0010600
0400000002010100040000002d010000030000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000100feff030a0000ffffffff0709020000000000c000000000000046170000004d6963726f736f667420
576f72642050696374757265000a0000004d53576f7264446f63000f000000576f72642e506963747572652e3800f439b27100000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000ffffffff030000000400000001000000ffffffff000000000000000092360000651e0000fa0b0000010009000003fd0500000700250000000000140000002606010043006f006d0070004f0062006a0000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000120002010200000006000000ffffffff00000000000000000000000000000000000000000000000000000000000000000000000034000000680000000000000003004f0062006a0049006e0066006f000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000012000201ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000003600000006000000000000004f0062006a0065006300740050006f006f006c000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000160001010500000008000000ffffffff0000000000000000000000000000000000000000303c62c8abcdc501303c62c8abcdc50100000000000000000000000002004f006c006500500072006500730030003000300000000000000000000000
000000000000000000000000000000000000000000000000000000000000000018000200ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000037000000220c0000000000000f001e00ffffffff040014000000576f72640e004d6963726f736f667420
576f7264050000000b0200000000050000000c02970372060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02ceff0000000000009001000000000400001254696d6573204e657720526f6d616e003000040000002d01010005000000090200000000
040000000201010004000000020101000400000002010100030000001e000700000016040b011a017c0013000400000002010100040000002d0101001a000000320a7e0028000a00040000000000720697036e6f726d616c697a656418001a001100250016000c000c001600160019000400000002010100040000000201
0100040000002d01010013000000320ab9005800050004000000000072069703776f7264730024001a001100190013000400000002010100040000002701ffff040000000201010007000000fc020100000000000000040000002d01020009000000fa02000004000000000000002200040000002d010300070000001b04
2d011c031e00b30109000000fa02000000000000000000002200040000002d01040004000000f001030007000000fc020000ffffff000000040000002d0103000400000002010100030000001e00070000001604260115032400b9010400000002010100040000002d01010025000000320a2600bd011100040000000000
72069703646973636f76657220706f737369626c650019000c00130016001a001800160011000d0019001a00130013000c0018000c00160004000000020101000400000002010100040000002d0101001d000000320a6100e8010c000400000000007206970373657175656e636573206f66130016001900190016001800
1600160013000d001a000f0004000000020101000400000002010100040000002d01010017000000320a9c000c020800040000000000720697036d61746368696e67250016000f00160018000c001800190004000000020101000400000002010100040000002d0101001a000000320ad700f9010a000400000000007206
9703616c6c6f6d6f7270687316000c000c001a0025001a0011001900180013000400000002010100040000002701ffff0400000002010100040000002d01020009000000fa02000004000000000000002200040000002d010500070000001b042d0138051e00ed03040000002d01040004000000f0010500040000002d01
03000400000002010100030000001e00070000001604260131052400f3030400000002010100040000002d0101001f000000320a2600f3030d0004000000000072069703656c696d696e617465206261640016000c000c0025000c00180016000f0016000d00180016001900040000000201010004000000020101000400
00002d01010023000000320a6100f3031000040000000000720697037061727365732062792074657374732c1900160011001300160013000d00180017000d000f00160013000f0013000d0004000000020101000400000002010100040000002d01010025000000320a9c00f303110004000000000072069703636f6e73
747261696e74732c206574632e0016001a00180013000f00110016000c0018000f0013000d000d0016000f0016000d000400000002010100040000002701ffff04000000020101000400000002010100030000001e00070000001604ed0060069a0095050400000002010100040000002d01010017000000320a9c009505
080004000000000072069703616e616c797365731600180016000c0017001300160013000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010500050000001402b4001d01050000001302b400a801040000002d01040004000000f001050007000000
fc020000000000000000040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300a401aa00a401be00b301b400040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa0200000300000000000000220004000000
2d010600050000001402b4001b03050000001302b400e203040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300de03aa00de03be00ed03b400040000002d010300040000002d01040004000000f00106000400000002010100
040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4003705050000001302b4008605040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303008205aa008205be009105b4000400
00002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e0007000000160455025601e40113000400000002010100040000002d0101001c000000320ae60113000b0004000000000072069703787878494e54582e43544c0018001800180011002400
1f0024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e001a5000500000013021901a500040000002d01040004000000f0010600040000002d01050009000000fa020000010000000000000022000400
00002d0106000a000000240303009b001d01af001d01a5000e01040000002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e0007000000160463031803e401b7010400000002010100040000002d01010019000000320ae601b701090004000000
00007206970378787843442e54414200180018001800210024000d001f002300210004000000020101000400000002010100040000002d0101001c000000320a2102b7010b00040000000000720697037878784f5244432e5441420018001800180024002100240021000d001f0023002100040000000201010004000000
02010100040000002d01010019000000320a5c02b70109000400000000007206970378787850462e444943001800180018001c001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320a9702b70109000400000000007206970378787853462e444943001800180018001c00
1b000d0024001100210004000000020101000400000002010100040000002d01010019000000320ad202b70109000400000000007206970378787849462e4449430018001800180011001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320a0d03b7010900040000000000
7206970378787852542e4449430018001800180021001f000d002400110021000400000002010100040000002701ffff04000000020101000400000002010100030000001e0007000000160437027005e401f1030400000002010100040000002d01010019000000320ae601f10309000400000000007206970378787841
442e43544c00180018001800230024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e001490205000000130237014902040000002d01040004000000f0010600040000002d01050009000000fa020000
01000000000000002200040000002d0106000a000000240303003f023b0153023b0149022c01040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e0018304050000001302370183040400
00002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a0000002403030079043b018d043b0183042c01040000002d010300040000002d01040004000000f00106000400000002010100040000002d010000030000000000000000000000000000000000
00000000000000000000000000000000000057006f007200640044006f00630075006d0065006e007400000000000000000000000000000000000000000000000000000000000000000000000000000000001a0002010700000009000000ffffffff00000000000000000000000000000000000000000000000000000000
000000000000000012000000f2140000000000000500530075006d006d0061007200790049006e0066006f0072006d006100740069006f006e00000000000000000000000000000000000000000000000000000028000200ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
0000000000000000000068000000bc020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000dca5650033c009040000000065000000000000000000000000030000e9030000f2140000000000000000000000000000000000000e0000000000000000000000000000000000000000000000da0000000000000000000000000c00006c000000000c0000
6c0000006c0c0000000000006c0c000000000000900c000000000000900c000000000000900c000014000000ba0c000014000000ba0c000000000000ce0c000000000000ce0c000000000000ce0c000000000000ce0c00000a000000d80c00000a000000ba0c0000000000004514000031000000e20c000004000000e60c
000000000000e60c000000000000e60c000000000000e60c0000000000006c0d0000000000006c0d0000000000006c0d0000000000006c0d0000020000006e0d0000000000006e0d0000000000006e0d0000210000008f0d00004c030000db1000004c030000271400001e0000007614000054000000ca14000028000000
451400000000000000000000000000000000000000000000900c0000000000006c0d00000000000000000400050001000100e60c0000860000006c0d000000000000000000000000000000000000000000006c0d0000000000006c0d00000000000045140000000000006c0d0000000000006c0c0000000000006c0c0000
00000000e60c00000000000000000000000000000000000000000000e20c0000000000006c0d0000000000006c0d0000000000006c0d0000000000006c0d0000000000006c0c000024000000e60c000000000000900c000000000000e60c0000000000006c0d00000000000000000000000000000000000000000000a40c
000008000000ac0c00000e0000006c0c0000000000006c0c0000000000006c0c0000000000006c0c0000000000006c0d0000000000006c0d0000000000006c0d0000000000006c0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000080808080808080808080808080d78787841442e43544c0d0d78787843442e5441420d7878784f5244432e5441420d78787850462e4449430d78787853462e4449430d78787849462e4449430d78787852542e4449430d0d
787878494e54582e43544c0d0d616e616c797365730d0d656c696d696e61746520626164207061727365732062792074657374732c20636f6e73747261696e74732c206574632e0d0d646973636f76657220706f737369626c652073657175656e636573206f66206d61746368696e6720616c6c6f6d6f727068730d0d6e
6f726d616c697a656420776f7264730d0d0d0d0c00a6780fa76801a8f01ea9b60d0000300001010c3000000100260020259024010061030000600300000000000000000f0000001600140000004b0032000000300001010b30000001002600701a9024010061030000600300000000000000000f0000001600140000004b
0032000000320001010a300000020428005022f0275107b1010000000005000500ffffff0000005e83000000004b0032005a7614000000320001010930000002042800a017f027c10651070000000005000500ffffff0000005e83000000004b0032005a7614000000300001010830000001002600901200240100f10300
00f00300000000000000000f0000001600140000004b0032000000320001010730000002042800c00ff027310641020000000005000500ffffff0000005e83000000004b0032005a7614000000320001010330000002042800302ac021f103b1010000000014000500ffffff0000005e83000000004b0032005a76140000
0030000101063000000100260080285022b101010000000000b0010000000000000f0000001600140000004b0032000000300001010530000001002600601e5022f103010000000000f0030000000000000f0000001600140000004b0032000000300001010430000001002600d0145022d102010000000000d002000000
0000000f0000001600140000004b00320000003200010102300000020428005022801f310611050000000014000000ffffff0000005e83000000004b0032005a7614000000320001010130000002042800a017801fc10611050000000014000000ffffff0000005e83000000004b0032005a761400000032000101003000
0002042800c00f30211105d1020000000014000500ffffff0000005e83000000004b0032005a76140007070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707070707070707ff07ff07ff07ff07ff07ff07ff07ff00000707f800000007ff07070000070707070707070700070707070707070007070707000007070007070007070007070707070000070700000007070700000007070000070707000707070007000000
070007070707000007070007070007070007070707070000070700000007070700000007070000070707000707070707000000070000070700070700070000000707070707070707070007070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707
07070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707000300000d0300000e030000e8030000e903000075060000f8000000f6000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027501000e750144040000000061000463140005000300000e0300001803000019030000230300002f03000039030000430300004d030000570300005803000064030000650300006e0300006f030000
a0030000a1030000d4030000d5030000e6030000e7030000e8030000e9030000fe0001f01e1b01fe00012e071b01fe000000000000fe00019e061b01fe00019e061b01fe00019e061b01fe00019e061b01fe00019e061b01fe00019e061b01fe000000000000fe00010e061b01fe000000000000fe0001ce031b01fe0000
00000000fe0003f6051b01fe000000000000fb000486061b01fe000000000000fb0002ee041b01fe000000000000fe000000000000fe0001f01e1b01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000050100010000160e000f00080001004b000f00000000001c000040f1ff02001c00064e6f726d616c00020000000600610904631800000000000000
00000000000000000000000022004140f2ffa10022001644656661756c742050617261677261706820466f6e740000000000000000000000000000000b0000004a000000570000006100000093000000c7000000d9000000dc00000000000000e90000000f00e90300000b00ffffffff01000421ffff010000000000e900
0000000000000000000000000f000000e900000006000000060000000003000075060000040000030000e90300000500e9000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c000000e9000000f70300000000270400000000570400000100
890400000100bb0400000000eb04000001001d05000001004f05000000007f0500000000af0500000000df0500000100110600000100430600000100ff405449206d6963726f4c617365722050533335004c5054313a0050534352495054005449206d6963726f4c61736572205053333500000000000000000000000000
00000403049400b8021f67000001000100ea0a6f086400010001002c01010001002c0103000000000000000000000000000000000000000000000000000000000000000000000000000800000060090000e40c00000100000000000000010000000200000000000000000000000000000000000000985f237ffcbc479341
8b0300010001000000000001000000000002000200010058020000c20100000000000000006400000000000000ffff0000ffff0000ffff0100ffff0000ffff0000ffff0000ffff0000ffff0100ffff0100ffff0000ffff0100ffff0000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffff437573746f6d2070616765203100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000904200009042000000000000437573746f6d207061676520320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000904200009042000000000000437573746f6d2070616765203300000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000090420000904200000000000000000000000000005449206d6963726f4c6173657220505333350000000000000000000000000000000403049400b8021f67000001000100ea0a6f086400010001002c01010001002c01030000
00000000000000000000000000000000000000000000000000000000000000000000000800000060090000e40c00000100000000000000010000000200000000000000000000000000000000000000985f237ffcbc4793418b0300010001000000000001000000000002000200010058020000c201000000000000000064
00000000000000ffff0000ffff0000ffff0100ffff0000ffff0000ffff0000ffff0000ffff0100ffff0100ffff0000ffff0100ffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000ffff437573746f6d207061676520310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000904200009042000000000000437573746f6d20706167652032000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000904200009042000000000000437573746f6d20706167652033000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090
42000090420000000000000000000000000000038001000000000000000000140000800080000000000000000000000000310015169001000054696d6573204e657720526f6d616e000c169001020053796d626f6c000b2690010000417269616c002200040001088c180000d0020000680100000000b7921306b9921346
000000000200010000000000000000000000010001000000040083100100000000000000000000000100010000000100000000000000210328000000000000000a416e647920426c61636b0a416e647920426c61636b00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000feff0000035f000000000000
00000000000000000000000001000000e0859ff2f94f6810ab9108002b27b3d9300000008c0200000d000000070000009800000004000000dc00000008000000000100000c000000240100000b000000480100000d0000006c0100000f0000009001000010000000b40100000a000000d801000012000000fc0100000e00
00002002000009000000440200001300000068020000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1e00000028000000443a5c4d534f46464943455c57494e574f52445c54454d504c4154455c4e4f524d414c2e444f540000000000000000000000000000000000
000000001e0000000b000000416e647920426c61636b0000000000000000000000000000000000001e0000000b000000416e647920426c61636b00000000000000000000000000000000000040000000001a1ed38a33bc010000000000000000000000000000000000000000000000004000000000c0a4598bb7de010000
000000000000000000000000000000000000000000004000000000a6a41a8b33bc010000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000
00000000400000000046c323000000000000000000000000000000000000000000000000000000001e000000130000004d6963726f736f667420576f726420362e30000000000000000000000300000001000000000000000000000000000000000000000000000000000000000000001e00000002000000320000000000
000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000001050000050000000d0000004d45544146494c455049435400923600009be1ffff020c000008009236651e0000
010009000003fd05000007002500000000001400000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b0200000000050000000c02970372060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02
ceff0000000000009001000000000400001254696d6573204e657720526f6d616e003000040000002d01010005000000090200000000040000000201010004000000020101000400000002010100030000001e000700000016040b011a017c0013000400000002010100040000002d0101001a000000320a7e0028000a00
040000000000720697036e6f726d616c697a656418001a001100250016000c000c0016001600190004000000020101000400000002010100040000002d01010013000000320ab9005800050004000000000072069703776f7264730024001a001100190013000400000002010100040000002701ffff0400000002010100
07000000fc020100000000000000040000002d01020009000000fa02000004000000000000002200040000002d010300070000001b042d011c031e00b30109000000fa02000000000000000000002200040000002d01040004000000f001030007000000fc020000ffffff000000040000002d0103000400000002010100
030000001e00070000001604260115032400b9010400000002010100040000002d01010025000000320a2600bd01110004000000000072069703646973636f76657220706f737369626c650019000c00130016001a001800160011000d0019001a00130013000c0018000c00160004000000020101000400000002010100
040000002d0101001d000000320a6100e8010c000400000000007206970373657175656e636573206f661300160019001900160018001600160013000d001a000f0004000000020101000400000002010100040000002d01010017000000320a9c000c020800040000000000720697036d61746368696e67250016000f00
160018000c001800190004000000020101000400000002010100040000002d0101001a000000320ad700f9010a0004000000000072069703616c6c6f6d6f7270687316000c000c001a0025001a0011001900180013000400000002010100040000002701ffff0400000002010100040000002d01020009000000fa020000
04000000000000002200040000002d010500070000001b042d0138051e00ed03040000002d01040004000000f0010500040000002d0103000400000002010100030000001e00070000001604260131052400f3030400000002010100040000002d0101001f000000320a2600f3030d0004000000000072069703656c696d
696e617465206261640016000c000c0025000c00180016000f0016000d0018001600190004000000020101000400000002010100040000002d01010023000000320a6100f3031000040000000000720697037061727365732062792074657374732c1900160011001300160013000d00180017000d000f00160013000f00
13000d0004000000020101000400000002010100040000002d01010025000000320a9c00f303110004000000000072069703636f6e73747261696e74732c206574632e0016001a00180013000f00110016000c0018000f0013000d000d0016000f0016000d000400000002010100040000002701ffff0400000002010100
0400000002010100030000001e00070000001604ed0060069a0095050400000002010100040000002d01010017000000320a9c009505080004000000000072069703616e616c797365731600180016000c0017001300160013000400000002010100040000002701ffff040000000201010009000000fa02000003000000
000000002200040000002d010500050000001402b4001d01050000001302b400a801040000002d01040004000000f001050007000000fc020000000000000000040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300a401aa00a401be00b301b400040000002d010300
040000002d01040004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4001b03050000001302b400e203040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d01
06000a00000024030300de03aa00de03be00ed03b400040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4003705050000001302b4008605040000002d01040004000000f00106000400
00002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303008205aa008205be009105b400040000002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e0007000000160455025601e4011300040000000201
0100040000002d0101001c000000320ae60113000b0004000000000072069703787878494e54582e43544c00180018001800110024001f0024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e001a500
0500000013021901a500040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303009b001d01af001d01a5000e01040000002d010300040000002d01040004000000f001060004000000020101000400000002010100040000000201
0100030000001e0007000000160463031803e401b7010400000002010100040000002d01010019000000320ae601b70109000400000000007206970378787843442e54414200180018001800210024000d001f002300210004000000020101000400000002010100040000002d0101001c000000320a2102b7010b000400
00000000720697037878784f5244432e5441420018001800180024002100240021000d001f002300210004000000020101000400000002010100040000002d01010019000000320a5c02b70109000400000000007206970378787850462e444943001800180018001c001b000d0024001100210004000000020101000400
000002010100040000002d01010019000000320a9702b70109000400000000007206970378787853462e444943001800180018001c001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320ad202b70109000400000000007206970378787849462e44494300180018001800
11001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320a0d03b70109000400000000007206970378787852542e4449430018001800180021001f000d002400110021000400000002010100040000002701ffff04000000020101000400000002010100030000001e000700
0000160437027005e401f1030400000002010100040000002d01010019000000320ae601f10309000400000000007206970378787841442e43544c00180018001800230024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d01
0600050000001402e001490205000000130237014902040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303003f023b0153023b0149022c01040000002d010300040000002d01040004000000f001060004000000020101000400
00000201010009000000fa02000003000000000000002200040000002d010600050000001402e001830405000000130237018304040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a0000002403030079043b018d043b0183042c0104000000
2d010300040000002d01040004000000f00106000400000002010100040000002d010000030000000000}{\result {\fs20\insrsid1444013 {\pict\wmetafile8\picw13970\pich7780\picwgoal7920\pichgoal4411 
010009000003fd05000007002500000000001400000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b0200000000050000000c02970372060d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02ce
ff0000000000009001000000000400001254696d6573204e657720526f6d616e003000040000002d01010005000000090200000000040000000201010004000000020101000400000002010100030000001e000700000016040b011a017c0013000400000002010100040000002d0101001a000000320a7e0028000a000400
00000000720697036e6f726d616c697a656418001a001100250016000c000c0016001600190004000000020101000400000002010100040000002d01010013000000320ab9005800050004000000000072069703776f7264730024001a001100190013000400000002010100040000002701ffff0400000002010100070000
00fc020100000000000000040000002d01020009000000fa02000004000000000000002200040000002d010300070000001b042d011c031e00b30109000000fa02000000000000000000002200040000002d01040004000000f001030007000000fc020000ffffff000000040000002d010300040000000201010003000000
1e00070000001604260115032400b9010400000002010100040000002d01010025000000320a2600bd01110004000000000072069703646973636f76657220706f737369626c650019000c00130016001a001800160011000d0019001a00130013000c0018000c00160004000000020101000400000002010100040000002d
0101001d000000320a6100e8010c000400000000007206970373657175656e636573206f661300160019001900160018001600160013000d001a000f0004000000020101000400000002010100040000002d01010017000000320a9c000c020800040000000000720697036d61746368696e67250016000f00160018000c00
1800190004000000020101000400000002010100040000002d0101001a000000320ad700f9010a0004000000000072069703616c6c6f6d6f7270687316000c000c001a0025001a0011001900180013000400000002010100040000002701ffff0400000002010100040000002d01020009000000fa02000004000000000000
002200040000002d010500070000001b042d0138051e00ed03040000002d01040004000000f0010500040000002d0103000400000002010100030000001e00070000001604260131052400f3030400000002010100040000002d0101001f000000320a2600f3030d0004000000000072069703656c696d696e617465206261
640016000c000c0025000c00180016000f0016000d0018001600190004000000020101000400000002010100040000002d01010023000000320a6100f3031000040000000000720697037061727365732062792074657374732c1900160011001300160013000d00180017000d000f00160013000f0013000d000400000002
0101000400000002010100040000002d01010025000000320a9c00f303110004000000000072069703636f6e73747261696e74732c206574632e0016001a00180013000f00110016000c0018000f0013000d000d0016000f0016000d000400000002010100040000002701ffff040000000201010004000000020101000300
00001e00070000001604ed0060069a0095050400000002010100040000002d01010017000000320a9c009505080004000000000072069703616e616c797365731600180016000c0017001300160013000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d
010500050000001402b4001d01050000001302b400a801040000002d01040004000000f001050007000000fc020000000000000000040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300a401aa00a401be00b301b400040000002d010300040000002d01040004000000
f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4001b03050000001302b400e203040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a00000024030300de03aa
00de03be00ed03b400040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa02000003000000000000002200040000002d010600050000001402b4003705050000001302b4008605040000002d01040004000000f0010600040000002d01050009000000fa020000
01000000000000002200040000002d0106000a000000240303008205aa008205be009105b400040000002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e0007000000160455025601e40113000400000002010100040000002d0101001c00000032
0ae60113000b0004000000000072069703787878494e54582e43544c00180018001800110024001f0024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e001a5000500000013021901a500040000002d01
040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303009b001d01af001d01a5000e01040000002d010300040000002d01040004000000f0010600040000000201010004000000020101000400000002010100030000001e00070000001604630318
03e401b7010400000002010100040000002d01010019000000320ae601b70109000400000000007206970378787843442e54414200180018001800210024000d001f002300210004000000020101000400000002010100040000002d0101001c000000320a2102b7010b00040000000000720697037878784f5244432e5441
420018001800180024002100240021000d001f002300210004000000020101000400000002010100040000002d01010019000000320a5c02b70109000400000000007206970378787850462e444943001800180018001c001b000d0024001100210004000000020101000400000002010100040000002d0101001900000032
0a9702b70109000400000000007206970378787853462e444943001800180018001c001b000d0024001100210004000000020101000400000002010100040000002d01010019000000320ad202b70109000400000000007206970378787849462e4449430018001800180011001b000d002400110021000400000002010100
0400000002010100040000002d01010019000000320a0d03b70109000400000000007206970378787852542e4449430018001800180021001f000d002400110021000400000002010100040000002701ffff04000000020101000400000002010100030000001e0007000000160437027005e401f103040000000201010004
0000002d01010019000000320ae601f10309000400000000007206970378787841442e43544c00180018001800230024000d0021001f001e000400000002010100040000002701ffff040000000201010009000000fa02000003000000000000002200040000002d010600050000001402e001490205000000130237014902
040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a000000240303003f023b0153023b0149022c01040000002d010300040000002d01040004000000f00106000400000002010100040000000201010009000000fa020000030000000000000022
00040000002d010600050000001402e001830405000000130237018304040000002d01040004000000f0010600040000002d01050009000000fa02000001000000000000002200040000002d0106000a0000002403030079043b018d043b0183042c01040000002d010300040000002d01040004000000f001060004000000
02010100040000002d010000030000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000}}}}}{\insrsid1444013 
\par }\pard \ql \li0\ri0\keepn\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 {\insrsid1444013 Definitions: \tab }{\b\insrsid1444013 parse}{\insrsid1444013 : one of the outputs of the parsing program for a given word
\par }\pard \ql \li720\ri0\keepn\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 {\b\insrsid1444013 \tab \tab analysis}{\insrsid1444013 : a parse which is linguistically correct
\par }\pard \ql \li720\ri0\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 {\b\insrsid1444013 \tab \tab ambiguity}{\insrsid1444013 : two or more analyses
\par {\*\bkmkstart _Toc393852512}{\*\bkmkstart _Toc393873647}{\*\bkmkstart _Toc393875632}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.1\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 ANALYSIS CODE TABLE{\*\bkmkend _Toc393852512}{\*\bkmkend _Toc393873647}
{\*\bkmkend _Toc393875632}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 We\rquote 
ve already seen the Text Input Control file (xxxINTX.CTL).  The Analysis Code Table (sometimes called the Dictionary Code Table) (xxxCD.TAB) simply maps whatever standard format markers you use in your d
ictionary to the codes AMPLE needs internally.  For each morpheme type (prefix, infix, suffix, root), one needs to list the appropriate fields.  Note that your dictionary may have many other fields not needed by AMPLE.  In this case, simply do not map the
 field in the Analysis Code Table and AMPLE will ignore it.  A sample section for the prefix dictionary mappings is given in (}{\field{\*\fldinst {\insrsid1444013  seq nx x16 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 14}}}{\insrsid1444013 
).
\par }\pard\plain \s96\ql \fi-1440\li1440\ri0\sb60\keep\widctlpar\tqr\tx864\tx2880\tx4320\tx6120\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x16}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 14}}}{\v\insrsid1444013 x16}{\insrsid1444013 {\*\bkmkend x16})\tab }{\cs109\f2\fs22\insrsid1444013 \\prefix\tab \\p\tab \tab | record marker\line \\ch\tab \'94\\a\'94\tab 
\'94A\'94\tab | allomorph\line \\ch\tab \'94\\c\'94\tab \'94C\'94\tab | category\line \\ch\tab \'94\\g\'94\tab \'94M\'94\tab | morphname\line \\ch\tab \'94\\mp\'94\tab \'94P\'94\tab | morpheme\line \tab \tab \tab | property\line \\ch\tab \'94\\o\'94\tab 
\'94O\'94\tab | order class\line \\ch\tab \'94\\mcc\'94\tab \'94Z\'94\tab | co-occurrence\line \tab \tab \tab | constraint\line \\ch\tab \'94\\no\'94\tab \'94!\'94\tab | don\rquote t load record}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Dictionary/source Markers/edit markers.
\line AmpleLinks provides these automatically (since all of the dictionary information is within LinguaLinks).\line CARLAStudio users use Dictionary tab, SFM Markers.}}}{\insrsid1444013 
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
This code table can be used to extract just the data needed from a bilingual dictionary, too.  In
 such a case, we want to have forms for both languages in the same record.  Consider this simple example from South Eastern Puebla Nahuatl (SEP) and Orizaba Nahuatl (ORI) (all Nahuatl data are from Ralph Reed, p.c., David Tuggy, p.c. and Tuggy 1991):

\par }\trowd \irow0\irowband0\ts11\trgaph108\trleft-90\trkeep\trbrdrt\brdrs\brdrw30 \trbrdrl\brdrs\brdrw30 \trbrdrb\brdrs\brdrw30 \trbrdrr\brdrs\brdrw30 \trbrdrh\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3 
\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx2064\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx4218\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw30 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx6372\pard\plain 
\ql \li720\ri0\sb240\keep\keepn\nowidctlpar\intbl\nooverflow\faroman\rin0\lin720 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Word\cell SEP\cell ORI\cell }\pard 
\ql \li0\ri0\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\insrsid1444013 \trowd \irow0\irowband0\ts11\trgaph108\trleft-90\trkeep\trbrdrt\brdrs\brdrw30 \trbrdrl\brdrs\brdrw30 \trbrdrb\brdrs\brdrw30 \trbrdrr\brdrs\brdrw30 \trbrdrh
\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3 \clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx2064
\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx4218\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw30 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx6372\row }\trowd \irow1\irowband1\ts11\trgaph108\trleft-90\trkeep\trbrdrt\brdrs\brdrw30 \trbrdrl\brdrs\brdrw30 \trbrdrb\brdrs\brdrw30 \trbrdrr\brdrs\brdrw30 \trbrdrh\brdrs\brdrw15 
\trbrdrv\brdrs\brdrw15 \trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx2064\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx4218\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw30 
\cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx6372\pard \ql \li720\ri0\sb240\keep\keepn\nowidctlpar\intbl\nooverflow\faroman\rin0\lin720 {\insrsid1444013 water\cell }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a}{
\insrsid1444013 \cell }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a}{\insrsid1444013 \cell }\pard \ql \li0\ri0\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\insrsid1444013 \trowd \irow1\irowband1
\ts11\trgaph108\trleft-90\trkeep\trbrdrt\brdrs\brdrw30 \trbrdrl\brdrs\brdrw30 \trbrdrb\brdrs\brdrw30 \trbrdrr\brdrs\brdrw30 \trbrdrh\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3 \clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx2064\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx4218\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw30 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx6372\row }\trowd \irow2\irowband2\lastrow 
\ts11\trgaph108\trleft-90\trkeep\trbrdrt\brdrs\brdrw30 \trbrdrl\brdrs\brdrw30 \trbrdrb\brdrs\brdrw30 \trbrdrr\brdrs\brdrw30 \trbrdrh\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3 \clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx2064\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 
\cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx4218\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw30 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx6372\pard 
\ql \li720\ri0\sb240\keep\keepn\nowidctlpar\intbl\nooverflow\faroman\rin0\lin720 {\insrsid1444013 first\cell }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 achto?}{\insrsid1444013 \cell }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 achto}{\insrsid1444013 \cell }\pard \ql \li0\ri0\widctlpar\intbl\aspalpha\aspnum\faauto\adjustright\rin0\lin0 {\insrsid1444013 \trowd \irow2\irowband2\lastrow \ts11\trgaph108\trleft-90\trkeep
\trbrdrt\brdrs\brdrw30 \trbrdrl\brdrs\brdrw30 \trbrdrb\brdrs\brdrw30 \trbrdrr\brdrs\brdrw30 \trbrdrh\brdrs\brdrw15 \trbrdrv\brdrs\brdrw15 \trftsWidth1\trpaddl108\trpaddr108\trpaddfl3\trpaddfr3 \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw30 
\clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx2064\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil 
\cellx4218\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw30 \cltxlrtb\clftsWidth3\clwWidth2154\clshdrawnil \cellx6372\row }\pard \ql \li0\ri0\sb240\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 {
\insrsid1444013 How can we enter fields in SEPCD.TAB to get only the South Eastern Puebla forms and in ORICD.TAB to get only the Orizaba forms?  One way is to use }{\cs109\f2\fs22\insrsid1444013 \\com}{\insrsid1444013 
 in the bilingual dictionary for the forms which are common to both dialects (e.g. }{\cs109\f2\fs22\insrsid1444013 \\com a}{\insrsid1444013 ), }{\cs109\f2\fs22\insrsid1444013 \\sep}{\insrsid1444013 
 for the forms which are unique to South Eastern Puebla (e.g. }{\cs109\f2\fs22\insrsid1444013 \\sep achto?}{\insrsid1444013 ), and }{\cs109\f2\fs22\insrsid1444013 \\ori}{\insrsid1444013  for the Orizaba forms (e.g. }{\cs109\f2\fs22\insrsid1444013 \\
ori achto}{\insrsid1444013 ).  Then in SEPCD.TAB, map both }{\cs109\f2\fs22\insrsid1444013 \\sep}{\insrsid1444013  and }{\cs109\f2\fs22\insrsid1444013 \\com}{\insrsid1444013  to }{\cs109\f2\fs22\insrsid1444013 \'94A\'94}{\insrsid1444013 
, while ORICD.TAB will need both }{\cs109\f2\fs22\insrsid1444013 \\ori}{\insrsid1444013  and }{\cs109\f2\fs22\insrsid1444013 \\com}{\insrsid1444013  mapped to }{\cs109\f2\fs22\insrsid1444013 \'94A\'94}{\insrsid1444013 .
\par {\*\bkmkstart _Toc393852513}{\*\bkmkstart _Toc393873648}{\*\bkmkstart _Toc393875633}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.2\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 DICTIONARY ORTHOGRAPHY CHANGE TABLE{\*\bkmkend _Toc393852513}
{\*\bkmkend _Toc393873648}{\*\bkmkend _Toc393875633}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The Dictionary Orthography Change Table (xxxORDC.TAB) is available if your dictionary is in a different orthography than the internal orthography.  The fields }{\cs109\f2\fs22\insrsid1444013 \\scl}{\insrsid1444013  and }{\cs109\f2\fs22\insrsid1444013 \\ch
}{\insrsid1444013  may be used to define the necessary changes, just like in the Text Input Control file.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Dictionary/source Orthography changes.\line AmpleLinks users use Dict Ortho.\line 
CARLAStudio users use Dictionary tab, Dict Orthography Changes.}}}{\insrsid1444013 
\par {\*\bkmkstart _Toc393852514}{\*\bkmkstart _Toc393873649}{\*\bkmkstart _Toc393875634}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.3\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 DICTIONARIES AND ANALYSIS DATA CONTROL FILE{\*\bkmkend _Toc393852514}
{\*\bkmkend _Toc393873649}{\*\bkmkend _Toc393875634}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The various dictionaries, prefix, infix, suffix, and root, (xxxPF.DIC, xxxIF.DIC, xxxSF.DIC, xxxRT.DIC) contain the information about individual morphemes that AMPLE needs in order to perform parsing.}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The latest version of AMPLE allows for a \'93
unified dictionary\'94 where all affix and root entries may be placed in a single file.\line CARLAStudio users use Language/Properties... dialog box; then Dicts tab, then Change Dictionary Organization Method... button.}}}{\insrsid1444013 
\par Finally, the Analysis Data Control file (xxxAD.CTL) contains parsing control information such as constraints.
\par What information will the program need to parse the Nahuatl form in (}{\field{\*\fldinst {\insrsid1444013  seq nx x17 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 15}}}{\insrsid1444013 )?}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Nahuatl glosses are: PST = past tense; 1S = first person singular subject; 3O = third person object; PRET.SG = preterite singular.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x17}(}{\field{\*\fldinst {\insrsid1444013 
 seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 15}}}{\v\insrsid1444013 x17}{\insrsid1444013 {\*\bkmkend x17})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 onikitak}{\insrsid1444013 \line o-ni-k-ita-k\line 
PST-1S-3O-see-PRET.SG
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote I saw it.\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
It is certainly going to have to know at least the shapes of the morphemes (i.e. their allomorphs) and the glosses.  So let\rquote s assume that the dictionary entries include at least the following fields.}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  More fields are actually required as we\rquote 
ll see later.}}}{\insrsid1444013   The field }{\cs109\f2\fs22\insrsid1444013 \\p}{\insrsid1444013  indicates a prefix entry, }{\cs109\f2\fs22\insrsid1444013 \\r}{\insrsid1444013  a root entry, and }{\cs109\f2\fs22\insrsid1444013 \\s}{\insrsid1444013 
 a suffix entry.  (All }{\cs109\f2\fs22\insrsid1444013 \\p}{\insrsid1444013  records, of course, will go in the prefix file, all }{\cs109\f2\fs22\insrsid1444013 \\r}{\insrsid1444013  records in a root file, and all }{\cs109\f2\fs22\insrsid1444013 \\s}{
\insrsid1444013  records in the suffix file.)  The vertical bar symbol }{\cs109\f2\fs22\insrsid1444013 (|)}{\insrsid1444013  indicates the beginning of a comment (which continues to the end of the line).
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x18}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 16}}}{\v\insrsid1444013 x18}{\insrsid1444013 {\*\bkmkend x18})\tab }{\cs109\f2\fs22\insrsid1444013 \\p o\line \\g PST\tab \tab \tab | Past\line \line \\p ni\line \\g 1\tab \tab \tab \tab 
| 1st person subject\line \line \\p k\line \\g 3O\tab \tab \tab \tab | 3rd person object\line \line \\r ita\line \\g see\line \line \\s k\line \\g PRET.SG\tab \tab | Preterite singular
\par {\*\bkmkstart _Toc393852515}{\*\bkmkstart _Toc393873650}{\*\bkmkstart _Toc393875635}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.3.1\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 HOW AMPLE PARSES A WORD{\*\bkmkend _Toc393852515}{\*\bkmkend _Toc393873650}
{\*\bkmkend _Toc393875635}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Now, what does the program need to do?  It begins by trying to match any prefixes with the front of the word.  Since the prefix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o-}{\insrsid1444013 
  matches, it initially tries this prefix.  It now needs to find a match for }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 nikitak}{\insrsid1444013 .  It finds that the prefix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
ni-}{\insrsid1444013  matches the front and then looks for a match with }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 kitak}{\insrsid1444013 .  Another prefix, }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 k-}{
\insrsid1444013 , matches here, so the remainder is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 itak}{\insrsid1444013 .  No more prefixes match the beginning of }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 itak}{
\insrsid1444013 , so the program tries to find a root that matches.  Since }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ita}{\insrsid1444013  matches, the remainder is just }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 k}{
\insrsid1444013 .  There is a suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -k}{\insrsid1444013 
 that matches this, so it is chosen.  The parser is now at the end of the word.  As long as all the constraints are satisfied, AMPLE outputs the parse.
\par The parsing process actually proceeds bottom-up, left-to-right exhaustively, so all poss
ible combinations of matching morphemes are discovered, and all of those which pass the constraints are returned in the output.  Thus, the output of a word is allowed to be ambiguous.  Matching and filtering are integrated so that false paths are abandone
d as soon as possible.
\par To see this, let\rquote s add another allomorph to the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 k-}{\insrsid1444013  3O prefix:}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  Under at least one analysis, the 3O morpheme\rquote 
s base form is }{\cs69\i\f38\lang1024\langfe1024\noproof\insrsid6688044 k-}{\insrsid6688044 .  When the }{\cs69\i\f38\lang1024\langfe1024\noproof\insrsid6688044 k}{\insrsid6688044  cannot be syllabified, an epenthetic vowel (}{
\cs69\i\f38\lang1024\langfe1024\noproof\insrsid6688044 i}{\insrsid6688044 ) is inserted.  One way to model such an understanding in AMPLE is to list }{\cs69\i\f38\lang1024\langfe1024\noproof\insrsid6688044 ki-}{\insrsid6688044  as 
a distinct allomorph and condition its occurrence appropriately.  See section }{\field{\*\fldinst {\insrsid6688044  REF _Ref393072552 \\n }}{\fldrslt {\insrsid6688044 3.5.1}}}{\insrsid6688044 .}}}{\insrsid1444013 
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x19}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 17}}}{\v\insrsid1444013 x19}{\insrsid1444013 {\*\bkmkend x19})\tab }{\cs109\f2\fs22\insrsid1444013 \\p k\line \\a ki\line \\g 3O\tab \tab \tab \tab | 3rd person object
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 When the program tries to analyze the word }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 onikitak}{\insrsid1444013  now, it begins as before by finding the prefixes }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o-}{\insrsid1444013  and }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ni-}{\insrsid1444013 .  This time, however, it will try using the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ki-}{\insrsid1444013 
 allomorph of 3O.  The remainder of the word will then be }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 tak}{\insrsid1444013 .  There are no prefixes that match }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 tak}{
\insrsid1444013  and also there are no roots that match }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 tak}{\insrsid1444013 , so the program will have to backtrack and try the other allomorph of 3O (}{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 k-}{\insrsid1444013 ).  It will succeed as before with this allomorph.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Now in our little example above, we had only a few prefixes, roots, and suffixes.  Suppose that instead we had the full number of possibilities (some 50 prefixes, 140 suffixes, and probably tho
usands of roots).  The program will need to try potentially thousands of combinations.
\par {\*\bkmkstart _Toc393852516}{\*\bkmkstart _Toc393873651}{\*\bkmkstart _Toc393875636}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.3.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 SUCCESSOR TESTS VERSUS FINAL TESTS{\*\bkmkend _Toc393852516}
{\*\bkmkend _Toc393873651}{\*\bkmkend _Toc393875636}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
If we always scan across the word and find all possible matches of allomorphs before trying any constraints whatsoever, we will spend 
a lot of processing time matching possibilities that will be incorrect.  This is especially obvious for initial prefixes: when the program makes a match for a prefix that will turn out to be incorrect, it still must try to match all of the following possi
ble root and suffix combinations before it will learn that the initial prefix is wrong.
\par For this reason, AMPLE divides its constraints (usually called tests) into two major varieties: those which apply as soon as possible (successor tests) and those which a
pply after an entire parse has been posited (final tests).  The successor tests compare the current allomorph being attempted with its immediately preceding posited morpheme.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 Actually, one can also compare the currently posited allomorph with }{\b\insrsid6688044 any}{\insrsid6688044  preceding posited morpheme.}}}{\insrsid1444013   If a successor test fails, then the currently posited allomorph is assumed to b
e wrong, so there is no need to bother trying to find more matches in the rest of the word while positing this incorrect allomorph.  Successor tests, then, eliminate incorrect parses as soon as they are tried.
\par Not every kind of test, however, can be limited to only the information between preceding posited morphemes and the current allomorph.  Remember the Caquinte future tense example in (}{\field{\*\fldinst {\insrsid1444013  seq nx x4 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 4}}}{\insrsid1444013 )?  In Caquinte the future tense is often realized as a combination of both a prefix and a suffix.  When
 the program posits the future tense prefix, there is no way for it at that moment to know whether or not it will find the future tense suffix later on.  The program  has to wait.  Other kinds of constraints may only be possible when the word has been com
p
letely parsed.  For this reason AMPLE has a second variety of tests, called final tests.  These apply not to a pair of posited morphemes, but to the entire posited parse.  Final tests can look across the whole parse and check for long distance requirement
s.
\par AMPLE allows the user to create several customized versions of these tests.  Rather than just having one kind of phonological constraint and one kind of morphotactic constraint as some morphological parsers do (such as KIMMO (Koskenniemi 1983, Antworth 1
990) and keCi (Hankamer 1986)), AMPLE allows a series of constraints to apply.  Each test can be kept relatively straightforward to eliminate its subset of bad parses.  When all the tests are combined together, they (hopefully) rule out all of the incorre
ct parses.
\par For a long word, such as }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 nonkantakiterota}{\insrsid1444013  \lquote I\rquote ll go and do it.\rquote  (Caquinte), the phonological and morphological constraints are especially crucial:
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s76\ql \fi-360\li360\ri720\sb60\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls3\rin720\lin360\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Without any phonological or morphological constraints there are 9,400 parses.
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Adding phonological constraints only reduces this to 870 parses.
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Adding orderclass constraints to the phonological constraints yields 17 parses. 
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Adding category mapping instead of orderclass gives 5 parses.
\par {\pntext\pard\plain\s76 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}With phonological constraints, category mapping, and orderclass the 1 correct parse is obtained.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Clearly, properly using and controlling the constraints is the major task in implementing a parser for a given language.  Since a morphological parser must model linguistic reality, it is a good idea to use constraints that model
 appropriate linguistic notions.  Two major concepts for morphology are morphotactics and morphophonemics.  Morphotactics deal with what morphemes can co-occur with what other morphemes.  Morphophonemics deal with what shape a given morpheme will have in 
various phonological and morphological environments.
\par {\*\bkmkstart _Toc393786503}{\*\bkmkstart _Toc393852517}{\*\bkmkstart _Toc393873652}{\*\bkmkstart _Toc393875637}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 MORPHOTACTICS{\*\bkmkstart morphotactics}{\*\bkmkend _Toc393786503}
{\*\bkmkend _Toc393852517}{\*\bkmkend _Toc393873652}{\*\bkmkend _Toc393875637}{\*\bkmkend morphotactics}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The three types of morphotactic constraints that AMPLE uses are Orderclass, Category Mapping, and Morpheme Co-occurrence Constraints.  Each type will be illustrated in turn.
\par {\*\bkmkstart _Ref392991112}{\*\bkmkstart _Toc393786504}{\*\bkmkstart _Toc393852518}{\*\bkmkstart _Toc393873653}{\*\bkmkstart _Toc393875638}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.1\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 ORDERCLASS{\*\bkmkstart orderclassMorphotactics}{\*\bkmkend _Ref392991112}
{\*\bkmkend _Toc393786504}{\*\bkmkend _Toc393852518}{\*\bkmkend _Toc393873653}{\*\bkmkend _Toc393875638}{\*\bkmkend orderclassMorphotactics}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Order
class constraints are based on a Slot and Filler view of Morphology.  The vast majority of affixes have a fixed order or position in which they appear with respect to the root and/or other affixes.  Orderclass constraints can eliminate bad parses by rulin
g out a particular morpheme because it cannot occur in that position in the word, even though it may have the same surface form as the correct one.
\par {\*\bkmkstart _Toc393852519}{\*\bkmkstart _Toc393873654}{\*\bkmkstart _Toc393875639}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.1.1\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Strictly Increasing Order{\*\bkmkend _Toc393852519}
{\*\bkmkend _Toc393873654}{\*\bkmkend _Toc393875639}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Consider the four Nahuatl forms in (}{\field{\*\fldinst {\insrsid1444013  seq nx x20 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 18}}}{\insrsid1444013 ).}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The abbreviations used in the Nahuatl glos
ses are: PST = past tense; 1S = first person singular subject; 3O = third person object; PL = object plural; PRET.SG = preterite singular.}}}{\insrsid1444013   Based on this data, what are the relative orders of the prefixes, roots, and suffixes?  
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart x20}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 18}}}{\v\insrsid1444013 x20}{\insrsid1444013 {\*\bkmkend x20})\tab \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ni-k-ita\tab \tab \tab \tab \tab \tab ni-k-in-ita\line }{
\insrsid1444013 1S-3O-see\tab \tab \tab \tab \tab \tab \tab 1S-3O-PL-see\line \line }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o-ni-k-ita-k\tab \tab \tab \tab \tab o-ni-k-in-ita-k\line }{\insrsid1444013 PST-1S-3O-see-PRET.SG\tab 
\tab PST-1S-3O-PL-see-PRET.SG
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 We can posit an analysis that says 
that there are four prefix positions and (at least) one suffix position as shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x21 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 19}}}{\insrsid1444013 ):
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x21}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 19}}}{\v\insrsid1444013 x21}{\insrsid1444013 {\*\bkmkend x21})\tab }{\cs109\f2\fs22\insrsid1444013 \tab PST SUBJ OBJ PLURAL root ASPECT\line ...-40 -30  -20 -10      0   10   ...
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The number below each affix is its orderclass.  Negative num
bers are used for prefixes, 0 for roots and positive numbers for suffixes.  This information is simply entered in the prefix or suffix dictionary in the }{\cs109\f2\fs22\insrsid1444013 \\o}{\insrsid1444013  field for each affix.  Roots are given a }{
\cs109\f2\fs22\insrsid1444013 0}{\insrsid1444013  orderclass internally by the program.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  AmpleLinks allows you to provide a descriptive label for each class rather than an arbitrary number.}}}{\insrsid1444013   The numbers in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x21 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 19}}}{\insrsid1444013 ) are in increments of 10 to allow for future fine-tuning.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Then we need to add special rules, called tests, to tell the program what the relationship must be between any two consecutive parts of the word.  For the Nahuatl example in (}{\field{\*\fldinst {\insrsid1444013  seq nx x20 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 18}}}{\insrsid1444013 -}{\field{\*\fldinst {\insrsid1444013  seq nx x21 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 19}}}{\insrsid1444013 
) we simply need to make sure that the orderclass is strictly increasing.  Two successor tests put in the Analysis Data file, one for prefixes (with the }{\cs109\f2\fs22\insrsid1444013 \\pt}{\insrsid1444013  field code as shown in (}{\field{\*\fldinst {
\insrsid1444013  seq nx x22\line 
\par  }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 20}}}\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 ))and one for suffixes (whi
ch is just like it except it has }{\cs109\f2\fs22\insrsid1444013 \\st}{\insrsid1444013  instead of }{\cs109\f2\fs22\insrsid1444013 \\pt}{\insrsid1444013 ), will insure the correct result.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The parts of the test will be covered in section }
{\field{\*\fldinst {\insrsid6688044  REF _Ref393080421 \\n }}{\fldrslt {\insrsid6688044 3.7.1}}}{\insrsid6688044 
\par CarlaMenu users use Constraints/custom Tests.
\par AmpleLinks users use Tests.
\par CARLAStudio users use Analysis tab, Morphotactics and then one of the Prefix Tests, Infix Tests, Suffix Tests, Root Tests, or Final Tests.}}}{\insrsid1444013 
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x22}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 20}}}{\v\insrsid1444013 x22}{\insrsid1444013 {\*\bkmkend x22})\tab }{\cs109\f2\fs22\insrsid1444013 \\}{\f2\fs22\insrsid1444013 pt ORDER_ST\line \tab \tab left orderclass < current orderclass
\par {\*\bkmkstart _Toc393852520}{\*\bkmkstart _Toc393873655}{\*\bkmkstart _Toc393875640}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.1.2\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Non-Decreasing Order{\*\bkmkend _Toc393852520}
{\*\bkmkend _Toc393873655}{\*\bkmkend _Toc393875640}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The test in (}{\field{\*\fldinst {\insrsid1444013  seq nx x22 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 20}}}{\insrsid1444013 ) requires that the orderclasses between the current morpheme (}{\f2\fs22\insrsid1444013 current}{\insrsid1444013 ) and its immediately preceding morpheme (}{\f2\fs22\insrsid1444013 left}{
\insrsid1444013 ) be strictly increasing.  Such a test will rule out two morphemes side by side with the same orderclass.  If you want to allow repetition of an orderclass, you need a test for non-decreasing orderclass, such as in (}{\field{\*\fldinst {
\insrsid1444013  seq nx x23 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 21}}}{\insrsid1444013 ).
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x23}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 21}}}{\v\insrsid1444013 x23}{\insrsid1444013 {\*\bkmkend x23})\tab }{\f2\fs22\insrsid1444013 \\pt ORDER_ST\line \tab \tab left orderclass <= current orderclass}{\insrsid1444013 
\par {\*\bkmkstart _Toc393852521}{\*\bkmkstart _Toc393873656}{\*\bkmkstart _Toc393875641}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.1.3\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Morphemes without a Fixed Order{\*\bkmkend _Toc393852521}
{\*\bkmkend _Toc393873656}{\*\bkmkend _Toc393875641}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Of course, things can be more complicated in some languages.  For example, consider the suffix 
}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -lla}{\insrsid1444013  \lquote JUST\rquote  }{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 in }{\insrsid1444013 Huallaga Quechua as shown in }{
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 (}{\field{\*\fldinst {\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  seq nx x43 }}{\fldrslt {\cs69\fs22\lang1024\langfe1024\noproof\insrsid14046460 22}}}{
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 )}{\insrsid1444013 .}{\cs25\lang1024\langfe1024\super\noproof\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used for the Huallaga Quechua examples are: SIM = similar; RECIP = reciprocal; REL = relativizer; 2P = second person possessive pronoun; OBJ = object marker.  All Huallaga Quechua data is from David Weber.}}}{\insrsid1444013 
  What orderclass should }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -lla}{\insrsid1444013  \lquote JUST\rquote  }{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 have?  
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1440\tx2118\tx2847\tx3576\tx4248\tx4320\tx4392\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab {\*\bkmkstart x43}(}{\field{\*\fldinst {\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  seq nx }}{\fldrslt {\cs69\fs22\lang1024\langfe1024\noproof\insrsid14046460 22}}}{
\cs69\v\fs22\lang1024\langfe1024\noproof\insrsid1444013 x43}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 {\*\bkmkend x43})\tab a.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 chay\tab -naw\tab -lla}{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \line \tab }{\insrsid1444013 that\tab -SIM\tab -JUST}{\scaps\insrsid1444013 \line \tab    0\tab    180\tab    ?\tab \tab \tab \tab }{\insrsid1444013 orderclass
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs69\fs22\insrsid1444013 \tab }{\insrsid1444013 \lquote just like that\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1440\tx2160\tx3060\tx3780\tx4590\tx5310\tx5880\tx6429\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab \tab b.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 reqsi\tab -naku\tab -sha\tab -lla\tab -yki\tab -ta\line }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
\tab }{\insrsid1444013 know\tab -RECIP\tab -REL\tab -JUST\tab -2P\tab -OBJ\line }{\scaps\insrsid1444013 \tab     0\tab     60\tab   120\tab     ?\tab 140\tab 180\tab \tab }{\insrsid1444013 orderclass
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \lquote just between you and your friends\rquote }{
\cs69\fs22\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note that it occurs after a morpheme of orderclass 180 in (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x43 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 22}}}{\insrsid1444013 a), but before a morpheme of orderclass 140 in (}{\field{\*\fldinst {\insrsid1444013  seq nx x43 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 22}}}{
\insrsid1444013 b).  What can we do for such a morpheme that can occur in various positions among the suffixes, even though the other suffixes are fixed in their order?  Orderclass constraints are still needed, but they cannot apply to }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -lla}{\insrsid1444013  \lquote JUST\rquote .  This can be handled by assigning the floating morpheme an orderclass of }{\cs109\f2\fs22\insrsid1444013 0}{\insrsid1444013 
.  Then two separate tests are needed: a successor test to check all consecutive morphemes where }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -lla}{\insrsid1444013  \lquote JUST\rquote  is not involved, as shown in (}{\field{\*\fldinst {
\insrsid1444013  seq nx x24 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 23}}}{\insrsid1444013 ), and a final test to check the morphemes on both sides of }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -lla}{\insrsid1444013  
\lquote JUST\rquote  when it does occur, as shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x25 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 24}}}{\insrsid1444013 ).}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The
 tests shown are for the non-decreasing variety.  For the strictly increasing variety, simply change \lquote <=\rquote  to \lquote <\rquote  in each test.  For a fuller discussion of the tests, see section }{\field{\*\fldinst {\insrsid6688044 
 REF _Ref393080421 \\n }}{\fldrslt {\insrsid6688044 3.7.1}}}{\insrsid6688044 .}}}{\insrsid1444013   (Such floating morphemes tend to be adverbials whose scope is over the stem to which they attach.)
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x24}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 23}}}{\v\insrsid1444013 x24}{\insrsid1444013 {\*\bkmkend x24})\tab }{\cs109\f2\fs22\insrsid1444013 \\st ORDER_ST\line \tab \tab IF        (current orderclass ~= 0)\line \tab \tab THEN (left order
class <= current orderclass)}{\insrsid1444013 
\par \tab {\*\bkmkstart x25}(}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 24}}}{\v\insrsid1444013 x25}{\insrsid1444013 {\*\bkmkend x25})\tab }{\cs109\f2\fs22\insrsid1444013 \\ft ORDER_FT\line \tab \tab 
IF   (       (current orderclass = 0)\line            AND (FOR_SOME_LEFT    (LEFT orderclass ~= 0) )\line            AND (FOR_SOME_RIGHT  (RIGHT orderclass ~= 0) )\line            )\line \tab \tab THEN (LEFT orderclass <= RIGHT orderclass)
\par {\*\bkmkstart _Ref392991119}{\*\bkmkstart _Toc393786505}{\*\bkmkstart _Toc393852522}{\*\bkmkstart _Toc393873657}{\*\bkmkstart _Toc393875642}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CATEGORY MAPPING{\*\bkmkstart categoryMappingMorphotactics}
{\*\bkmkend _Ref392991119}{\*\bkmkend _Toc393786505}{\*\bkmkend _Toc393852522}{\*\bkmkend _Toc393873657}{\*\bkmkend _Toc393875642}{\*\bkmkend categoryMappingMorphotactics}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now consider the Spanish data shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x27 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}{\insrsid1444013 ).}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The abbreviations used in the Spanish glosse
s are: F = feminine; M = masculine; DIM = diminutive; 1SGPRES = first person singular subject in present tense; 3SGPRES = third person singular subject in present tense.}}}{\insrsid1444013 
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1404\tx3727\tx6043\tx7476\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x27}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}{\v\insrsid1444013 x27}{\insrsid1444013 {\*\bkmkend x27})\tab a.\tab   }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas-a}{\insrsid1444013 \tab 
\lquote house-F\rquote \line b.\tab   }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas-it-a}{\insrsid1444013 \tab \lquote house-DIM-F\rquote \line c.\tab   }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas-o}{
\lang3082\langfe1033\langnp3082\insrsid1444013 \tab \lquote case-}{\scaps\lang3082\langfe1033\langnp3082\insrsid1444013 M}{\lang3082\langfe1033\langnp3082\insrsid1444013 \rquote \line d.\tab   }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas-it-o}{\insrsid1444013 \tab \lquote case-DIM-M\rquote \line e.\tab   }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas-a}{\insrsid1444013 \tab \lquote marry-3SgPRES
\rquote \line f.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 *cas-it-a}{\insrsid1444013 \tab \lquote marry-*}{\scaps\insrsid1444013 DIM-}{\insrsid1444013 3SgPRES\rquote \line g.\tab   }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas-o}{\insrsid1444013 \tab \lquote marry-1SgPRES\rquote \line h.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 *cas-it-o}{\insrsid1444013 \tab \lquote marry-*}{
\scaps\insrsid1444013 DIM-}{\insrsid1444013 1SgPRES\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Suppose we were to try and model this data just using orderclass.  What orderclasses might we use?  One possibility is shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x48 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 26}}}{
\insrsid1444013 ).
\par }\pard\plain \s96\ql \fi-1440\li1440\ri0\sb60\keep\widctlpar\tqr\tx864\tx2610\tx3960\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x48}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 26}}}{\v\insrsid1444013 x48}{\insrsid1444013 {\*\bkmkend x48})\tab }{\cs109\f2\fs22\insrsid1444013 -a\tab F\tab 20\line -a\tab 3SgPRES\tab 20\line -it\tab DIM\tab 10\line -o
\tab M\tab 20\line -o\tab 1SgPRES\tab 20
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 But how do we rule out the ungrammatical examples (}{\field{\*\fldinst {\insrsid1444013  seq nx x27 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}{\insrsid1444013 f and g)?  As far as the orderclass is concerned, these are well-formed.  What is the problem with these forms, though?  The category of the
 root and the category of the diminutive suffix are not compatible: nominal affixes do not go on verbs.
\par {\*\bkmkstart _Toc393852523}{\*\bkmkstart _Toc393873658}{\*\bkmkstart _Toc393875643}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.2.1\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Key Concepts for Categories{\*\bkmkend _Toc393852523}
{\*\bkmkend _Toc393873658}{\*\bkmkend _Toc393875643}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 This leads us to the first key concept of categories as they are used by AMPLE: }{
\cs64\i\insrsid1444013  partition}{\i\insrsid1444013 . }{\cs64\i\insrsid1444013 Partitioning}{\insrsid1444013  limits the occurrence of affixes so that they can only be joined to certain stem categories.  For example, the }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -a }{\insrsid1444013 \lquote feminine\rquote , }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -o }{\insrsid1444013 \lquote masculine\rquote  and }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -it }{\insrsid1444013 \lquote diminutive\rquote  suffixes can only go on nouns, while the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -a }{\insrsid1444013 \lquote }{
\scaps\insrsid1444013 3}{\insrsid1444013 SgPRES\rquote  and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -o }{\insrsid1444013 \lquote }{\scaps\insrsid1444013 1}{\insrsid1444013 SgPRES\rquote  suffixes can only go on verbs.
\par Now consider all three Spanish roots with the form }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas}{\insrsid1444013  above.  None of them are valid words by themselves.  The noun root meaning \lquote house\rquote 
 requires a feminine suffix to be a complete word; the noun root meaning \lquote case\rquote  requires a masculine suffix to be complete; and the verb root meaning \lquote marry\rquote 
 requires one of the inflectional suffixes to be a well-formed verb.  This illustrates the second key notion of categories: }{\cs64\i\insrsid1444013 obligation}{\i\insrsid1444013 .}{\insrsid1444013   The concept of }{\cs64\i\insrsid1444013 obligation}{
\i\insrsid1444013  }{\insrsid1444013 is where a particular form requires certain affixes in order to be well-formed.  Affixes which are obligatory will change the category of the stem that they attach to in order to show that the obligation has been met.

\par Now consider the diminutive suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -it}{\insrsid1444013  in (}{\field{\*\fldinst {\insrsid1444013  seq nx x27 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}{\insrsid1444013 
b, d).  It clearly is not a required suffix since it does not need to be present (}{\field{\*\fldinst {\insrsid1444013  seq nx x27 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}{\insrsid1444013 a, c).  But does it \'93satisfy\'94
 the obligation of the root to which it attaches?  If it did, then }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casit}{\insrsid1444013  would be a well-formed word, which it is not: it still needs either a feminine or a masculine gende
r suffix to be well-formed.  The diminutive suffix passes on or propagates the obligation of the root.  This illustrates the third (and final) key category concept: }{\cs64\i\insrsid1444013 propagation}{\i\insrsid1444013 .  }{\insrsid1444013 
Some affixes do not affect the category; they merely pass it on.
\par {\*\bkmkstart _Toc393852524}{\*\bkmkstart _Toc393873659}{\*\bkmkstart _Toc393875644}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.2.2\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Determining and Keying the Categorie{\*\bkmkend _Toc393852524}s
{\*\bkmkend _Toc393873659}{\*\bkmkend _Toc393875644}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 So how do we tell AMPLE what the category mappings are?  Let\rquote 
s step through the process of determining the best category system for the Spanish data above.
\par First, each root has a category.  To start with, let\rquote s simply partition them into N (for noun) and V (for verb), so the category of the root meaning \lquote marry\rquote  is marked in the dictionary by adding the field }{
\cs109\f2\fs22\insrsid1444013 \\c\~V}{\insrsid1444013  and the noun roots meaning \lquote house\rquote  and \lquote case\rquote  are both marked by adding the field }{\cs109\f2\fs22\insrsid1444013 \\c\~N}{\insrsid1444013 .  
\par We can partition the suffixes also into those that attach to nouns and those that attach to verbs.  Now, recall from section }{\field{\*\fldinst {\insrsid1444013  REF _Ref393852569 \\n }}{\fldrslt {\insrsid14046460 1.1.1}}}{\insrsid1444013 
 that some affixes change the category of the stem they attach to.  For example, in English the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_al}{\insrsid1444013  suffix will attach to the noun }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institution}{\insrsid1444013  to produce the adjective }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 institutional}{\insrsid1444013 
.  Thus, affixes attach to a stem of one category and either produce a new stem of the same category or a stem of a different category.  That is, affixes need to map from one category to another while roots
 do not have any such mapping.  Returning to the Spanish data in (}{\field{\*\fldinst {\insrsid1444013  seq nx x27 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 25}}}{\insrsid1444013 
), we could begin by positing that the masculine and feminine and diminutive suffixes go on nouns to produce nouns, while the inflectional suffixes giving tense and agreemen
t information go on verbs to produce verbs.  We encode these in the dictionary by adding the field }{\cs109\f2\fs22\insrsid1444013 \\c\~N/N}{\insrsid1444013  for the nominal suffixes and }{\cs109\f2\fs22\insrsid1444013 \\c\~V/V}{\insrsid1444013 
 for the verbal suffixes.  The }{\cs109\f2\fs22\insrsid1444013 X/Y}{\insrsid1444013  notation is used to indicate that the affix goes on a stem of category }{\cs109\f2\fs22\insrsid1444013 X}{\insrsid1444013  resulting in a stem of category }{
\cs109\f2\fs22\insrsid1444013 Y}{\insrsid1444013 .
\par Given this scheme, what will AMPLE do for a form like }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casita}{\insrsid1444013 ?  Remembering that AMPLE does exhaustive parsing, we see that it will try all three }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 cas}{\insrsid1444013  roots.  For the verb meaning \lquote marry\rquote , the diminutive suffix does not map onto a verb stem, so AMPLE will fail to find a parse.  For the noun meaning \lquote 
house\rquote , the diminutive suffix will work fine: it attaches to nominal stems and produces a nominal stem.  The feminine gender marker }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_a}{\insrsid1444013 
 will then attach to produce a nominal stem and we\rquote ll get the correct analysis.  But what will happen for the noun root meaning \lquote case\rquote 
?  It, too, is a noun, so the diminutive and feminine gender suffixes will be found.  The result is that AMPLE will produce a parse for }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casita}{\insrsid1444013  of }{\f2\fs22\insrsid1444013 
case-}{\scaps\f2\fs22\insrsid1444013 dim}{\f2\fs22\insrsid1444013 -}{\scaps\f2\fs22\insrsid1444013 f}{\insrsid1444013  which is incorrect: \lquote case\rquote 
 is a masculine noun, so it cannot have a feminine gender ending.  What can we do to overcome this problem?
\par Suppose we partition the nouns into NF and NM for \lquote noun feminine\rquote  and noun masculine\rquote , respectively.  Now the root meaning \lquote house\rquote  and the feminine suffix would be marked }{\cs109\f2\fs22\insrsid1444013 \\c\~NF}{
\insrsid1444013  and }{\cs109\f2\fs22\insrsid1444013 \\c\~NF/NF}{\insrsid1444013 , respectively, while the root meaning \lquote case\rquote  and the masculine suffix would be marked }{\cs109\f2\fs22\insrsid1444013 \\c\~NM}{\insrsid1444013  and }{
\cs109\f2\fs22\insrsid1444013 \\c\~NM/NM}{\insrsid1444013 , respectively.  What do we do for the diminutive suffix?  It would need to have a choice between the two category mappings: }{\cs109\f2\fs22\insrsid1444013 \\c\~NF/NF NM/NM}{\insrsid1444013 
 (affixes may have more than one category mapping; roots may have more than one category).  With this scheme, when }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casita}{\insrsid1444013  is parsed, the erroneous parse of }{
\f2\fs22\insrsid1444013 case-}{\scaps\f2\fs22\insrsid1444013 dim}{\f2\fs22\insrsid1444013 -}{\scaps\f2\fs22\insrsid1444013 f }{\insrsid1444013 would fail because the feminine suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_a}{
\insrsid1444013  would not map onto the masculine stem }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casit}{\insrsid1444013 .
\par Unfortunately, this still does not completely handle the problem because we have not dealt with the obligation yet.  To see this, what will happen for the non-existent form }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casit}{
\insrsid1444013 ?  AMPLE will produce two parses: }{\f2\fs22\insrsid1444013 case-}{\scaps\f2\fs22\insrsid1444013 dim}{\scaps\insrsid1444013  }{\insrsid1444013 and }{\f2\fs22\insrsid1444013 house-}{\scaps\f2\fs22\insrsid1444013 dim}{\scaps\insrsid1444013 .
}{\insrsid1444013   \lquote House\rquote  is NF and so the diminutive can attach to it resulting in an NF stem.  Similarly, \lquote case\rquote  is NM and the diminutive can also attach to it resulting in an NM stem.  How can we rule these out?
\par Suppose we think of NF as meaning \lquote I\rquote m a noun that needs a feminine gender suffix\rquote  (similarly NM means \lquote I\rquote m a noun that needs a masculine gender suffix\rquote 
).  Further suppose that the feminine gender suffix satisfies the NF \lquote need\rquote , resulting in a \lquote completed\rquote  noun.  We could encode its mapping as }{\cs109\f2\fs22\insrsid1444013 \\c\~NF/N}{\insrsid1444013 
.  That is, it attaches to an NF stem and results in an N stem; i.e. it attaches to a stem which is a noun needing a feminine gender suffix and results in a noun stem.  The masculine gender suffix would map }{\cs109\f2\fs22\insrsid1444013 \\c\~NM/N}{
\insrsid1444013 .  What implication does this new scheme have for the diminutive suffix?  The diminutive suffix would still map }{\cs109\f2\fs22\insrsid1444013 \\c\~NF/NF NM/NM}{\insrsid1444013  as before (it propagates the noun root\rquote 
s obligation on).  If we also tell AMPLE to check the category of the last suffix and to accept nominal stems as well-formed nouns only if they end with a category of N, then we can eliminate the problem we had with }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 casit}{\insrsid1444013  above.
\par Similarly, for the verbs, we can give the root the category VI meaning \lquote I\rquote m a verb root that needs an inflectional ending\rquote  and then mark the inflectional suffixes }{\cs109\f2\fs22\insrsid1444013 \\c\~VI/V}{\insrsid1444013 
 to show that they change a verb stem requiring inflection into a well-formed verb.  We also tell AMPLE to allow the final suffix to map to a category of V (but not VI).
\par Besides simple verbal inflection, some languages require a verbal affix
 showing person and number agreement of the subject for intransitive verbs and two such affixes (for both subject and object) for transitive verbs.  Passive and causative morphemes can change how many agreement affixes are required as well.  The number of
 arguments a particular verb takes is called its }{\cs64\i\insrsid1444013 valence}{\insrsid1444013 .  In cases where the language requires the valence to be realized morphologically, we can encode it in the category scheme.  In the Quechua example in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x29 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 27}}}{\insrsid1444013 ) the category mappings are given above each morpheme to illustrate how the valence changes.}{\cs25\super\insrsid1444013 
\chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Quechua glosses are: PASS = passive; CAUS = causative; 1O = first person object; 3FUT: = third person subject, future tense.  The data is from David Weber.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx2109\tx2896\tx3691\tx4477\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x29}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 27}}}{\v\insrsid1444013 x29}{\insrsid1444013 {\*\bkmkend x29})\tab V2\tab V2/V1\tab V1/V2\tab V2/V1\tab V1/V0\line }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 allcha\tab -ka:\tab -chi\tab -ma\tab -nqa\line }{\insrsid1444013 fix\tab -}{\caps\insrsid1444013 pass\tab -caus\tab -1o\tab -3fut
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote he will heal me\rquote 
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The category mappings can also be used for derivational morphemes, such as v
erbalizers, nominalizers, etc.  You simply need to know what kind of stem the affix attaches to (its fromcategory) and what category the resulting stem becomes (its tocategory).
\par {\*\bkmkstart _Toc393873660}{\*\bkmkstart _Toc393875645}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.2.3\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Category Tests{\*\bkmkend _Toc393873660}{\*\bkmkend _Toc393875645}

\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Just as with the orderclass constraints, tests must be added to
 the Analysis Data file to insure that the category mappings are being applied correctly for your language.
\par {\*\bkmkstart _Toc393873661}{\*\bkmkstart _Toc393875646}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.2.3.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Languages with Suffixes Only{\*\bkmkend _Toc393873661}
{\*\bkmkend _Toc393875646}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The Spanish and Quechua examples have suffixes only, and the categories are mapped from the root out to the end of the word.  Therefore, in every pair of morphemes in (}{\field{\*\fldinst {\insrsid1444013  seq nx x29 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 27}}}{\insrsid1444013 
) the fromcategory of the right morpheme matches the tocategory of the left morpheme.  This represents one of the simplest cases to deal with.  We merely need to tell the Analysis Data file what categories are allowed, for example for Quechua verbs:}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 CarlaMenu users use Lists/Categories, Lists/Category cLasses, and Constraints/custom Tests (note that using "Constraints/Category tests/Suffixes built f
irst" will only create the successor test; the appropriate final test must be added by hand by the user).\line AmpleLinks users use Categories, Category Classes, and Tests.\line 
CARLAStudio users use Analysis tab, Morphotactics and then Categories, Category Classes, and one of the five test types.  The CARLAStudio wizard for creating a new project will automatically create a finalcategory class along with the appropriate tests.}}
}{\insrsid1444013 
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ca V2 \tab \tab | verb requiring two participants
\par \\ca V1 \tab \tab | verb requiring one participant
\par \\ca V0 \tab \tab | completed verb
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 what categories are complete words:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ccl finalcategory V0}{\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 and add two tests: a successor test which insures that each pair of morphemes match correctly:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st CATEGORY_ST\line left tocategory is current fromcategory

\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
and a final test which insures that the tocategory of the last (rightmost) suffix is the category of a complete word:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ft CATEGORY_FT\line 
FINAL tocategory is member [finalcategory]
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Thus, in (}{\field{\*\fldinst {\insrsid1444013  seq nx x29 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 27}}}{\insrsid1444013 ) the passive suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_ka:}{\insrsid1444013  can attach to the root }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 allcha}{\insrsid1444013  \lquote fix\rquote  because the tocategory of the root (V2) matches the fromcategory of the suffix.  The tocategory of the passive suffix is 
V1, which matches the fromcategory of the causative suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -chi}{\insrsid1444013 , so the constraint in the }{\cs109\f2\fs22\insrsid1444013 CATEGORY_ST}{\insrsid1444013 
 test is met.  The tocategory of the stem is now V2, which matches the fromcategory of the first person object marker }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_ma}{\insrsid1444013 .  The object marker changes the v
alence, as reflected in the tocategory V1, since one of the obligatory participants has been specified.  The final suffix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_nqa}{\insrsid1444013 
 supplies both the future tense and the third person subject information, matching the V1 in its fromcategory and changing the cat
egory of the stem to V0.  All the suffixes have successfully passed the successor test.  Finally, the final test makes sure that the tocategory of the rightmost suffix is a member of the category class }{\cs109\f2\fs22\insrsid1444013 finalcategory}{
\insrsid1444013 , which V0 is, so it passes the parse as valid.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Languages with prefixes only could be handled with mirror image tests.
\par {\*\bkmkstart languagesWithBothPrefixesAndSuffixes}{\*\bkmkstart _Toc393873662}{\*\bkmkstart _Toc393875647}{\*\bkmkend languagesWithBothPrefixesAndSuffixes}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.2.3.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Languages with both Prefixes and Suffixes{\*\bkmkend _Toc393873662}
{\*\bkmkend _Toc393875647}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Languages which have both prefixes and suffixes are, of course, more complicated.  First, we have to determine the direction in which th
e categories map from the root: do they move rightward through the suffixes first and then leftward through the prefixes; or leftward through the prefixes first and then rightward through the suffixes}{\insrsid14369330 ; or is there a mixture}{
\insrsid1444013 ?  We have to look at data to find out, such as the Campa data in (}{\field{\*\fldinst {\insrsid1444013  seq nx x28 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 28}}}{\insrsid1444013 )-(}{\field{\*\fldinst {\insrsid1444013 
 seq nx x32 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 31}}}{\insrsid1444013 ), where the category mappings are given above each morpheme.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Campa glosses are: 1 = first person subject; 1O = first pe
rson object; 2 = second person; 3M = third person masculine subject; 3MPOS = third person masculine possessor; F = future suffix; FUT = future prefix; LOC = locative; NFR = non-future reflexive; PERF = perfective; POS = possessed marker.  The data are fro
m David Payne, p.c and Payne 1981.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1873\tx2659\tx3388\tx4342\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x28}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 28}}}{\v\insrsid1444013 x28}{\insrsid1444013 {\*\bkmkend x28})\tab V1/V0\tab V1/V1\tab V2N\tab V2N/V2\tab V2/V1\line }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i-\tab N-\tab chik\tab -i\tab -na}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \line }{\caps\insrsid1444013 3m-\tab fut-\tab }{\insrsid1444013 cut}{\caps\insrsid1444013 \tab -f
\tab -1o}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote he will cut me\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1873\tx2896\tx4002\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x30}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 29}}}{\v\insrsid1444013 x30}{\insrsid1444013 {\*\bkmkend x30})\tab V1/V0\tab V1R\tab V1R/V1R\tab V1R/V1\line }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 no-\tab siroNt\tab -ak\tab -a\line }{\insrsid1444013 1-\tab laugh\tab }{\caps\insrsid1444013 -perf\tab -nfr}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote I have laughed\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1884\tx2613\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x31}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 30}}}{\v\insrsid1444013 x31}{\insrsid1444013 {\*\bkmkend x31})\tab N1/N0\tab    N1\tab    N1/N1\line }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i-\tab 
 gito\tab  -ki}{\insrsid1444013 \line 3}{\caps\insrsid1444013 mpos}{\scaps\insrsid1444013 -  }{\insrsid1444013 head\tab    }{\caps\insrsid1444013 -loc}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote on his head\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1884\tx2916\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x32}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 31}}}{\v\insrsid1444013 x32}{\insrsid1444013 {\*\bkmkend x32})\tab N1/N0\tab N0\tab N0/N1\line }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 p-\tab iinani
\tab -te\line }{\insrsid1444013 2-\tab mother\tab -}{\scaps\insrsid1444013 POS}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote your mother\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 One cl
ue to look for is where the tocategory that says a word is complete shows up.  Since that is the initial prefix for Campa, we can conclude that the categories map from the root rightward through the suffixes first, and then move back to the prefix closest
 to the root and map leftward to the beginning of the word, as illustrated in (}{\field{\*\fldinst {\insrsid1444013  seq nx x33 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 32}}}{\insrsid1444013 ).
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x33}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 32}}}{\v\insrsid1444013 x33}{\insrsid1444013 {\*\bkmkend x33})\tab }{\cs109\f2\fs22\insrsid1444013               /\\\line              /  \\\line             /   /\\\line            /   /  \\\line 
          /   /   /\\\line          /   /   /  \\\line         /   /   /\\   \\\line        /   /   /  \\   \\\line      prf prf root sfx sfx\line               --------->\line       <----
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Another clue to the direction of the mapping is where the derivational affixes attach, especially the category changing ones.  Since derivational affixes typically att
ach before inflectional ones, one normally uses the scheme that will map through the derivational affixes first.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  There are languages for which the \lquote 
suffix first then prefix\rquote  or the \lquote prefix first then suffix\rquote  mapping schemes do not work well.  If your language is one of these, we suggest you contact a CARLA consultant for help in determining the best route to follow.}}}{
\insrsid1444013 
\par For the Campa data above, besides entering the category mappings in each dictionary entry, we will need to add the declarations of the category names and the category class of the final categories to the Analysis Data file:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\
ca V2 V1 V0 V2N V2R V1N V1R N1 N0}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 Obviously, the category labels may be chosen to fit the particular language.  The categories may all be listed in one line as shown here, or each one may have its own line with room for comments, as in the Quechua exam
ple above.  The advantage of adding comments is that anyone reading the file will understand what the categories stand for.  As you can see here, the abbreviations are not always clear and you may even have trouble remembering them yourself if you come ba
ck to the file after a long break.}}}{\lang3082\langfe1033\langnp3082\insrsid1444013 
\par }{\cs109\f2\fs22\insrsid1444013 \\ccl finalcategory V0 N0
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
In addition, we will need five tests!  First, we need to tell the program that, as it parses the word from left t
o right, the fromcategory of the left prefix must match the tocategory of the next prefix in each pair of prefixes.  This has the same effect as saying that the categories map from right to left among the prefixes:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\pt CATEGORY_PT\line left fromcategory is current tocategory

\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Among the suffixes, the categories map left to right, so we can use the same successor test for suffixes as was used for Quechua:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st CATEGORY_ST\line left tocategory is current fromcategory

\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Next we need a test that insures that the tocategory of
 the last suffix matches the fromcategory of the prefix closest to the root.  This has to be a final test, done after the whole word is parsed:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ft CATEGORY_FT_1\line IF   (    (current type is prefix)
\line       AND (right type is root)\line      )\line THEN (current fromcategory is FINAL tocategory)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Finally, we need to make sure that there is a tocategory that can end a word in the appropriate place.  If there is a prefix, then the initial prefix must have a tocategory that can end the word.  This can be a successor test, listed as }{
\cs109\f2\fs22\insrsid1444013 \\rt}{\insrsid1444013  for \lquote root test\rquote  since the program knows whether there is a prefix or not as soon as the obligatory root is found:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt CATEGORY_RT\line IF   (INITIAL type is prefix)\line 
THEN (INITIAL tocategory is member [finalcategory])
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 If a particular word does not ha
ve any prefixes, then the final category must be found at the end of the word, which requires a final test:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ft CATEGORY_FT_2\line IF NOT (INITIAL type is prefix)\line 
THEN   (FINAL tocategory is member [finalcategory])
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 These tests are probably confusing, especially since the notation hasn\rquote 
t been introduced yet (see section }{\field{\*\fldinst {\insrsid1444013  REF _Ref392990957 \\n }}{\fldrslt {\insrsid14046460 3.6}}}{\insrsid1444013 ).  The good news is that you don\rquote 
t have to write the tests yourself!  The starter kit that comes with (the official release of) AMPLE provides the tests.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 CarlaMenu provides some of these category tests, but not the ones that check for final categories.\line AmpleLinks users use the Ample blueprint and choose the Templates option.\line CARLAStudio users use the create a new project wizard.}}}{
\insrsid1444013   If your language has both prefixes and suffixes, you simply have to choose between the \lquote prs1\rquote  pattern (for prefixes, root, and suffixes version 1) illustrated for Campa above and the \lquote prs2\rquote  pattern shown in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x34 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 33}}}{\insrsid1444013 ), where the categories map leftward through the prefixes first and then rightward through the suffixes.
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x34}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 33}}}{\v\insrsid1444013 x34}{\insrsid1444013 {\*\bkmkend x34})\tab }{\cs109\f2\fs22\insrsid1444013               /\\\line              /  \\\line             /\\   \\\line            /  \\   \\
\line           /\\   \\   \\\line          /  \\   \\   \\\line         /   /\\   \\   \\\line        /   /  \\   \\   \\\line      prf prf root sfx sfx\line       <--------\line                   ----->
\par {\*\bkmkstart _Ref116457608}{\listtext\pard\plain\s5 \b\insrsid14369330 \hich\af0\dbch\af0\loch\f0 3.4.2.3.3\tab}}\pard\plain \s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar
\jclisttab\tx0\hyphpar0\aspalpha\aspnum\faauto\ls1\ilvl4\outlinelevel4\adjustright\rin0\lin0\itap0\pararsid14369330 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 
Languages with Prefixes and Suffixes which Affix in an Alternating Manner{\*\bkmkend _Ref116457608}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 
Now if we consider the affixation schemata prs1 and prs2, we can imagine that there is also a logical third alternative. In 
prs1 all suffixes are attached first, and then the prefixes; in prs2 all prefixes are attached first, and then all the suffixes. But suppose the prefixes and suffixes attach in an alternating pattern, as shown below (let's call this pattern \lquote prs3
\rquote ):
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 \tab (}{\field{\*\fldinst {\insrsid14369330  SEQ "nx" 
\\*ARABIC }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 34}}}{\insrsid14369330 )\tab }{\cs109\f2\fs22\insrsid14369330                /\\\line               /  \\\line              /\\   \\\line             /  \\   \\\line            /   /\\   
\\\line           /   /  \\   \\\line          /   /\\   \\   \\\line         /   /  \\   \\   \\\line        /   /    \\   \\   \\\line      prf1 prf2 root sfx1 sfx2\line           <----\line                ---->\line      <----\line 
                    ---->
\par }\pard \s58\ql \fi-11\li0\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 {\insrsid14369330 
Because of the alternating directions in affixation, the process of parsing words like this has been nicknamed 'jitterbug' scanning.
\par }\pard\plain \s23\qj \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 Languages showing this pattern are not at all uncommon. 
\par An example from Bantawa (Nepal) will show the point.
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1884\tx2613\nooverflow\faroman\rin0\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 \tab (}{\field{\*\fldinst {
\insrsid14369330  SEQ "nx" \\*ARABIC }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 35}}}{\insrsid14369330 )\tab }{\cs109\f2\fs22\insrsid14369330               /\\\line              /  \\\line             /    \\\line }{\insrsid14369330 \tab }{
\cs109\f2\fs22\insrsid14369330      /\\     \\\line           /  \\     \\\line          /    \\     \\\line         /     /\\     \\\line        /     /  \\     \\\line       /     /    \\     \\\line      /     / \\    \\     \\\line     /     /   \\
    \\     \\\line    /     /\\    \\    \\     \\\line   /     /  \\    \\    \\     \\\line  /     /    \\    \\    \\     \\\line }{\insrsid14369330 N/N\tab VAP/V\tab V\tab N/VAP  N/N    N/N\line }{
\cs106\i\f37\fs22\lang1024\langfe1024\noproof\insrsid3939289\charrsid3939289 \'ab}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid14369330 -\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid3939289\charrsid3939289 ka}{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid14369330 -\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid3939289\charrsid3939289 khe}{\cs106\b\i\f37\fs22\lang1024\langfe1024\noproof\insrsid3939289\charrsid3939289 \'4e}{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid14369330 \tab -pa\tab   -ci\tab -}{\f37\fs23\insrsid4137652 \'3f}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid14369330 a
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 pos3s-\tab APp-\tab copy\tab -APm\tab   -PL\tab -ERG\line 
\lquote by his disciples\rquote }{\cs25\super\insrsid14369330 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0\pararsid14369330 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs113\f39\insrsid6688044 \chftn }{\insrsid6688044 There are other ways to deal with discontinuous morphemes (or, as in this instance (}{\b\i\insrsid6688044 ka-  -pa}{\insrsid6688044 
), 'circumfixes') as well, e.g. with morpheme co-occurrence constraints (MCCs, see section }{\field{\*\fldinst {\insrsid6688044  REF _Ref393096610 \\r \\h }{\insrsid6688044 {\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f005200650066003300390033003000390036003600310030000000}}}{\fldrslt {\insrsid6688044 3.4.3}}}{\insrsid6688044 ). However, that system will n
ot show the word structure or nature of the morphemes involved in the categories. Also, technically, an MCC expression such as  \'93+/ _ ... XYZ\'94 (which means \'93somewhere to the right there must be an XYZ\'94
) is not precise as to the exact location where this XYZ is expected, whereas this categorial system }{\i\insrsid6688044 is}{\insrsid6688044 .}}}{\insrsid14369330 
\par }\pard\plain \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 
\par The ka- prefix and -pa suffix together form an active noun participle from a verb root. }{\insrsid4744936 Like any other noun, t}{\insrsid14369330 his n}{\insrsid3939289 oun}{\insrsid4744936  participle}{\insrsid3939289  can be pluraliz}{\insrsid4744936 
ed (-PL) and owned (pos3s-)}{\insrsid14369330 . In an}{\insrsid3939289 y case, it is clear that we can}{\insrsid14369330 
not check the category of the possessive prefix locally, i.e. by a successor test. It is not possible to know that the word is going to be a noun at that point. (We could add a category VAP/VAP for the possessive prefix to counter this problem, but }{
\insrsid3939289 i) it does not end here, and ii}{\insrsid14369330 ) how does that create an elegant description where otherwise active participles }{\insrsid13449299 pattern with nouns?) So we can}{\insrsid14369330 
not write a successor test here. Similarly}{\insrsid4744936 ,}{\insrsid14369330  the successor test for the first suffix aft
er the root can not reference the INITIAL category to see whether it can attach or not; the only thing we know at that moment is that there must be some element in the previously found morphemes that has the fromcategory (VAP) as it's tocategory.
\par 
\par In many cases it will be possible to describe a }{\insrsid15605875 \lquote }{\insrsid14369330 prs3}{\insrsid15605875 \rquote }{\insrsid14369330  language in terms of }{\insrsid15605875 \lquote }{\insrsid14369330 prs1}{\insrsid15605875 \rquote }{
\insrsid14369330  or }{\insrsid15605875 \lquote }{\insrsid14369330 prs2}{\insrsid15605875 \rquote }{\insrsid14369330 
, e.g. by introducing multiple categories for certain affixes, and let the AMPLE system work it out. This may work for parsing, but in doing this we lose on descriptive power and analytic elegance.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid15742764 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 
To counter this, an extra system has been introduced into AMPLE that borrows from a grammatical para}{\insrsid15742764 digm called \'93Categorial Grammar}{\insrsid14369330 \'94}{\insrsid15742764 {\*\bkmkstart cab}{\*\bkmkend cab}
 (see Ajdukiewicz 1935, Bar-Hillel 1953, Bar-Hillel, Gaifman, and Shamir 1964 and Lambek 1958 for classic works on Categorial Grammar).  }{\insrsid14369330 The key notion in this paradigm is that bound morphemes }{\insrsid1721597 \lquote need\rquote }{
\insrsid14369330  a single-category word or morpheme  to operate on, and in doing so, produce another single-category word of a (possibly) new category. If you browse back to the Spanish examples, it is clear what this means: the dimunitive morpheme }{
\insrsid1721597 \lquote needs\rquote }{\insrsid14369330  a noun root, and the gender (masculine / feminine) morpheme needs a noun root (of the right gender) to produce a well-formed free-standing noun. Now logically, it is quite possible that}{
\insrsid1721597  some prefix}{\insrsid14369330  }{\insrsid14774461 \lquote }{\insrsid14369330 needs}{\insrsid14774461 \rquote }{\insrsid14369330  an element of the category that}{\insrsid1721597  some suffix}{\insrsid14369330  produces}{\insrsid1721597 ,}
{\insrsid14369330  while}{\insrsid1721597  some other suffix}{\insrsid14369330  }{\insrsid14774461 \lquote }{\insrsid14369330 needs}{\insrsid14774461 \rquote }{\insrsid14369330  an element of the type that }{\insrsid1721597 that prefix}{\insrsid14369330 
 produces.
\par }\pard\plain \s23\qj \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 
To avoid having to write really cumbersome category successor and final tests for AMPLE, the following solution is available. To deal with this elegantly, two concepts are added to AMPLE. 
\par {\listtext\pard\plain\f3\fs18\insrsid14369330 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \ql \fi-283\li283\ri0\nowidctlpar\jclisttab\tx283\hyphpar0\aspalpha\aspnum\faauto\ls8\adjustright\rin0\lin283\itap0\pararsid14369330 
\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid14369330 The first is the notion of the }{\insrsid14774461 \lquote }{\insrsid14369330 output category.}{\insrsid14774461 \rquote }{\insrsid14369330  }{\insrsid14774461  }{\insrsid14369330 On
}{\insrsid14774461 e}{\insrsid14369330  of the lines of output of AMPLE may contain (if  you choose) the word category. This can be comp
uted in several ways; for prs1, you normally choose the first prefix category (if present) to be output as word category; for prs2-languages you would choose the last suffix. In the cases where there are no prefixes or suffixes available, AMPLE has a mech
anism of either selecting the mirror prefix or suffix, or the root category. For languages that are prs3 (where it is }{\insrsid14774461 not}{\insrsid14369330  predictable }{\insrsid14774461 for all well-formed words whether a}{\insrsid14369330 
 prefix or suffix will determine the final word category), you can choose to have the category }{\insrsid14774461 be }{\insrsid14369330 computed.
\par {\listtext\pard\plain\f3\fs18\insrsid14369330 \loch\af3\dbch\af0\hich\f3 \'b7\tab}The second addition  to AMPLE is that you can actually reference this }{\insrsid14774461 \lquote }{\cs114\fs20\loch\af2\hich\af2\dbch\af2\insrsid14369330 
\hich\af2\dbch\af2\loch\f2 outputcategory}{\insrsid14774461 \rquote }{\insrsid14369330  in your final tests. A test to check if the word category (a) can actually be computed (which is a prerequisite for the word to be grammatical anyway
) and (b) whether it is of a valid category, can be written as:
\par }\pard \ql \li0\ri0\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 {\cs109\f2\fs22\insrsid14369330 \tab \\ft OutputCategoryTest\line \tab \tab }{\cs114\fs20\loch\af2\hich\af2\dbch\af2\insrsid14369330 \hich\af2\dbch\af2\loch\f2 
outputcategory is member [finalcategory]
\par }{\insrsid14369330 
\par As it is difficult to conceive of good successor tests in }{\insrsid14774461 \lquote }{\insrsid14369330 prs3}{\insrsid14774461 \rquote }{\insrsid14369330  languages, you must either omit some successor tests, or re
lax the constraints imposed by them. However, while it is important to remember that while this system is }{\i\insrsid14369330 elegant}{\insrsid14369330 
, in terms of description with minimal means (and minimum number of categories assigned to each (bound) morpheme), computationally it may be ex
pensive if you leave out the successor-tests altogether. So it is better to leave in some successor tests and introduce some exceptions to them in the context of some specific morphemes or morpheme classes. How to write tests that logically combine condit
ions, and how to refer to specifi}{\insrsid14774461 c morphemes or morpheme classes}{\insrsid14369330  will be detailed later.
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid14369330 
\par {\*\bkmkstart _Ref393096610}{\*\bkmkstart _Toc393786506}{\*\bkmkstart _Toc393852525}{\*\bkmkstart _Toc393873663}{\*\bkmkstart _Toc393875648}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.3\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CO-OCCURRENCE CONSTRAINTS{\*\bkmkstart cooccurrenceConstraints}
{\*\bkmkend _Ref393096610}{\*\bkmkend _Toc393786506}{\*\bkmkend _Toc393852525}{\*\bkmkend _Toc393873663}{\*\bkmkend _Toc393875648}{\*\bkmkend cooccurrenceConstraints}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
We also need to be able to deal with requirements that exist between two or more possibly non-contiguous morphemes.  We\rquote ve already seen an example of this in Caquinte, repeated here in (}{\field{\*\fldinst {\insrsid1444013  seq nx x38 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 36}}}{\insrsid1444013 ), where the future prefix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n\_}{\insrsid1444013  can only be present if the future suffix }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_e}{\insrsid1444013  is also realized in the word.
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1614\tx2208\tx3087\tx3591\tx4339\tx4959\tx5553\tx5997\tx6591\tx6928\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\insrsid1444013 \tab {\*\bkmkstart x38}(}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 36}}}{\v\insrsid1444013 x38}{\insrsid1444013 {\*\bkmkend x38})\tab }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i-\tab n-\tab tsave\tab -t\tab -ako\tab -hi\tab -t\tab -e\tab -ro\line }{\caps\insrsid1444013 3m-\tab fut-\tab }{\insrsid1444013 tell}{\caps\insrsid1444013 \tab -\tab -dat\tab -pas\tab -\tab 
-f\tab -3fo\line }{\insrsid1444013 \lquote she will be told about\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
There are at least two ways to handle this kind of information computationally. One is to encode the requirement into the category system (into a finite state transition network).  This is what PC-KIMMO does, but it makes for a complex and \'93brittle\'94
 system.  Another way is to add a specific mechanism for dealing precisely with such co-occurrence constraints.  AMPLE chooses this latter modular approach and calls the constraint an MCC (for }{\ul\insrsid1444013 m}{\insrsid1444013 orpheme }{
\ul\insrsid1444013 c}{\insrsid1444013 o-occurrence }{\ul\insrsid1444013 c}{\insrsid1444013 onstraint).
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 An MCC ma
y be listed either in the Analysis Data File or in a particular dictionary entry.  If it applies only to a particular morpheme, as in the Caquinte case, it is better to list it in the dictionary entry as information about that morpheme.  We will see an ex
ample below where the constraint applies to a class of morphemes.  Then the MCC is listed in the Analysis Data File}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Constraints/Morpheme co-occurrences.
\line AmpleLinks users use MCCs.\line CARLAStudio users use Analysis tab, Morphotactics/Morpheme Cooccurrences.}}}{\insrsid1444013 
 so that it only has to be listed once and it gives information about the grammar as a whole.  AMPLE will find the MCC in either place and treat it in the same manner (equivalent to a final test) regardless of its location.}{\cs25\super\insrsid1444013 
\chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 MCCs listed in the Analysis Data Control file are attempted before MCCs listed in dictionary entries since the Analysis Data file is loaded first.}}}{\insrsid1444013 
\par The form of an MCC is the field code }{\cs109\f2\fs22\insrsid1444013 \\mcc}{\insrsid1444013  followed by the gloss or morphname of the morpheme that the constraint applies to, then a \lquote }{\cs109\f2\fs22\insrsid1444013 +/}{\insrsid1444013 \rquote 
 to indicate that you are going to g
ive the environment that the morpheme must occur in, and finally the environment itself.  For example, since the future tense in Caquinte is really a case of a discontinuous morpheme where neither the prefix or the suffix can occur without the other, we n
eed two MCCs: one tied to the future prefix which says that the future prefix cannot occur unless the future suffix is present, and one tied to the future suffix requiring that the future prefix must also be present.  }{\b\insrsid1444013 Both}{
\insrsid1444013  MCCs must be met for a particular parse to be valid.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc  FUT\tab +/ _ ... F
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\mcc  F\tab +/ FUT ... _
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Note that the name or label of the morpheme is used here, not the actual phonetic string.  This is because these constraints apply to the morpheme itself, regardless of its surface form.  (Constr
aints on particular allomorphs will be covered in the next section.)  The underscore character (}{\cs109\f2\fs22\insrsid1444013 _}{\insrsid1444013 
) indicates the position of the morpheme to which the MCC applies relative to the other morphemes in the environment.  The ellipsis notation (}{\cs109\f2\fs22\insrsid1444013 ...}{\insrsid1444013 ) in the MCCs 
above indicates that zero or more morphemes may intervene between the morphemes being constrained.
\par {\*\bkmkstart _Toc393786507}{\*\bkmkstart _Toc393852526}{\*\bkmkstart _Toc393873664}{\*\bkmkstart _Toc393875649}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.3.1\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 MCCs and Morpheme Classes{\*\bkmkstart mccsAndMorphemeClasses}
{\*\bkmkend _Toc393786507}{\*\bkmkend _Toc393852526}{\*\bkmkend _Toc393873664}{\*\bkmkend _Toc393875649}{\*\bkmkend mccsAndMorphemeClasses}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now let\rquote 
s look at another example.  In Nahuatl, a plural subject prefix must co-occur with a plural suffix, which is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_h}{\insrsid1444013  in present 
tense, but the plural suffix cannot co-occur with a singular subject.  This is illustrated in (}{\field{\*\fldinst {\insrsid1444013  seq nx x35 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 37}}}{\insrsid1444013 )
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3240\tx5040\tx6840\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x35}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 37}}}{\v\insrsid1444013 x35}{\insrsid1444013 {\*\bkmkend x35})\tab a.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ni-wetzka}{\insrsid1444013 \tab 
\lquote I smile\rquote \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ti-wetzka-h}{\insrsid1444013 \tab \lquote we smile\rquote \line b.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ti-wetzka}{
\insrsid1444013 \tab \lquote you (sg.) smile\rquote \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 an-wetzka-h}{\insrsid1444013 \tab \lquote you (pl.) smile\rquote \line c.\tab }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 0-wetzka}{\insrsid1444013 \tab \lquote he/she smiles\rquote \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 0-wetzka-h}{\insrsid1444013 \tab \lquote they smile\rquote 

\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Plural marking in Nahuatl is quite similar to the future discontinuous morpheme in Caquinte, though here we are dealing with classes of morphemes.  We will need two MCCs to express the constraint from each side because 
it says that a plural suffix may be present if and only if a plural subject marker is present.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
It turns out that this data can be accounted for in two ways.  The first method is a straightforward extension of the Caquinte example.  We assume that there is 
a null third person singular morpheme and a separate null third person plural morpheme.  Then all we need is two morpheme classes and two MCCs.  In the Analysis Data File, we can define the morpheme classes using the field code }{
\cs109\f2\fs22\insrsid1444013 \\mcl}{\insrsid1444013  followed by the name of the morpheme class and then list the members, similarly to what we did for category classes.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Lists/Morpheme classes.\line 
AmpleLinks users use Morph classes.\line CARLAStudio users use Analysis tab, Morphotactics/Morpheme Classes.}}}{\insrsid1444013   For example, the morpheme classes needed here could be defined something like:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcl  PluralSubject 1pl 2pl 3pl
\par \\mcl  PluralSuffix PresPl PastPl FutPl}{\scaps\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Then, the 
two MCCs are written as shown, where the morpheme classes are enclosed in square brackets to distinguish them from regular morphnames:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc  [PluralSubject]\tab +/ _ ... [PluralSuffix]
\par \\mcc  [PluralSuffix]\tab +/ [PluralSubject] ... _}{\insrsid1444013 
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The second method, which turns out to be much more efficient (and therefore runs faster)}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  A
ny posited null allomorph greatly increases processing time, since a null can be found everywhere.  It is important to consider alternative analyses before using null allomorphs and to tightly constrain any that are used.}}}{\insrsid1444013 
, assumes that there is only one null third person subject marker which is unspecified for number.  Now, in addition to the morpheme class for plural suffixes above (repeated here), we need morphe
me classes for singular and plural subjects which only include the first and second person markers:}{\scaps\insrsid1444013 
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcl  PluralSuffix PresPl PastPl FutPl}{\scaps\insrsid1444013 

\par }{\cs109\f2\fs22\insrsid1444013 \\mcl  PluralSubject 1pl 2pl
\par \\mcl  SingularSubject 1sg 2sg
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The first MCC above stating that a plural subject must co-o
ccur with a plural suffix is still valid under this method, so we will continue to use:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc  [PluralSubject]\tab +/ _ ... [PluralSuffix]
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 However, the second MCC would now incorrectly rule out the form }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 0-wetzka-h}{\insrsid1444013  \lquote they smile\rquote .  Therefore, we must rephrase the 
MCC to say that a plural suffix may not co-occur with a singular subject marker.  This is a little trickier, due to the negation.  We might try to write the constraint incorrectly as:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 *\\mcc [PluralSuffix] +/ ~[SingularSubject] ..._
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 to try to say that there
 cannot be a singular subject before the plural suffix.  Unfortunately, this constraint simply says that something other than a singular subject must precede the plural suffix, but it\rquote 
s okay if the singular subject is there as long as something else is also. Since the root will always precede the plural suffix, the incorrect constraint above will not rule out anything at all.  Instead, the MCC needs to be written with the negation (}{
\cs109\f2\fs22\insrsid1444013 ~}{\insrsid1444013 ) before the environment bar (}{\cs109\f2\fs22\insrsid1444013 _}{\insrsid1444013 ) as:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc [PluralSuffix] +/ [SingularSubject] ... ~_}{
\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
This constraint now correctly states that if there is a singular subject anywhere preceding it in the word, a plural suffix cannot occur there.  Again, }{\b\insrsid1444013 both}{\insrsid1444013  of these MCCs }{\b\insrsid1444013 and}{\insrsid1444013 
 any others that apply to any morphemes in a particular word must pass for that parse to be valid.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Let\rquote 
s consider the value of using morpheme classes.  Because MCCs are logically ANDed together, morpheme classes simply allow you to collapse many constraints into one.  For example, in the second method of analyzing the Nahuatl 
data, in which only one null third person morpheme is posited, let\rquote s look at how the positive MCC would have to be restated if morpheme classes were not used.  This MCC:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc  [PluralSubject]\tab +/ _ ... [PluralSuffix]
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 says that }{\b\insrsid1444013 each}{\insrsid1444013  member of the morpheme class }{
\cs109\f2\fs22\insrsid1444013 PluralSubject}{\insrsid1444013  must occur somewhere before any }{\b\insrsid1444013 one}{\insrsid1444013  of the members of the morpheme class }{\cs109\f2\fs22\insrsid1444013 PluralSuffix}{\insrsid1444013 
.  Therefore, since there are two members of }{\cs109\f2\fs22\insrsid1444013 PluralSubject}{\insrsid1444013  and three members of }{\cs109\f2\fs22\insrsid1444013 PluralSuffix}{\insrsid1444013 , two MCCs with three parts each are needed:}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 Likewise, the first analysis which includes 3PL in the morpheme class would require three MCCs with three parts each if morpheme classes were not used.}}}{\insrsid1444013 
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\mcc  1pl\tab +/ _ ... PresPl

\par \tab \tab +/ _ ... PastPl
\par \tab \tab +/ _ ... FutPl
\par \\mcc  2pl\tab +/ _ ... PresPl
\par \tab \tab }{\cs109\f2\fs22\insrsid1444013 +/ _ ... PastPl
\par \tab \tab +/ _ ... FutPl
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note carefully that it would be incorrect to simply write six separate MCCs as:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 *\\mcc  1pl\tab +/ _ ... PresPl

\par *\\mcc  1pl\tab +/ _ ... PastPl
\par *\\mcc  1pl\tab +/ _ ... FutPl
\par *\\mcc  2pl\tab +/ _ ... PresPl
\par }{\cs109\f2\fs22\insrsid1444013 *\\mcc  2pl\tab +/ _ ... PastPl
\par *\\mcc  2pl\tab +/ _ ... FutPl
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Each of these MCCs are too strong, since they are incorrectly requiring the plural subject marker to occur before a specific plural suffix.  E.g. the first MCC would rule out a valid parse where }{\cs109\f2\fs22\insrsid1444013 1pl}{\insrsid1444013 
 co-occurs with }{\cs109\f2\fs22\insrsid1444013 FutPl}{\insrsid1444013 , etc.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Using morpheme classes for MCCs allows you to capture generalizations and means you have to key in less, but it does not make any difference in how AMPLE processes the information.  This is true for negative MCCs also.  The negative MCC for Nahuatl
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc [PluralSuffix] +/ [SingularSubject] ... ~_}{
\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
could be replaced by the following six MCCs instead, without any change in how AMPLE treats the information.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\mcc  PresPl\tab +/ 1sg ... ~_

\par \\mcc  PastPl\tab +/ 1sg ... ~_
\par \\mcc  FutPl\tab +/ 1sg ... ~_
\par \\mcc  PresPl\tab +/ 2sg ... ~_
\par \\mcc  PastPl\tab +/ 2sg ... ~_
\par \\mcc  FutPl\tab +/ 2sg ... }{\cs109\f2\fs22\insrsid1444013 ~_
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Since the MCCs are logically ANDed together, these six individual negative MCCs are exactly equivalent to the single negative MCC above which uses morpheme classes.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 Note that positive and negative constraints are crucially different in how they interact with logical AND and OR.  In the case of the positive constraints, we needed to say that (}{\cs109\f2\insrsid6688044 1pl}{\insrsid6688044  must cooccur with }{
\cs109\f2\insrsid6688044 PastPl}{\insrsid6688044  OR }{\cs109\f2\insrsid6688044 PresPl}{\insrsid6688044  OR }{\cs109\f2\insrsid6688044 FutPl}{\insrsid6688044 ) AND (}{\cs109\f2\insrsid6688044 2pl}{\insrsid6688044  must cooccur with }{
\cs109\f2\insrsid6688044 PastPl}{\insrsid6688044  OR }{\cs109\f2\insrsid6688044 PresPl}{\insrsid6688044  OR }{\cs109\f2\insrsid6688044 FutPl}{\insrsid6688044 ).  For the negative case, each one must be ANDed together individually.}}}{\insrsid1444013 
  This will not be true for combinations of other types of negative constraints, as we will see in section }{\field{\*\fldinst {\insrsid1444013  REF _Ref397394895 \\n }}{\fldrslt {\insrsid14046460 3.5.2.2}}}{\insrsid1444013 .
\par {\*\bkmkstart _Toc393786508}{\*\bkmkstart _Toc393852527}{\*\bkmkstart _Toc393873665}{\*\bkmkstart _Toc393875650}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.4.3.2\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 MCC Writing Drills{\*\bkmkstart mccWritingDrills}
{\*\bkmkend _Toc393786508}{\*\bkmkend _Toc393852527}{\*\bkmkend _Toc393873665}{\*\bkmkend _Toc393875650}{\*\bkmkend mccWritingDrills}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\sa120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Here are a set of MCC writing drills.  They are designed to be similar t
o what you might face in writing an MCC for a natural language: you are presented with a set of well-formed and ill-formed sequences of morphemes (i.e. words).  In this drill, though, all morphemes are represented by abstract capital letters.  Each line r
epresents a word\rquote s analysis (a sequence of morphemes).  If the line begins with an asterisk (}{\cs109\f2\fs22\insrsid1444013 *}{\insrsid1444013 
), then the sequence of morphemes is invalid and should not be allowed by the MCC.  For each set, look for a generalization about which morphemes can and cannot co-occur with the morpheme }{\f2\fs22\insrsid1444013 A}{\insrsid1444013 
 (treat each set totally independently of the others).  State the generalization in words and write the appropriate MCC.  The answer for 1. would be something like \'93}{\cs109\f2\fs22\insrsid1444013 A}{\insrsid1444013  must be immediately followed by }{
\cs109\f2\fs22\insrsid1444013 B}{\insrsid1444013 .  }{\cs109\f2\fs22\insrsid1444013 \\mcc A +/ _ B}{\insrsid1444013 .\'94  The rest of the answers are given in Appendix A.
\par }\pard\plain \ql \fi-432\li1440\ri0\sa240\keep\nowidctlpar\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs22\insrsid1444013 \sect }\sectd \sbknone\linex0\cols2\endnhere\sectdefaultcl\sftnbj 
\pard\plain \ql \fi-432\li1440\ri0\sa240\keep\nowidctlpar\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs22\insrsid1444013 1.  A B C D\line *A C D\line *A D\line  F A B\line  F A B D
\par 2.  A C D\line  A C B D\line *A B D\line *A B\line *F A B\line  F A D B
\par }{\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 3.  F A B E\line *A B E\line  F A\line  F A E\line *A B
\par }{\f2\fs22\insrsid1444013 4.  F A B C D\line  F A D\line  F A B D\line *F A B\line  A C D
\par 5.  F A B C\line *F A B C D\line  F A C\line *F A D\line  A B\line *A B D
\par 6.  F G A B C\line  F G A C\line  F G A\line *G F A\line *F A B C\line *G A B
\par 7.  F G H A B C\line  F G H I J A C\line  F G A\line *G F A\line *F A B C\line *G A B
\par }{\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 8.  F A B C D E\line *F A B C D\line *F G A B C E\line *A B C E\line  F A D E\line  F A B E\line  F A C E\line *F A\line  F A E\line 
\par 9.  E B C D A\line  E C A\line *E D A\line *C D A\line  E C D A
\par 10. B C A\line  D C A\line *C A\line  B A\line  D A
\par }\pard \ql \fi-432\li1440\ri0\sa240\keep\widctlpar\nooverflow\faroman\rin0\lin1440\itap0 {\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 11. B C D A\line  B D A\line *C D A\line *B C A
\par {\*\bkmkstart _Toc393786509}{\*\bkmkstart _Toc393852528}{\*\bkmkstart _Toc393873666}{\*\bkmkstart _Toc393875651}{\*\bkmkend _Toc393786509}{\*\bkmkend _Toc393852528}{\*\bkmkend _Toc393873666}{\*\bkmkend _Toc393875651}{\listtext\pard\plain\s2 
\b\fs28\lang3082\langfe1033\langnp3082\insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.1\tab}}\pard\plain \s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 
\b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\lang3082\langfe1033\langnp3082\insrsid1444013 \sect }\sectd \sbknone\linex0\endnhere\titlepg\sectdefaultcl\sftnbj {\*\bkmkstart _Toc393786510}{\*\bkmkstart _Toc393852529}
{\*\bkmkstart _Toc393873667}{\*\bkmkstart _Toc393875652}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5\tab}\pard\plain \s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 
\b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 MORPHOPHONEMICS{\*\bkmkstart morphophonemics}{\*\bkmkend _Toc393786510}{\*\bkmkend _Toc393852529}{\*\bkmkend _Toc393873667}{\*\bkmkend _Toc393875652}{\*\bkmkend morphophonemics}

\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Besides constraining the overall positions where morphemes can occur, we need to be able to account for the surface forms that the morphemes appear in and the particular environments 
where an allomorph is legitimate.  The two types of constraints that AMPLE uses for this purpose are String Environment Constraints (SECs) and Morpheme Environment Constraints (MECs).
\par {\*\bkmkstart _Ref393072552}{\*\bkmkstart _Toc393786511}{\*\bkmkstart _Toc393852530}{\*\bkmkstart _Toc393873668}{\*\bkmkstart _Toc393875653}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.1\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 STRING ENVIRONMENT CONSTRAINTS{\*\bkmkstart secs}{\*\bkmkend _Ref393072552}
{\*\bkmkend _Toc393786511}{\*\bkmkend _Toc393852530}{\*\bkmkend _Toc393873668}{\*\bkmkend _Toc393875653}{\*\bkmkend secs}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 If we look a little further at the Nahuat
l data concerning the plural subject markers, we come across a common problem.  Compare the data in (}{\field{\*\fldinst {\insrsid1444013  seq nx x36 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 38}}}{\insrsid1444013 
) with that seen earlier in (}{\field{\*\fldinst {\insrsid1444013  seq nx x35 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 37}}}{\insrsid1444013 ):
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3240\tx5040\tx6840\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x36}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 38}}}{\v\insrsid1444013 x36}{\insrsid1444013 {\*\bkmkend x36})\tab a.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n-ahsi}{\insrsid1444013 \tab 
\lquote I arrive\rquote \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 t-ahsi-h}{\insrsid1444013 \tab \lquote we arrive\rquote \line b.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 t-ahsi}{\insrsid1444013 
\tab \lquote you (sg.) arrive\rquote \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 an-ahsi-h}{\insrsid1444013 \tab \lquote you (pl.) arrive\rquote \line c.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 0-ahsi
}{\insrsid1444013 \tab \lquote he/she arrives\rquote \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 0-ahsi-h}{\insrsid1444013 \tab \lquote they arrive\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The first person singular subject marker appears to be }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ni\_}{\insrsid1444013  before consonants and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n\_}{\insrsid1444013 
 before vowels.  Similarly, the second person singular and first person plural subject markers alternate between }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ti\_ and t\_}{\insrsid1444013 .  
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
How can we encode this information?  There are at least two ways to deal with such phonological information: (a) give the underlying form with rules to create the surface forms; or (b) list the allomorphs and condition ea
ch one to appear in the appropriate environment.  Generative phonology uses the first approach (also known as the item and process approach, Hockett 1954), but this presents a challenge when you are trying to parse the surface form.  For example, in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x36 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 38}}}{\insrsid1444013 a) the first singular subject prefix is simply an }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n}{
\insrsid1444013 .  That is all we see when doing the parse.  How do we know what underlying forms to try?  If there is a general rule of  V}{\insrsid1444013 {\field{\*\fldinst SYMBOL 174 \\f "Symbol" \\s 12}{\fldrslt\f3\fs24}}}{\insrsid1444013 
 0/ _ V, then as the computer parses a word it will have to try every possible vowel before each vowel that is in the surface form of the word, just in case there had been a deletion.  The generative model assumes that you somehow \'93know\'94
 what the possible morphemes are and what the underlying form is to apply the rules to. 
 Instead, suppose we just list the allomorphs and somehow condition their occurrence (known as the item and arrangement approach, Hockett 1954).  Then no guesswork is involved, only matching.  But it is possible that we may miss some generalizations.  AMP
LE chooses this latter approach, while PC-KIMMO uses the former.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  See Maxwell 1996 for an interesting and enlightening discussion of item and arrangement and item and process.}}}{\insrsid1444013 
\par The phonological constraints in AMPLE are called String Environment Constraints (SECs).  These constraints are listed directly after the allomorph they pertain to; there is no separate field marker }{\cs109\f2\fs22\insrsid1444013 \\sec}{\insrsid1444013 
.  Also, to distinguish between the constraints which involve morphemes (or, more specifically, morphnames) and these which constrain the actual phonetic string, a simple slash \lquote /\rquote  is used to begin the environment, omitting the plus sign 
\lquote +\rquote  use
d before the slash in MCCs and MECs.  The environment can be defined in terms of a single character, a string of characters, a member of a string class, or a series of string classes which must occur before or after the allomorph being constrained.
\par In the Nahuatl case in (}{\field{\*\fldinst {\insrsid1444013  seq nx x36 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 38}}}{\insrsid1444013 ), the string classes of consonants and vowels would need to be defined in the Analysis Data File:}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 CarlaMenu users use Lists/String classes.\line AmpleLinks users use String classes.\line CARLAStudio users use Analysis tab, Morphophonemics/String Classes.}}}{\insrsid1444013 
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\scl V a e i o u \tab | vowels

\par }{\cs109\f2\fs22\insrsid1444013 \\scl C b c d  ...\tab | consonants
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 and then the allomorphs for each morpheme would be listed in the
 appropriate dictionary, with the SECs for each one.  The allomorphs for the first singular subject prefix are:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\p ni
\par }\pard\plain \ql \li720\ri0\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a n  \tab / _ [V]\line \\a ni \tab / _ [C]
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 We now discuss two other uses of SECs: reduplication and epenthesis.
\par {\*\bkmkstart _Toc393786512}{\*\bkmkstart _Toc393852531}{\*\bkmkstart _Toc393873669}{\*\bkmkstart _Toc393875654}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.1.1\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Reduplication{\*\bkmkstart reduplication}{\*\bkmkend _Toc393786512}
{\*\bkmkend _Toc393852531}{\*\bkmkend _Toc393873669}{\*\bkmkend _Toc393875654}{\*\bkmkend reduplication}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Recall from section }{\field{\*\fldinst {\insrsid1444013  REF _Ref393853651 \\n }}{\fldrslt {
\insrsid14046460 1.1.7}}}{\insrsid1444013 
 that a language like Tagalog has reduplication.  How can we model reduplication in AMPLE?  The most straightforward (but certainly not the most elegant) way is to create the complete set of allomorphs and to condition them appropr
iately via SECs.  For example, the Tagalog prefix dictionary might include the following record extract:
\par }\pard\plain \ql \li720\ri0\sb120\nowidctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\p REDUP\line \\a ba  / _ ba\line \\a bi  / _ bi
\line \\a bu  / _ bu\line \\a pa  / _ pa\line \\a pi  / _ pi\line \\a pu  / _ pu\line ...\line \\a ta  / _ ta\line \\a ti  / _ ti\line \\a tu  / _ tu\line \\g IMPERF\tab | Imperfective aspect
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
That is, there is one allomorph for every possible reduplicant and each such allomorph is conditioned to precede its identical environment.  Of course, not all reduplication is pure CV copying as in Tagalog.  You will need to create the
 allomorphs appropriate for the kind of reduplication in the language you are modeling.  We wish AMPLE had a more elegant way to deal with reduplication, but it currently does not.
\par {\*\bkmkstart _Toc393786513}{\*\bkmkstart _Toc393852532}{\*\bkmkstart _Toc393873670}{\*\bkmkstart _Toc393875655}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.1.2\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Epenthesis{\*\bkmkstart epenthesis}{\*\bkmkend _Toc393786513}
{\*\bkmkend _Toc393852532}{\*\bkmkend _Toc393873670}{\*\bkmkend _Toc393875655}{\*\bkmkend epenthesis}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Another specialized use of SECs is epenthesis.  Many languages h
ave certain syllable well-formedness constraints that require the insertion of either a vowel or a consonant to preserve syllable structure (see It\'f4
 1989 for an interesting discussion).  How should one best model such epenthetic segments within AMPLE?  There are at least two ways.
\par The first method is to treat the epenthetic segment as a kind of pseudo morpheme.  We saw this for Caquinte earlier (see example (}{\field{\*\fldinst {\insrsid1444013  seq nx x3 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 3}}}{
\insrsid1444013 ))}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{
\insrsid6688044  For more complete discussion of the complexities of Campa epenthesis and the tests involved, see Weber, Black and McConnel 1988: 180-186.}}}{\insrsid1444013 
.  The second is to create extra allomorphs containing the epenthetic segment(s) for every morpheme that might possibly be involved with epenthesis and using SECs to condition them appropriately.
\par The advisability of the use of the first method is debatable.  If the epenthetic segment is rather common, then one might want to model it as 
a pseudo-morpheme.  Such an approach allows you to use the output of AMPLE to explore where it occurs and perhaps glean some insights about its true nature.  The second approach captures the fact that epenthesis has no meaning whatsoever (as one would exp
e
ct with a true morpheme) but it misses the generalization that the presence of the segment is due to syllabification considerations (by adding otherwise unnecessary allomorphs to many dictionary entries).  This is another area where AMPLE could be greatly
 improved if it recognized syllables as well as segments.
\par {\*\bkmkstart _Toc393786514}{\*\bkmkstart _Toc393852533}{\*\bkmkstart _Toc393873671}{\*\bkmkstart _Toc393875656}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.1.3\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 SEC Writing Drill{\*\bkmkstart secWritingDrills}
{\*\bkmkend _Toc393786514}{\*\bkmkend _Toc393852533}{\*\bkmkend _Toc393873671}{\*\bkmkend _Toc393875656}{\*\bkmkend secWritingDrills}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 We now finish this section on SECs by offering some SEC writing drills.
\par Note that multiple SECs on a single allomorph act as alternative environments in which the allomorph may be found (either one }{\b\insrsid1444013 or}{\insrsid1444013 
 the other). Further, since SECs do not depend upon the identification of any morphemes, but only on phonetic strings which are available in the input, SECs apply immediately as successor tests.  Therefore, they eliminate incorrect parses right away.

\par For further illustration of the syntax of the SECs, a number of situations are listed below.  See if you can write the conditioned allomorph yourself before you look at the answer, which is in Appendix B.  (The first one is done for you.)  Fu
rther note that the syntax needed here for these SECs is relevant to MCCs and MECs also.
\par }\pard\plain \s83\ql \fi-540\li1260\ri720\sb60\widctlpar\nooverflow\faroman\rin720\lin1260\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 a.\tab The allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
sh }{\insrsid1444013 in: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 asi, esi, ishi, osi, usi, isha}{\insrsid1444013 \line \tab \\a  }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh / i _}{\insrsid1444013 
\par b.\tab The allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh }{\insrsid1444013 in: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 isa, ise, ishi, iso, isu, ashi\line 
\par }{\insrsid1444013 c.\tab The allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh }{\insrsid1444013 in: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 asi, esi, ishi, osi, usi, isa\line 
\par }{\insrsid1444013 d.\tab In (a)-(c) above, when does one select the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 s}{\insrsid1444013  allomorph?
\par e.\tab Suppose we have a language where a glottal stop only occurs word initially: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 tata}{\insrsid1444013 , }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ?ata}{\insrsid1444013 , 
}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sata}{\insrsid1444013 , etc. (write the entry for the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ?ata}{\insrsid1444013  allomorph; use # to indicate a word boundary):\line 

\par f.\tab Now make the glottal stop be word final.\line 
\par g.\tab State that an allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 aba}{\insrsid1444013  doesn\rquote t take any affixes; it is a complete word itself.\line 
\par h.\tab What if instead it cannot stand alone?\line 
\par i.\tab Suppose you have voiceless stops only before another voiceless stop or at end of word, otherwise it is voiced (use allomorphs of }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 at}{\insrsid1444013  and }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ad}{\insrsid1444013  and the notion of string classes).\line 
\par j.\tab Suppose a word-final suffix ends in a vowel except when the following word begins with a vowel, then it is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 w}{\insrsid1444013  (use }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 xa}{\insrsid1444013  and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 xaw}{\insrsid1444013  for the allomorphs).\line 
\par k.\tab Finally, to account for both back vowel harmony and final stop devoicing (as in Turkish), more complex constraints are needed.  For example, the infinitive suffix has the following forms:}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The data is from Jorge Hankamer, p.c.}}}{\insrsid1444013 
\line \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -mag}{\insrsid1444013  following a back vowel in the preceding syllable and before a vowel\line \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -mak}{
\insrsid1444013  following a back vowel in the preceding syllable but before a\line \tab \tab \tab consonant or word finally\line \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -meg}{\insrsid1444013 
 following a non-back vowel in the preceding syllable and before a\line \tab \tab \tab vowel\line \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -mek}{\insrsid1444013 
 following a non-back vowel in the preceding syllable and before a\line \tab \tab \tab consonant or word finally. \line 
Since, as in SPE (Chomsky and Halle 1968), AMPLE (and PC-KIMMO) has no notion of the syllable, there is no way to collapse the conditions for the syllable-final devoicing.  The vowel harmony part of the conditions must allow for the 
possibility of up to two consonants intervening.\line 
\par {\*\bkmkstart _Ref392991014}{\*\bkmkstart _Toc393786515}{\*\bkmkstart _Toc393852534}{\*\bkmkstart _Toc393873672}{\*\bkmkstart _Toc393875657}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 MORPHEME ENVIRONMENT CONSTRAINTS{\*\bkmkstart mecs}{\*\bkmkend _Ref392991014
}{\*\bkmkend _Toc393786515}{\*\bkmkend _Toc393852534}{\*\bkmkend _Toc393873672}{\*\bkmkend _Toc393875657}{\*\bkmkend mecs}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
In a few cases, the particular allomorph chosen will depend upon the presence of another morpheme.  This morpheme may itself have several allomorphs or there may be ambiguit
y due to more than one morpheme containing the same surface string as the morpheme in question, eliminating the possibility of using an SEC (which should be based upon phonological considerations anyway).   The example from Caquinte in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x37 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 39}}}{\insrsid1444013 ) 
illustrates a situation where an MEC is needed.  Note the allomorphy of the non-future (NF) tense suffix, which is underlined in the examples.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 The abbreviations used in the Caquinte glosses are: 1O = first person object; 3FO = third person feminine object; 3M = third person masculine subject; NF = non-future tense; PERF = perfective aspect.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1389\tx1833\tx2277\tx2721\tx3168\tx3600\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x37}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 39}}}{\v\insrsid1444013 x37}{\insrsid1444013 {\*\bkmkend x37})\tab a.}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab i-\tab to\tab 
-t\tab -}{\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 i}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab -ro\line }{\caps\insrsid1444013 \tab 3m-\tab }{\insrsid1444013 cut}{\caps\insrsid1444013 \tab -\tab -nf\tab 
-3fo}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \lquote he cut/ cuts her\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1224\tx1368\tx1812\tx2259\tx2703\tx3147\tx3591\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \tab b.\tab }
{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i-\tab to\tab -t\tab -}{\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 a}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab -na\line }{
\caps\insrsid1444013 \tab \tab 3m-\tab }{\insrsid1444013 cut}{\caps\insrsid1444013 \tab -\tab -nf\tab -1o}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \lquote he cut/ cuts me\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1224\tx1368\tx1812\tx2259\tx2703\tx3282\tx3510\tx4050\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \tab 
c.\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i-\tab to\tab -t\tab -ak\tab \tab -}{\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 e}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab -na\line 
}{\insrsid1444013 \tab \tab }{\caps\insrsid1444013 3m-\tab }{\insrsid1444013 cut}{\caps\insrsid1444013 \tab -\tab -perf\tab -nf\tab -1o
\par }\pard \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 {\insrsid1444013 \tab \tab \tab \lquote he has cut me\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The identification of an }{\cs64\i\insrsid1444013 allomorph}{\insrsid1444013 
 depends on the identification of some other }{\cs64\i\insrsid1444013 morpheme}{\insrsid1444013 .  AMPLE allows the use of an MEC to tag the allomorph as requiring the
 crucial morpheme.  (Note that since the morpheme must be identified, MECs cannot apply until the entire word has been parsed, so they are final tests.)  In Caquinte, the non-future suffix usually surfaces as }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_i}{\insrsid1444013 , but it will have the shape }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_a}{\insrsid1444013  if it is foll
owed by the first person object and not preceded by the perfective aspect.  Whenever it follows the perfective aspect, it takes the shape }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_e}{\insrsid1444013 
.  This allomorphy can be encoded in the suffix dictionary as:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\s  i
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\a  e \tab +/\tab  PERF _
\par }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a  a \tab +/\tab ~PERF _ 1O
\par \\a  i \tab +/\tab  PERF ~_ 1O
\par }{\cs109\f2\fs22\insrsid1444013 \\g  NF\tab \tab \tab \tab \tab \tab \tab \tab | non-future
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 In particular, note the use of }{\cs109\f2\fs22\insrsid1444013 +/}{\insrsid1444013  instead of just }
{\cs109\f2\fs22\insrsid1444013 /}{\insrsid1444013  to distinguish the MEC from an SEC.
\par {\*\bkmkstart _Toc393873673}{\*\bkmkstart _Toc393875658}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.2.1\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Combinations of MECs and SECs{\*\bkmkend _Toc393873673}
{\*\bkmkend _Toc393875658}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Sometimes we find the more complex case where the conditions on the allomorphs of a particular morpheme are based both on phonological context and on morphological context.  For example, the third person masculine prefix in Caquinte is }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i\_}{\insrsid1444013  before a consonant and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 y\_}{\insrsid1444013  before a vowel as shown in (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x96 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 40}}}{\insrsid1444013 ).}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  The abbreviations used in
 the Caquinte glosses are: 3M = third person masculine subject; FUT = future tense prefix; PERF = perfective aspect; NFR = non-future reflexive tense; F = future tense; R = reflexive; 3FO = third person feminine object.  The }{
\cs69\i\f38\lang1024\langfe1024\noproof\insrsid6688044 -t}{\insrsid6688044  suffix is epenthetic.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1389\tx1953\tx2772\tx3184\tx3979\tx4675\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart hab}
{\*\bkmkend hab}\tab {\*\bkmkstart x96}(}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 40}}}{\v\insrsid1444013 x96}{\insrsid1444013 {\*\bkmkend x96})\tab a.\tab }{
\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 i}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -\tab sheka\tab -t\tab -ak\tab -a\tab -ro}{\insrsid1444013 \line \tab 3M-\tab eat\tab -\tab -PERF\tab -NFR\tab -3FO
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \lquote he ate her/it\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1224\tx1368\tx1932\tx2610\tx2776\tx3150\tx3604\tx4050\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \tab 
b.\tab }{\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 i}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -\tab N-\tab to\tab -t\tab -e\tab -ro\line }{\caps\insrsid1444013 \tab \tab 3m-\tab FUT-\tab }{\insrsid1444013 cut
}{\caps\insrsid1444013 \tab -\tab -F\tab -3FO}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \lquote he will cut her/it\rquote 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1224\tx1368\tx1932\tx2736\tx3529\tx4192\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \tab c.\tab }{
\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 y}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -\tab ak\tab -ak\tab -e\line }{\caps\insrsid1444013 \tab \tab 3m-\tab }{\insrsid1444013 answer}{\caps\insrsid1444013 \tab 
-perf\tab -3FO}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab \lquote he answered her\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 (Such a vowel/glide alternation is a very common situation, since it depe
nds upon syllabification: is the segment in question the onset (initial consonant) of the syllable or is it the nucleus (core vowel)?)  This is a phonological constraint which can be captured by SECs on the two allomorphs.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The third person masculine prefix
, though, also has two additional shapes that only occur when it is immediately followed by the null allomorph of the future prefix as shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x97 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 41}
}}{\insrsid1444013 ).}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 
\chftn }{\insrsid6688044  The future prefix is }{\cs69\i\f38\lang1024\langfe1024\noproof\insrsid6688044 N-}{\insrsid6688044  before non-continuant obstruents and null otherwise.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1644\tx2313\tx3132\tx3544\tx3960\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x97}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 41}}}{\v\insrsid1444013 x97}{\insrsid1444013 {\*\bkmkend x97})\tab }{\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 ir}{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -\tab 0-\tab arehe\tab -t\tab -e\tab -Npa}{\insrsid1444013 \line 3M-\tab FUT-\tab arrive\tab -\tab -F\tab -R
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote he will arrive
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1644\tx2313\tx3150\tx3600\tx4140\tx4770\tx5313\tx5997\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab b.
\tab }{\cs106\b\i\f38\fs22\ul\lang1024\langfe1024\noproof\insrsid1444013 iri}{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -\tab 0-\tab sheka\tab -t\tab -e\tab -Npa\tab -ro\line }{\caps\insrsid1444013 3m-\tab FUT-\tab }{\insrsid1444013 
eat}{\caps\insrsid1444013 \tab -\tab -f\tab -R\tab -3FO}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote he will eat her/it\rquote 
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
MECs are needed to express this condition.  Therefore, there are four allomorphs for this prefix, three of which have both an SEC and an MEC constraining their appearance.  (The \lquote elsewhere\rquote  allomorph }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i\_}{\insrsid1444013  only needs an SEC here because the future prefix which could occur following it is itself constrained to be a different allomorph (}{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 N-)}{\insrsid1444013  than the null one which must occur following either }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ir}{\insrsid1444013  or }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 iri}{\insrsid1444013 .)  Note that the SEC and MEC could be listed in either order after the allomorph and that both the SEC and the MEC must be met for the allomorph to be allowed.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\p  i
\par \\a  ir\tab +/  _ FUT \tab \tab /  _ [V]
\par \\a  iri\tab +/  _ FUT \tab \tab /  _ [-syl,+cont]
\par \\a  y\tab +/ ~_ FUT \tab \tab /  _ [V]
\par \\a  i\tab \tab \tab \tab \tab \tab / ~_ [V]
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\g  3M\tab \tab \tab \tab \tab \tab | 3rd person masculine
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Sometimes things get even more complicated and more than one MEC environment holds for a particular allomorph, possibly also coupled with one or more SECs.  For example, one of the allomorphs of the verb meaning \lquote to go\rquote  in Yal\'e1lag Zapot
ec (L\'f3
pez and Newberg 1990) depends upon the presence of the Habitual or the Repetitive aspect markers, and also requires the first person singular subject marker.  Further, only a particular allomorph of the first singular subject marker is correct, the o
ne having the form }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 'a}{\insrsid1444013 .  This can be accounted for using two MECs and an SEC as shown:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\a  a     / _ 'a \tab  +/ H _ 1s \tab  +/ Rep _ 1s}{
\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
We need to know how such multiple constraints are interpreted by AMPLE.  What do we want to be true in this case?  This allomorph is correct if it follows the Habitual aspect marker and is followed by the first singular subject marker }{\b\insrsid1444013 
or}{\insrsid1444013  if it follows the Repetitive aspect marker and is followed by the first singular subject marker }{\b\insrsid1444013 and}{\insrsid1444013 , for both cases, the first singular subject marker has the form }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 'a}{\insrsid1444013 .  This is exactly the way AMPLE applies the constraints.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
In general, then, multiple constraints of the same kind that apply to an allomorph (i.e. multiple SECs or multiple MECs) are linked together by logical ORs, meaning that at leas
t one of the environments must be correct.  But when there are both SECs and MECs for a particular allomorph, these are linked together by a logical AND, yielding that at least one SEC and at least one MEC must be met as illustrated:
\par }\pard\plain \s54\ql \li720\ri0\sb60\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\insrsid1444013  SEC      SEC         MEC        MEC\line / _ a     / a _      +/ FUT _  +/ _ PERF\line 
--|--    --|--       --|--     --|--\line    \\_OR___/             \\___OR___/\line       \\_________ AND _______/
\par {\*\bkmkstart _Toc393873674}{\*\bkmkstart _Toc393875659}{\*\bkmkstart _Ref397394805}{\*\bkmkstart _Ref397394895}{\*\bkmkstart _Ref397394915}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.5.2.2\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Multiple Negative Constraints{\*\bkmkend _Toc393873674}
{\*\bkmkend _Toc393875659}{\*\bkmkend _Ref397394805}{\*\bkmkend _Ref397394895}{\*\bkmkend _Ref397394915}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 This scheme gives exactly what we expect for positive constraints.  
But we have a problem whenever multiple SECs or MECs with negated environments are used.  For example, in Spanish }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 c}{\insrsid1444013  never occurs before }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i}{\insrsid1444013  or }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 e}{\insrsid1444013 , because }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 qu}{
\insrsid1444013  is used instead.  If we are using AMPLE as a spelling checker, we want it to fail words which have used the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 c}{\insrsid1444013 
 incorrectly.  It might be tempting to write two SECs with negated environments for an allomorph ending in }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 c}{\insrsid1444013 , with the corresponding positive SECs for the allomorph ending in 
}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 qu}{\insrsid1444013 :
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\a  ...c\tab / ~_ i\tab / ~_ e
\par \\a  ...qu\tab /   _ i\tab /  _ e
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now suppose AMPLE is trying to analyze a word spelled }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ce}{\insrsid1444013 .  What will AMPLE do?  When it checks the first SEC it will say, \'93Here\rquote s a case where the allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 c}
{\insrsid1444013  is not before an }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i}{\insrsid1444013 , so it passes.\'94  Since only one of the SECs must hold in a logical OR situation, there is no reason
 to even check the other SEC.  Further, if the SECs were listed in the other order, the first SEC would fail but the second would still be OK, so the word would incorrectly be passed.  The solution here is to form a string class so that there only needs t
o be a single SEC with a negative environment:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\scl  HighVowels  i e}{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
\par }{\cs109\f2\fs22\insrsid1444013 \\a  c   / ~_ [HighVowels]}{\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
(The string class definition goes in the Analysis Control file and the allomorph field goes in the dictionary entry.)  For an example with MECs, suppose that a pa
rticular allomorph of a verb root could not be used with any of the first person subject markers.  The multiple MECs shown with negated environments will end up not ruling out anything!  When the environment of one constraint is met, that allomorph will s
till be allowed by another of the MEC environments.  (E.g. }{\cs109\f2\fs22\insrsid1444013 1PlExc}{\insrsid1444013  is not }{\cs109\f2\fs22\insrsid1444013 1Sg}{\insrsid1444013 , so it will pass.)
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a  ...\tab +/ ~_ 1Sg\tab 
+/ ~_ 1PlExc\tab +/ ~_ 1PlInc
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Again, the correct way to handle this is to form a morpheme class so that a single MEC with a negated environment may be used.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcl  FirstPersonSubject  1Sg  1PlExc  1PlInc
\par \\a  ...\tab +/ ~_ [FirstPersonSubject]
\par {\*\bkmkstart _Toc393786516}{\*\bkmkstart _Toc393852535}{\*\bkmkstart _Toc393873675}{\*\bkmkstart _Toc393875660}{\*\bkmkstart _Ref392990957}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.6\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 INFIXATION{\*\bkmkstart infixation}{\*\bkmkend _Toc393786516}
{\*\bkmkend _Toc393852535}{\*\bkmkend _Toc393873675}{\*\bkmkend _Toc393875660}{\*\bkmkend infixation}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Before addressing the intricacies of user-written tests, we just mention infixation.  In section }{\field{\*\fldinst {\insrsid1444013  REF _Ref393855132 \\n }}{\fldrslt {\insrsid14046460 1.1.6}}}{\insrsid1444013  we saw examples of infixat
ion from Tagalog and we should at least mention this in order to complete the coverage of the key issues in morphological parsing mentioned there.  Since we do not have anything to add to what has already been written about infixation in Weber, Black, and
 McConnel 1988, Buseman, Weber, Black, and McConnel 1992:14, and Buseman 1993b, we refer the reader to these documents.
\par {\*\bkmkstart _Toc393786517}{\*\bkmkstart _Toc393852536}{\*\bkmkstart _Toc393873676}{\*\bkmkstart _Toc393875661}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TESTS{\*\bkmkstart tests}{\*\bkmkend _Ref392990957}{\*\bkmkend _Toc393786517
}{\*\bkmkend _Toc393852536}{\*\bkmkend _Toc393873676}{\*\bkmkend _Toc393875661}{\*\bkmkend tests}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
So far we have talked about Morphotactics and Morphophonemics which use particular constraints (category, orderclass, MCC, MEC, SEC
).  Even with all these mechanisms, we do not have enough generality to handle all the phenomena found in natural languages.  Suppose we want anyone using our parser to be able to access the information in the dictionaries to create a constraint to test f
or valid analyses.  How could we go about doing this?
\par In sections }{\field{\*\fldinst {\insrsid1444013  REF _Ref392991112 \\n }}{\fldrslt {\insrsid14046460 3.4.1}}}{\insrsid1444013 -}{\field{\*\fldinst {\insrsid1444013  REF _Ref392991119 \\n }}{\fldrslt {\insrsid14046460 3.4.2}}}{\insrsid1444013 
 on orderclass and category mappings, you had a preview of what AMPLE tests look like now.  Historically, all constraints were har
d coded by a programmer for a specific language.  With the help of some computer programs (called Yacc (Johnson 1978) and Lex (Lesk and Schmidt 1978)) which translate logical statements in English into computer code, the users can now write their own test
s.
\par Remember that a constraint is simply something that is true or false about a particular analysis.  The result of applying any constraint or test to a posited analysis will need to be either true or false.  Therefore, the tests are made up of logical pred
icates (e.g. \lquote A }{\b\insrsid1444013 is}{\insrsid1444013  B\rquote , or \lquote A }{\b\insrsid1444013 is member}{\insrsid1444013  [class]\rquote , or \lquote A }{\b\insrsid1444013 matches}{\insrsid1444013  \'93string\'94\rquote 
, or the mathematical counterparts: =, ~=, >, <, >=, <=) strung together with logical operators and/or quantifiers.
\par What information is available to be tested about a particular morphe
me or allomorph?  We know the string shape of the allomorphs, the tocategory and fromcategory, the orderclass, the morphname, and its type (prefix, infix, root, or suffix).  One more bit of information, its properties, will be addressed in section }
{\field{\*\fldinst {\insrsid1444013  REF _Ref392991226 \\n }}{\fldrslt {\insrsid14046460 3.7.3}}}{\insrsid1444013 
.  All of the information above can be thought of as the features of the morpheme or allomorph.  Besides these features found in the dictionary, we also know the position in the word where the particular allomorph is located (e.g. \lquote left\rquote , 
\lquote current\rquote , \lquote right\rquote , \lquote INITIAL\rquote  or \lquote FINAL).  We can combine the location information with the features to determine whether the allomorph is valid in that position, to either pass or fail a particular parse.

\par Because we usually need to combine the locati
on information with the feature information, we need to connect at least two predicates together.  The logical operators NOT, AND, OR, XOR, IF...THEN, and IFF are used to do this.  The truth tables for these operators are on page 164 of Weber, Black, and 
M
cConnel 1988.  In addition, logical quantifiers can be used to say that all or at least one of the allomorphs in a given direction must have a particular feature.  In AMPLE, these logical quantifiers are: FOR_ALL_LEFT, FOR_ALL_RIGHT, FOR_SOME_LEFT, and FO
R_SOME_RIGHT.
\par In the next two sections, we will see how these logical predicates and operators work by explaining the parts of the orderclass and category tests seen earlier.  Then properties and their use in tests will be introduced.
\par {\*\bkmkstart _Ref393080421}{\*\bkmkstart _Toc393786518}{\*\bkmkstart _Toc393852537}{\*\bkmkstart _Toc393873677}{\*\bkmkstart _Toc393875662}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.1\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 ORDERCLASS TESTS{\*\bkmkstart orderclassTests}{\*\bkmkend _Ref393080421}
{\*\bkmkend _Toc393786518}{\*\bkmkend _Toc393852537}{\*\bkmkend _Toc393873677}{\*\bkmkend _Toc393875662}{\*\bkmkend orderclassTests}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Some 
of the orderclass constraints consist only of a single logical predicate, making them the simplest form of a test.  This is because the test holds over all the prefixes and/or all the suffixes, so no particular location, allomorph, etc. must be specified.
  For example, the prefix test for Nahuatl from section }{\field{\*\fldinst {\insrsid1444013  REF _Ref392991112 \\n }}{\fldrslt {\insrsid14046460 3.4.1}}}{\insrsid1444013  is repeated in (}{\field{\*\fldinst {\insrsid1444013  seq nx x39 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 42}}}{\insrsid1444013 ).
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x39}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 42}}}{\v\insrsid1444013 x39}{\insrsid1444013 {\*\bkmkend x39})\tab }{\cs109\f2\fs22\insrsid1444013 \\pt ORDER_ST\line \tab \tab left orderclass < current orderclass
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The first item on the first line of the test is the field code }{\cs109\f2\fs22\insrsid1444013 \\pt}{
\insrsid1444013  which says it is a prefix test:}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  Note that CarlaMenu, AmpleLinks and CARLAStudio users do not need to key the field code; the test name is also keyed in a separate location from the test proper.}}}{\insrsid1444013 
 a successor test to be applied during the parse whenever the position pointer }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 is on a prefix.  This is followed by the name of the test, which will show up in the statistics section of the log file.  This title
 will also be found in the log file if there are errors in the test.  The second line is the test itself.  As mentioned, this test is a single logical predicate consisting of a position }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013  and a feature 
}{\cs109\f2\fs22\insrsid1444013 orderclass}{\insrsid1444013 , then the mathematical operator }{\cs109\f2\fs22\insrsid1444013 <}{\insrsid1444013  (less than), followed by a position }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  and a feature }{
\cs109\f2\fs22\insrsid1444013 orderclass}{\insrsid1444013 .
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Let\rquote s look at a particular Nahuatl word (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x40 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 43}}}{\insrsid1444013 ) to see how and where the test would apply.
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx2070\tx2970\tx3870\tx4590\tx5760\tx6840\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x40}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 43}}}{\v\insrsid1444013 x40}{\insrsid1444013 {\*\bkmkend x40})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o-\tab ti-\tab k-
\tab ita\tab -k\tab -eh}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab }{\insrsid1444013 allomorph\line }{\caps\insrsid1444013 past\tab 1inc\tab 3o\tab }{\insrsid1444013 see}{\caps\insrsid1444013 \tab pret.SG\tab pl}{
\scaps\insrsid1444013 \tab }{\insrsid1444013 gloss\line -30\tab -20\tab -10\tab 0\tab 20\tab 50\tab orderclass\line V0/V0\tab V1/V0\tab V2/V1\tab V2\tab V2/V2\tab V2/V2\tab category\line pfx\tab pfx\tab pfx\tab root\tab sfx\tab sfx\tab type
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote we saw it\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
As AMPLE parses this form from left to right, it will posit particular allomorphs of morphemes.  At some point, it will posit the first prefix }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o-}{\insrsid1444013 .  The position pointer }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  is always on the morpheme being posited.  The first morpheme is a prefix, but, since there is nothing to the left to be tested, the }{\cs109\f2\fs22\insrsid1444013 ORDER_ST}{\insrsid1444013 
 constraint cannot rule out anything yet.  When we move to the next morpheme, the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ti\_}{\insrsid1444013  becomes }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
.  Since it is a prefix, the test is applicable.  The program looks to find the orderclass of the morpheme directly to the left of the current one and compares it to the current morpheme\rquote s orderclass.  Since -30 < -20, the test returns a \lquote 
True\rquote  answer, so the morpheme passes.  This is repeated with the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 k\_}{\insrsid1444013  prefix as }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  and the }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ti\_}{\insrsid1444013  as }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013 .  The prefix test no longer applies when the root }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
ita}{\insrsid1444013  becomes }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 .  A similar suffix test would insure that the orderclass of the first suffix as }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 must be greater than the orderclass of the root.  When the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_eh}{\insrsid1444013  suffix is posited, it is }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  and }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_k}{\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013 .
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now let\rquote 
s look at the more complex orderclass tests needed for Huallaga Quechua, due to the morpheme meaning \lquote JUST\rquote  which is allowed to float throughout the suffixes (see (}{\field{\*\fldinst {\insrsid1444013  seq nx x43 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 22}}}{\insrsid1444013 )).  The first test given in section }{\field{\*\fldinst {\insrsid1444013  REF _Ref392991112 \\n }}{\fldrslt {\insrsid14046460 3.4.1}}}{\insrsid1444013  is repeated here as (}
{\field{\*\fldinst {\insrsid1444013  seq nx x41 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 44}}}{\insrsid1444013 ).  (Remember that in Quechua the orderclasses were only required to be non-decreasing, rather than strictly increasing.)

\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x41}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 44}}}{\v\insrsid1444013 x41}{\insrsid1444013 {\*\bkmkend x41})\tab }{\cs109\f2\fs22\insrsid1444013 \\st ORDER_ST\line \tab \tab IF   (current orderclass ~= 0)\line \tab \tab 
THEN (left orderclass <= current orderclass)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 This test starts out with the }{\cs109\f2\fs22\insrsid1444013 \\st}{\insrsid1444013 
 field code, indicating that it applies when }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  is a suffix, followed by the nam
e of the test.  Like the Nahuatl case above, the test applies throughout the suffixes.  Now, however, there is an exception to the basic rule.  To account for this, two logical predicates are needed, combined with the logical operator IF...THEN.  The firs
t predicate serves the purpose of eliminating the floating morpheme from consideration, by saying that the orderclass of }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 must not be 0.  IF that is true,  THEN make sure that the orderclass of the morpheme directly to the left is less than or equal to the orderclass of }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 .
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Let\rquote s see how this would work for:
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1963\tx2839\tx3568\tx4297\tx5026\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x44}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 45}}}{\v\insrsid1444013 x44}{\insrsid1444013 {\*\bkmkend x44})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 reqsi\tab -naku\tab 
-sha\tab -lla\tab -yki\tab -ta\line }{\insrsid1444013 know\tab }{\caps\insrsid1444013 -recip\tab -rel\tab -just\tab -2p\tab -obj}{\scaps\insrsid1444013 \line   0\tab   60\tab 120\tab     0\tab 140\tab 180}{\insrsid1444013 
\par }\pard\plain \s98\ql \li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \lquote just between you and your friends\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The first time the test would apply is when the reciprocal suffix }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_naku}{\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 current}{\scaps\insrsid1444013 .  }{\insrsid1444013 
Its orderclass is not 0 so the THEN part of the test must be true to pass.  0 is less than or equal to 60, so the test is \lquote True\rquote .  The test applies again when }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_sha}{
\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 current}{\scaps\insrsid1444013 ; }{\insrsid1444013 and again the test returns \lquote True\rquote  because 60 is less than or equal to 120.  The key situation comes when }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_lla}{\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 current}{\scaps\insrsid1444013 : }{\insrsid1444013 now the orderclass is 0, so the first predicate is \lquote False\rquote 
.  This means that the second predicate does not apply at all, and the test returns \lquote True\rquote  once again.  Remember tha
t the IF...THEN construct is logically defined this way (see page 164 of Weber, Black, and McConnel 1988), even though it is not how we use \'93if...then...\'94
 in English.  The last two morphemes will pass the test in a similar manner as the first two suffixes.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
One case remains to be accounted for.  We need to make sure that the morphemes on both sides of the floater are still in sequence (e.g. what prevents the sequence of orderclasses 120\~0\~50 instead of 120\~0\~
140?)  We need to add a final test, which can look forward and backward over the whole word as necessary as it makes a sweep across the posited analysis, setting the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 position pointer on each morpheme in turn.  This more complex test is repeated in (}{\field{\*\fldinst {\insrsid1444013  seq nx x42 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 46}}}{\insrsid1444013 ).
\par }\pard\plain \s58\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x42}(}{\field{\*\fldinst {\insrsid1444013  seq nx }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 46}}}{\v\insrsid1444013 x42}{\insrsid1444013 {\*\bkmkend x42})\tab }{\cs109\f2\fs22\insrsid1444013 \\ft ORDER_FT\line \tab \tab IF   (    (current orderclass = 0)\line \tab \tab 
      AND (FOR_SOME_LEFT  (LEFT  orderclass ~= 0) )\line \tab \tab       AND (FOR_SOME_RIGHT (RIGHT orderclass ~= 0) )\line \tab \tab      )\line \tab \tab THEN (LEFT orderclass <= RIGHT orderclass)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Final tests all begin with the field code }{\cs109\f2\fs22\insrsid1444013 \\ft}{\insrsid1444013 
 followe
d by their title.  We can see right away that this test uses the IF...THEN logical operator discussed for the successor test and further, that the predicate after the THEN is (almost) identical to the previous test.  The IF portion has three predicates, h
owever, that all must be true for the test to apply; this is what is meant by using the logical AND between the parts.  The first predicate is simple: the current orderclass must be 0.  This is true only for roots and for floaters.  Let\rquote s assume }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  is the floater }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_lla}{\insrsid1444013  \lquote JUST\rquote  so that the first predicate within the IF clause is \lquote True\rquote 
.  Now, since the floater can come directly after the root and since at least some morphemes may be repeated in Huallaga Quechua, we could not simply talk about the morpheme directly to the left and directly to the right of }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 .  Instead, we use a quantifier FOR_SOME_LEFT which looks to the left until it finds one which fulfills the predicate }{\cs109\f2\fs22\insrsid1444013 LEFT orderclass ~=0}{\insrsid1444013 .  }{
\cs109\f2\fs22\insrsid1444013 LEFT}{\insrsid1444013  is in capitals to differentiate this morpheme somewhere to the left of }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  from the }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013 
 which is directly to the left of }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
.  Similarly, FOR_SOME_RIGHT looks to the right until it finds a morpheme whose order class is not 0.  All three parts of the IF part of the test are met in our example when }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_lla}{
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 current}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_sha}{
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 LEFT}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_yki}{
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  is }{\cs109\f2\fs22\insrsid1444013 RIGHT}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 .  }{\insrsid1444013 AMPLE remembers which morpheme is }{\cs109\f2\fs22\insrsid1444013 LEFT}{
\insrsid1444013  and which is }{\cs109\f2\fs22\insrsid1444013 RIGHT}{\insrsid1444013 , and it is the orderclasses of these two morphemes that are checked by the THEN part of the test.  Since 120 is less than or equal to 140, the test returns \lquote True
\rquote .
\par {\*\bkmkstart _Toc393786519}{\*\bkmkstart _Toc393852538}{\*\bkmkstart _Toc393873678}{\*\bkmkstart _Toc393875663}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CATEGORY TESTS{\*\bkmkstart categoryTests}{\*\bkmkend _Toc393786519}
{\*\bkmkend _Toc393852538}{\*\bkmkend _Toc393873678}{\*\bkmkend _Toc393875663}{\*\bkmkend categoryTests}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Category tests can also be simple or complex.  Here we will explain the category tests given earlier in (}{\field{\*\fldinst {\insrsid1444013  seq nx x28 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 28}}}{\insrsid1444013 )-(}
{\field{\*\fldinst {\insrsid1444013  seq nx x32 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 31}}}{\insrsid1444013 ) for Campa and then step through one example to show how AMPLE applies the tests. 
 Parts of the category tests should be familiar from the orderclass tests, but some parts are new.  The first two tests (which are repeated here from section }{\field{\*\fldinst {\insrsid1444013  REF languagesWithBothPrefixesAndSuffixes \\n }}{\fldrslt {
\insrsid14046460 3.4.2.3.2}}}{\insrsid1444013 ) consist of single predicates which insure that categories map right to left among the prefixes and left to right among the suffixes:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\pt CATEGORY_PT\line left fromcategory is current tocategory
\line 
\par \\st CATEGORY_ST\line left tocategory is current fromcategory
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The first final test below insures that the tocat
egory of the last suffix matches the fromcategory of the prefix closest to the root.  In this test, the IF part determines whether the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 position pointer is on the prefix which is closest to the root by checking the type (e.g. prefix, root, suffix) of both the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  morpheme and the one directly to its right.  Once the correct prefix is 
}{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 , THEN the fromcategory of that prefix is required to match the tocategory of the last morpheme in the word, indicated by the keyword FINAL.  Note again that 
whenever the IF part is false, the test does not apply and simply returns \lquote True\rquote  due to the truth conditions on the IF...THEN operator.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ft CATEGORY_FT_1\line IF   (    (current type is prefix)
\line       AND (right   type is root)\line      )\line THEN (current fromcategory is FINAL tocategory)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Finally, we need to make sure that there is a tocategory that can end a word in one of two appropriate places: the initial prefix if there is a prefix ; otherwise the final suffix.  The first test can be a successor test, listed as }{
\cs109\f2\fs22\insrsid1444013 \\rt}{\insrsid1444013  for \lquote root test\rquote  since the program knows whether there is a prefix or not as soon as the obligatory root is found, but the second option requires a final test:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt CATEGORY_RT\line IF   (INITIAL type is prefix)\line 
THEN (INITIAL tocategory is member [finalcategory])\line 
\par \\ft CATEGORY_FT_2\line IF NOT (INITIAL type is prefix)\line THEN   (FINAL tocategory is member [finalcategory])
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 These tests again check the type of a particular morpheme, but they are unique in that there is no }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  or }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013  or }{\cs109\f2\fs22\insrsid1444013 right}{\insrsid1444013  in the location position.  Instead, the }{\cs109\f2\fs22\insrsid1444013 INITIAL}{
\insrsid1444013  and }{\cs109\f2\fs22\insrsid1444013 FINAL}{\insrsid1444013  positions in the word are key.  Note also the use of }{\cs109\f2\fs22\insrsid1444013 is member}{\insrsid1444013 
 as a new predicate to check for membership in the category class called }{\cs109\f2\fs22\insrsid1444013 finalcategory}{\insrsid1444013 .  Finally, note how the NOT operator can combine with the IF...THEN (and the
 other operators also) to negate either part of the test.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Let\rquote s step through the Campa word in (}{\field{\*\fldinst {\insrsid1444013  seq nx x45 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 47}}}{\insrsid1444013 ) , repeated from earlier, and see how each test would be applied by the program.  The mappings are shown schematically also.
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1873\tx2659\tx3388\tx4342\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x45}(}
{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 47}}}{\v\insrsid1444013 x45}{\insrsid1444013 {\*\bkmkend x45})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i-\tab N-\tab chik
\tab -i\tab -na}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \tab \tab \tab \tab }{\insrsid1444013 \lquote he will cut me\rquote }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \line }{\caps\insrsid1444013 3m-\tab fut-\tab }{
\insrsid1444013 cut}{\caps\insrsid1444013 \tab -f\tab -1o}{\scaps\insrsid1444013 \line }{\insrsid1444013 V1/V0\tab V1/V1\tab V2N\tab V2N/V2\tab V2/V1\line }{\f2\fs20\insrsid1444013  |  |   |  |   |     |   |   |  |\line  +--|---|--+   +-----+   +---+  |
\line     |   +-----------------------+\line [finalcategory]
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The program parses the word from left to right a
nd applies successor tests during the parse.  Therefore, the prefix test will apply first.  When the third person masculine subject prefix is }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 there is no morpheme to its left to check.  The test cannot apply until the future prefix is }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 .  It 
now checks to be sure that the fromcategory of the third masculine prefix, V1, is the same as the tocategory of the future prefix, which it is.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 When the root meaning \lquote cut\rquote  is }{\cs109\f2\fs22\insrsid1444013 current}{
\insrsid1444013 , the root successor test can apply.  This test checks to see if the type of the initial morpheme in the word is }{\cs109\f2\fs22\insrsid1444013 prefix}{\insrsid1444013 
 (which it is) and then requires that the tocategory of that initial prefix be a member of the category class called }{\cs109\f2\fs22\insrsid1444013 finalcategory}{\insrsid1444013 .  V0 is a member of that class, so the test returns \lquote True\rquote .

\par The next morpheme is the future suffix, so when the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  position pointer moves to it, the suffix successor test applies.  This test requires that the tocategory of }{\cs109\f2\fs22\insrsid1444013 left}
{\insrsid1444013  (remember that for roots both the fromcategory and the tocategory are the same) is the same as the fromcategory of }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
.  Since both are V2N, this test passes.  The suffix successor test also applies when the first person object suffix is }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
, requiring that the tocategory of the future suffix, V2, is the same as the fromcategory of the first person object suffix (which it is).
\par We have now reached the end of the word, so the two final tests apply.  The first final test tells the program to move through the word morpheme by morpheme until it finds the morpheme whose type is }{\cs109\f2\fs22\insrsid1444013 prefix}{\insrsid1444013 
 and the type of the morpheme to the right is }{\cs109\f2\fs22\insrsid1444013 root}{\insrsid1444013 .  The IF clause of this test fails (and therefore the test passes) for all morphemes as }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 except the future prefix.  Now with this prefix as }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 , the THEN clause requires that the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  fromcategory, V1, is the same
 as the tocategory of the last morpheme in the word, the first person object suffix.  This test also passes.  Finally, the second final test, }{\cs109\f2\fs22\insrsid1444013 CATEGORY_FT_2}{\insrsid1444013 , passes by not applying, since the }{
\cs109\f2\fs22\insrsid1444013 INITIAL}{\insrsid1444013  morpheme is a prefix, thus failing the IF NOT condition.
\par Remember that the starter kit provides the category tests needed for most situations, so the user does not need to write such complex tests from scratch.
\par {\*\bkmkstart _Ref392991226}{\*\bkmkstart _Toc393786520}{\*\bkmkstart _Toc393852539}{\*\bkmkstart _Toc393873679}{\*\bkmkstart _Toc393875664}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 PROPERTIES{\*\bkmkstart properties}{\*\bkmkend _Ref392991226}
{\*\bkmkend _Toc393786520}{\*\bkmkend _Toc393852539}{\*\bkmkend _Toc393873679}{\*\bkmkend _Toc393875664}{\*\bkmkend properties}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 One additional type of feature is needed.  In AMPLE such features of either the morpheme as
 a whole or of a particular allomorph are called }{\cs64\i\insrsid1444013 properties}{\insrsid1444013 
.  These properties are then available to use in tests written by the user.  Actually, new notation in AMPLE allows many of the tests involving properties to be written as either MECs or MCCs inste
ad, so both methods will be shown where applicable for the various examples.
\par Before looking at specific examples, we briefly mention how to define morpheme properties and allomorph properties.  Morpheme properties are defined via the }{\cs109\f2\fs22\insrsid1444013 \\mp}{\insrsid1444013  field in the Analysis Data Control file.}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 CarlaMenu users use Lists/morpheme Properties.\line AmpleLinks users use Morph Props.\line CARLAStudio users use Analysis tab, Morphotactics/Morpheme Properties.}}}{\insrsid1444013   For example, the following defines three morpheme properties (}{
\cs109\f2\fs22\insrsid1444013 ClassI}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 ClassII}{\insrsid1444013 , and }{\cs109\f2\fs22\insrsid1444013 ClassIII}{\insrsid1444013 ):
\par }{\cs109\f2\fs22\insrsid1444013 \\mp ClassI ClassII ClassIII
\par }{\insrsid1444013 Allomorph properties are defined similarly via the }{\cs109\f2\fs22\insrsid1444013 \\ap}{\insrsid1444013  field in the Analysis Data Control file.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Lists/Allomorph Properties.\line 
AmpleLinks users use Allo Props.\line CARLAStudio users use Analysis tab, Morphophonemics/Allomorph Properties.}}}{\insrsid1444013   For example, the following defines three allomorph properties (}{\cs109\f2\fs22\insrsid1444013 takes.ClassI}{
\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 takes.ClassII}{\insrsid1444013 , and }{\cs109\f2\fs22\insrsid1444013 takes.ClassIII}{\insrsid1444013 ):
\par }{\cs109\f2\fs22\insrsid1444013 \\ap takes.ClassI takes.ClassII takes.ClassIII
\par }{\insrsid1444013 The names of properties are arbitrary and are up to the user.  Avoid using special characters, though, that have specific meaning in MECs (e.g. }{\cs109\f2\fs22\insrsid1444013 ~}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 _}{
\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 /}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 +}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 (}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 )}{\insrsid1444013 , }{
\cs109\f2\fs22\insrsid1444013 [}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 ]}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 \{}{\insrsid1444013 , and }{\cs109\f2\fs22\insrsid1444013 \}}{\insrsid1444013 ).
\par {\*\bkmkstart _Toc393786521}{\*\bkmkstart _Toc393852540}{\*\bkmkstart _Toc393873680}{\*\bkmkstart _Toc393875665}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.1\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 A regular process of affix allomorphy tied to root classes \line \tab 
\tab (Tojolob\rquote al consonant epenthesis){\*\bkmkstart tojolobal}{\*\bkmkend _Toc393786521}{\*\bkmkend _Toc393852540}{\*\bkmkend _Toc393873680}{\*\bkmkend _Toc393875665}{\*\bkmkend tojolobal}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Let\rquote 
s look now at consonant epenthesis in Tojolob'al (information from Brian Renes, p.c.).  One case of this occurs when the second person plural ergative marker follows a vowel.  Whether the epenthetic consonant is }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 w}{\insrsid1444013  or }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 y}{\insrsid1444013 
 depends on the class of the root, which is partially determined by its shape.  Class I roots will have }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 w}{\insrsid1444013  as the epenthetic consonant; Class III roots will have }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 y}{\insrsid1444013 , and Class II roots apparently either never end up with a vowel before the ergative marker, or just do not allow epenthesis.  How can we deal with this?
\par First, we define morpheme properties of }{\f2\fs22\insrsid1444013 ClassI}{\insrsid1444013 , }{\f2\fs22\insrsid1444013 ClassII}{\insrsid1444013 , and }{\f2\fs22\insrsid1444013 ClassIII }{\insrsid1444013 
which divide the verbal roots into the three classes and mark each root dictionary entry appropriately.
\par Then, we have two options within AMPLE to insure that the correct suffix (with the epenthetic consonant attached) is used: MECs including properties or writing specific tests.
\par {\*\bkmkstart _Toc393786522}{\*\bkmkstart _Toc393852541}{\*\bkmkstart _Toc393873681}{\*\bkmkstart _Toc393875666}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.1.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Test Method{\*\bkmkend _Toc393786522}{\*\bkmkend _Toc393852541}
{\*\bkmkend _Toc393873681}{\*\bkmkend _Toc393875666}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 For the test method, we also need to define allomorph properties of }{\f2\fs22\insrsid1444013 
takes.ClassI}{\insrsid1444013 , }{\f2\fs22\insrsid1444013 takes.ClassII,}{\insrsid1444013  and }{\f2\fs22\insrsid1444013 takes.ClassIII}{\insrsid1444013  to differentiate between the various allomorphs of the suffixes.  The particular allomorphs o
f the second person plural ergative marker must be marked with the properties }{\f2\fs22\insrsid1444013 takes.ClassI}{\insrsid1444013  or }{\f2\fs22\insrsid1444013 takes.ClassIII }{\insrsid1444013 
as shown, in addition to the SEC stating that it must follow a vowel.  If both conditions are not met, the correct allomorph is simply }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ex}{\insrsid1444013 .
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\s ex
\par \\a wex  \tab takes.ClassI \tab \tab / [V] _
\par \\a yex  \tab takes.ClassIII\tab / [V] _
\par }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a ex
\par \\g 2PlErg
\par }\pard\plain \ql \li0\ri0\sb240\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Then, tests are needed to match the allomorphs of the suffixes that go on Class I roots with those roots only, etc.  These can be written as successor tests within the suffix test (}{\cs109\f2\fs22\insrsid1444013 \\st}{\insrsid1444013 
) section of the Analysis Data file:}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use Constraints/custom Tests.\line AmpleLinks users use Tests.\line CARLAStudio users use Analysis tab, Morphotactics and then choose the appropriate test.}}}{\insrsid1444013 
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st CLASSI_ST\line IF   (current property is takes.ClassI)
\line THEN (FOR_SOME_LEFT (LEFT property is ClassI)\line      )\line 
\par \\st CLASSIII_ST\line IF   (current property is takes.ClassIII)\line THEN (FOR_SOME_LEFT (LEFT property is ClassIII))
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The format and wording of these tests should be familiar, since it is very similar to that found in the orderclass and category tests, except that we are now talking about properties.  Note that both of these tests are essentially identical and the comp
uter will treat them as such; }{\f2\fs22\insrsid1444013 CLASSI_ST}{\insrsid1444013 
 simply has the major parentheses visually lined up to make it easier to understand the logic of the test.  The use of the FOR_SOME_LEFT quantifier allows other morphemes to intervene between the root and the suffix i
n question.  It is crucial in this case to use only the IF...THEN operator and not IFF, since the general allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ex}{\insrsid1444013 
 is correct when there is not a vowel immediately preceding it.  Note that a similar test for Class II roots and suffixes could also be written and that  nothing in the test is specific to the second person plural absolutive marker.}{
\f2\fs22\insrsid1444013 
\par {\*\bkmkstart _Toc393786523}{\*\bkmkstart _Toc393852542}{\*\bkmkstart _Toc393873682}{\*\bkmkstart _Toc393875667}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.1.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The MEC Method{\*\bkmkend _Toc393786523}{\*\bkmkend _Toc393852542}
{\*\bkmkend _Toc393873682}{\*\bkmkend _Toc393875667}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The second option is to use the enhanced \'93morpheme environment constraint\'94
 kind of notation now allowed by the AMPLE program.  This newer MEC nota
tion was added because it is easier for most users to understand and to write themselves and because it will handle a number of situations.  Either a property, a category, or a type (root, suffix, prefix) can be included in an MEC if it is enclosed in cur
ly braces\{\}
.  It is important to note that when encountering the curly braces, AMPLE will look through the types first, then the properties, then the categories.  Therefore, distinct names should be used for each to avoid problems.  Under the enhanced MEC m
ethod, the dictionary entry would be:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\s ex
\par \\a wex  \tab +/ \{ClassI\}   ... _\tab \tab / [V] _
\par \\a yex  \tab +/ \{ClassIII\} ... }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 _\tab \tab / [V] _
\par \\a ex
\par \\g 2PlErg
\par {\*\bkmkstart _Toc393786524}{\*\bkmkstart _Toc393852543}{\*\bkmkstart _Toc393873683}{\*\bkmkstart _Toc393875668}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.1.3\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The test and MEC Methods Compared{\*\bkmkend _Toc393786524}
{\*\bkmkend _Toc393852543}{\*\bkmkend _Toc393873683}{\*\bkmkend _Toc393875668}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Which way is better and how would you determine it?  Three possible criteria to consid
er are: (a) linguistic felicity (b) computational efficiency, and (c) computational control.
\par {\pntext\pard\plain\s76 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 a)\tab}}\pard\plain \s76\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pnlcltr\pnstart1\pnindent360\pnhang {\pntxta )}}
\nooverflow\faroman\ls4\rin720\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Linguistic felicity: If the only time there needs to be some kind of relationship between an affix and the verb class is this particular morpheme, then it is bette
r to just mark the lexical entry with the MEC than to write a separate test.  However, in the Tojolob\rquote 
al case, it turns out that there are a number of morphemes or allomorphs whose occurrence depends on the correct identification of the class of the verb r
oot.  The same tests can be used for all of these cases, allowing the generalization to be expressed once in the control file as a central part of the grammar, rather than just a fact about particular dictionary entries.
\par {\pntext\pard\plain\insrsid1444013 \hich\af0\dbch\af0\loch\f0 b)\tab}}\pard\plain \ql \fi-360\li1080\ri0\sb240\nowidctlpar{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pnlcltr\pnstart1\pnindent360\pnhang {\pntxta )}}
\nooverflow\faroman\ls4\rin0\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Computational efficiency: The \'93+/ \{property\} _\'94
 notation is an MEC.  All MECs are final tests and so is this.  The user-written test can be a successor test in many situations.  Successor tests are more efficient computationally because they are applied sooner and can therefore rule out an 
incorrect parse faster.
\par {\pntext\pard\plain\insrsid1444013 \hich\af0\dbch\af0\loch\f0 c)\tab}}\pard \ql \fi-360\li1080\ri0\sb240\nowidctlpar{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pnlcltr\pnstart1\pnindent360\pnhang {\pntxta )}}
\nooverflow\faroman\ls4\rin0\lin1080\itap0\pararsid14369330 {\insrsid1444013 
Computational control: No feedback is provided on how effective a particular MEC is, whereas the log file explicitly shows how effective the user-written test is.  It also is relatively easy to disable the user-written test (merely put something like 
\lquote \\co \rquote  in front of the \lquote \\st\rquote }{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  CarlaMenu users use the disaBle option.\line AmpleLinks users click the enabled/disabled icon.\line 
CARLAStudio users remove the check from the Enable check box in the test dialog box (go to Analysis tab, Morphotactics and choose the type of test; then select the particular test to edit and double click it).}}}{\insrsid1444013 
), while it is more work to disable the MECs throughout the dictionary.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  If the MECs can be added automatically by the PhonRule program (Buseman 1992), then they can also be easily disabled.}}}{\insrsid1444013 
\par {\*\bkmkstart _Toc393786525}{\*\bkmkstart _Toc393852544}{\*\bkmkstart _Toc393873684}{\*\bkmkstart _Toc393875669}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.2\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 A regular process of root allomorphy tied to particular affixes\line 
\tab \tab (Tatana\rquote  vowel neutralization){\*\bkmkstart tatana}{\*\bkmkend _Toc393786525}{\*\bkmkend _Toc393852544}{\*\bkmkend _Toc393873684}{\*\bkmkend _Toc393875669}{\*\bkmkend tatana}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 A second example using properties is a vowel neutralization rule in Tatana', where }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a}{\insrsid1444013  becomes }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 o}{\insrsid1444013 
 whenever an appropriate suffix is added to a root of the shape CaCV(C), in which V is any vowel except }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 a}{\insrsid1444013 , as shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x46 }
}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 48}}}{\insrsid1444013 ) (data is from John Dillon, p.c.).
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3845\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x46}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 48}}}{\v\insrsid1444013 x46}{\insrsid1444013 {\*\bkmkend x46})\tab a.\tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bali-an    }{\insrsid1444013 
{\field{\*\fldinst SYMBOL 174 \\f "Symbol" \\s 12}{\fldrslt\f3\fs24}}}{\insrsid1444013 \tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 balian}{\insrsid1444013 \line b.\tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
bali-on    }{\insrsid1444013 {\field{\*\fldinst SYMBOL 174 \\f "Symbol" \\s 12}{\fldrslt\f3\fs24}}}{\insrsid1444013 \tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bolion}{\insrsid1444013 \line c.\tab }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bali-i\rquote     }{\insrsid1444013 {\field{\*\fldinst SYMBOL 174 \\f "Symbol" \\s 12}{\fldrslt\f3\fs24}}}{\insrsid1444013 \tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bolii
\rquote }{\insrsid1444013 
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
How should we deal with this?  We need to mark with particular properties the roots which are susceptible to vowel neutralization along with the specific allomorphs of the root which have undergone the neutralization and the suffixes which \'93cause\'94
 vowel neutralization.  Then there are again two ways to write the needed constraints: using \{property\} MECs or writing specific tests.  The option of using the MEC notation may look simpler, though the 
considerations above still apply: this is a general process in Tatana', not an exceptional one limited to just a few lexical items. 
\par {\*\bkmkstart _Toc393786526}{\*\bkmkstart _Toc393852545}{\*\bkmkstart _Toc393873685}{\*\bkmkstart _Toc393875670}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.2.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The MEC Method{\*\bkmkend _Toc393786526}{\*\bkmkend _Toc393852545}
{\*\bkmkend _Toc393873685}{\*\bkmkend _Toc393875670}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
It is crucial that both the neutralized and the normal form of the root be constrained with an MEC, as shown in the root dictionary entry, but the property }{\f2\fs22\insrsid1444013 neutralized}{\insrsid1444013 
 is only there as an explanation for the phenomenon; it is not used in any test or constraint under this method.  (The properties, of course, must be defined by adding them to the Analysis Data Control file.)
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Root dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\r bali \tab 
\tab \tab \tab \tab +/ ~_\{neutralizes\}\line \\a boli neutralized \tab +/ _ \{neutralizes\}\line \\c V\line \\g buy
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The suffixes are marked with the morpheme property }{\f2\fs22\insrsid1444013 neutralizes}{
\insrsid1444013  if they cause vowel neutralization.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Suffix dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\s an\line \\c V/V
\line \\g SV\tab \tab \tab | setting voice\line \line \\s on \line \\c V/V\line \\g PV\tab \tab \tab | patient voice\line \\mp neutralizes\line \line \\s i'\line \\c V/V\line \\g RF.NFIN\tab | referent voice, non-finite\line \\mp neutralizes
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The correct pairings of suffixes and root allomorphs are now assured: the }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \_an}{\cs69\i\fs22\lang1024\langfe1024\noproof\insrsid1444013  }{\insrsid1444013 suffix can only attach to the}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 bali}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  }{\insrsid1444013 allomorph of the root since it doesn\rquote t have the property}{
\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  }{\cs69\f2\fs22\lang1024\langfe1024\noproof\insrsid1444013 neutralizes}{\insrsid1444013 
; roots which are not subject to neutralization simply do not need constrained allomorphs, and all suffixes can attach without reference to the}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  }{
\cs69\f2\fs22\lang1024\langfe1024\noproof\insrsid1444013 neutralizes}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  }{\insrsid1444013 property.
\par {\*\bkmkstart _Ref393612164}{\*\bkmkstart _Toc393786527}{\*\bkmkstart _Toc393852546}{\*\bkmkstart _Toc393873686}{\*\bkmkstart _Toc393875671}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.2.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Test Method{\*\bkmkend _Ref393612164}{\*\bkmkend _Toc393786527}
{\*\bkmkend _Toc393852546}{\*\bkmkend _Toc393873686}{\*\bkmkend _Toc393875671}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 To use the test method, in addition to the morpheme property of }{\f2\fs22\insrsid1444013 
neutralizes}{\insrsid1444013  and the allomorph property of }{\f2\fs22\insrsid1444013 neutralized}{\insrsid1444013  seen above (this property will be used to constrain the output this time), we need to define the morpheme property }{
\f2\fs22\insrsid1444013 potentially.neutralized }{\insrsid1444013 for roots.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  See below for discussion of why this }{\f2\insrsid6688044 potentially.neutralized}{\insrsid6688044  property is necessary. }}}{\insrsid1444013 
  The changed root dictionary entry is shown here; the suffix dictionary entries above are identical under either method.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Root dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\r bali \line \\
a boli neutralized\line \\c V\line \\g buy\line \\mp potentially.neutralized
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now, instead of the two \{property\} MECs, we write a test.  Let\rquote 
s consider two ways one might try to write the needed test, named 1 and 2 here for discussion purposes:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st NEUTRALIZATION1_ST\line 
IF   (current property is neutralizes)\line THEN (    (left property is \line            potentially.neutralized)\line       IFF (left property is neutralized)\line      )
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\keep\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\st NEUTRALIZATION2_ST\line IF   (left property is \line       potentially.neutralized)\line 
THEN (    (left    property is neutralized)\line       IFF (current property is neutralizes)\line      )
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Which of these two forms of the test is better and why?  Let\rquote 
s look at each one carefully to see which test really does what we want.  
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 In }{\f2\fs22\insrsid1444013 NEUTRALIZATION1_ST}{\insrsid1444013 
, we are looking for the position in the word where the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  position pointer is on one of the suffixes which causes neutralization.  The tes
t says that IF we are at that point, THEN if the morpheme to the left can be neutralized, the allomorph must be the neutralized one and if the morpheme to the left cannot be neutralized then the allomorph cannot have the property }{
\f2\fs22\insrsid1444013 neutralized}{\insrsid1444013 .  This gives us the correct results for the case where the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 position pointer is on one of the suffixes which causes neutralization.  But what happens when }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  is a suffix which does not have the }{\f2\fs22\insrsid1444013 neutralizes}{\insrsid1444013 
 property?  The IF clause is false, so the test is pa
ssed as true by the truth conditions on the IF...THEN logical operator.  Version 1 of the test therefore incorrectly allows the case where the suffix does not cause neutralization, yet the neutralized form of the root is used.
\par Does the second form of the test avoid this pitfall?  Yes.  The }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013   position pointer is looking for the case where the morpheme to the left can be neutralized.  It doesn\rquote 
t matter to the IF clause whether the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  morpheme causes neutralization or not, so every case where something can be neutralized will be covered by the test.  THEN the }{\cs109\f2\fs22\insrsid1444013 
left}{\insrsid1444013  morpheme must be the neutralized form if the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  morpheme causes neutralization and the }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013 
 morpheme cannot be the neutralized form if the current morpheme does not have the }{\f2\fs22\insrsid1444013 neutralizes}{\insrsid1444013  property.  The }{\f2\fs22\insrsid1444013 NEUTRALIZATION2_ST}{\insrsid1444013  correctly accounts for all forms.

\par One might wonder why the }{\f2\fs22\insrsid1444013 potentially.neutralized}{\insrsid1444013  property is needed.  Without it, a simpler test might be written something like:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st}{\insrsid1444013  }{\f2\fs22\insrsid1444013 
NEUTRALIZATION3_ST\line IF   (left property is neutralized)\line THEN (current property is neutralizes)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
This test assures that the neutralized form of the root will only show up when there is a neutralizing suffix present.  But, again, this is only half of the story: it incorrectly allows the unneutralized form to o
ccur even with a neutralizing suffix, since the test passes whenever the IF clause is not met.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
There are many general processes which occur in languages that can be handled just like the Tatana' neutralization.  For example, in many dialects of Zapotec various prefixes (such as the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 x\_}{
\insrsid1444013  prefix which goes on alienably possessed nouns when they are possessed) cause fortification of a root beginning with a lenis consonant.  Thus, }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 diiz}{\insrsid1444013  \lquote 
word\rquote  becomes }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 xtiiz noo}{\insrsid1444013  \lquote my word\rquote .  A parallel test to }{\f2\fs22\insrsid1444013 NEUTRALIZATION2_ST}{\insrsid1444013  (or
 two MECs in each affected root entry) will fully account for this phenomenon.
\par {\*\bkmkstart _Toc393786528}{\*\bkmkstart _Toc393852547}{\*\bkmkstart _Toc393873687}{\*\bkmkstart _Toc393875672}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.3\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 A regular process of allomorphy in compound roots (Zapotec reduced
\line \tab \tab stress){\*\bkmkstart zapotecReducedStressed}{\*\bkmkend _Toc393786528}{\*\bkmkend _Toc393852547}{\*\bkmkend _Toc393873687}{\*\bkmkend _Toc393875672}{\*\bkmkend zapotecReducedStressed}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
A similar yet slightly more complex phenomenon occurs in many dialects of Zapotec, where all but the
 final root in a compound will lose any laryngealization or glottalization of the vowel, since these only occur in stressed syllables.  (Data is from Randy Regnier, p.c.)
\par {\*\bkmkstart _Toc393786529}{\*\bkmkstart _Toc393852548}{\*\bkmkstart _Toc393873688}{\*\bkmkstart _Toc393875673}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.3.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The MEC Method{\*\bkmkend _Toc393786529}{\*\bkmkend _Toc393852548}
{\*\bkmkend _Toc393873688}{\*\bkmkend _Toc393875673}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Using the MEC method, we can define an allomorph property }{\f2\fs22\insrsid1444013 
reduced.stress}{\insrsid1444013  to use simply as an explanation of the phenomenon, then add two MECs to require the reduced stress form before another root and the regular form not before another root.  (Note here that the MECs use the type }{
\f2\fs22\insrsid1444013 root}{\insrsid1444013  rather than a property, but the syntax of the MEC is identical.)
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Root dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\r ze?e\line \\
a zeg  / #_#  / _ lo\line \\a ze   reduced.stress\tab \tab +/ _ \{root\}\line \\a ze?e\tab \tab \tab \tab \tab \tab \tab \tab +/ ~_\{root\}\line \\g like\line \\c ADV
\par {\*\bkmkstart _Toc393786530}{\*\bkmkstart _Toc393852549}{\*\bkmkstart _Toc393873689}{\*\bkmkstart _Toc393875674}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.3.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Test Method{\*\bkmkend _Toc393786530}{\*\bkmkend _Toc393852549}
{\*\bkmkend _Toc393873689}{\*\bkmkend _Toc393875674}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The root dictionary entry needed for the test method is completely parallel to the neutra
lization example (section }{\field{\*\fldinst {\insrsid1444013  REF _Ref393612164 \\n }}{\fldrslt {\insrsid14046460 3.7.3.2.2}}}{\insrsid1444013 ), with both the allomorph property of }{\f2\fs22\insrsid1444013 reduced.stress}{\insrsid1444013 
 and the morpheme property of }{\f2\fs22\insrsid1444013 potentially.reduced.stress}{\insrsid1444013  needed:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Root dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\r ze?e\line \\
a zeg  / #_#  / _ lo\line \\a ze   reduced.stress\line \\a ze?e\line \\g like\line \\c ADV\line \\mp potentially.reduced.stress
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Our first attempt at writing a test might be to try something parallel to the }{
\f2\fs22\insrsid1444013 NEUTRALIZATION2_ST}{\insrsid1444013 , except for substituting the type }{\cs109\f2\fs22\insrsid1444013 root}{\insrsid1444013  for the }{\f2\fs22\insrsid1444013 neutralizes}{\insrsid1444013  property and making it a root test:

\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt REDUCED_STRESS1_ST\line IF   (left property is \line 
      potentially.reduced.stress)\line THEN (    (left property is reduced.stress)\line       IFF (current type is root)\line      )
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
This form of the test is incorrect for a couple of reasons: (a) since the test is a root test, it will only apply when the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  position pointer is on a root, so the }{\f2\fs22\insrsid1444013 
current type is root }{\insrsid1444013 clause is redundant and unnecessary; (b) more importantly, the test will never be looking at the case where either the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 morpheme is a suffix or there is nothing after the root, so it does not rule out the reduced stress form being used as the final or only root.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
To deal with this problem we can rewrite the test as a final test, so that it will apply to the whole word.  Such a final test is given below.  Note that there is one important change between }{\f2\fs22\insrsid1444013 REDUCED_STRESS1_ST }{\insrsid1444013 
and }{\f2\fs22\insrsid1444013 REDUCED_STRESS_FT}{\insrsid1444013 : the }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013  position pointer is changed to }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  and the }{\cs109\f2\fs22\insrsid1444013 
current}{\insrsid1444013  position pointer is changed to }{\cs109\f2\fs22\insrsid1444013 right}{\insrsid1444013 .  Intuitively, this allows the test to be searching for the root that can have red
uced stress, then check to see if it is followed by another root (in which case the reduced form would be used) or if it is either word final or followed by a suffix (in which case the full form of the root is correct).  The final test with the position p
ointers just as in }{\f2\fs22\insrsid1444013 REDUCED_STRESS1_ST }{\insrsid1444013 
should also work for the cases where the root in question is followed by either another root or a suffix, but it will not rule out the cases where the root which can be reduced is final in the word in question.  There is no }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  morpheme for it to be to the left of in that case, so the test will never apply and a reduced stress root could incorrectly appear in word final position.  The correct form of the test is thus:

\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ft }{\f2\fs22\insrsid1444013 REDUCED_STRESS_FT\line 
IF   (current property is \line       potentially.reduced.stress)\line THEN (    (current property is\line            reduced.stress)\line       IFF (right type is root)\line      )
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Having to use a final test rather than a successor test decreases computational efficiency, though, so we might want to explor
e another option.  We could write two simpler successor tests, one a root test and one a suffix test, to correctly account for the cases where something follows the root in question.  The root test is the same as the }{\f2\fs22\insrsid1444013 
REDUCED_STRESS1_ST}{\insrsid1444013  with the redundant statement requiring }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  to be a root removed.  This test simply says that when the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 position pointer is on a root, if the morpheme to the left has the property }{\f2\fs22\insrsid1444013 potentially.reduced.stress}{\insrsid1444013  then it must be the allomorph which has the property }{\f2\fs22\insrsid1444013 reduced.stress.}{
\insrsid1444013   (This morpheme to the left will have to be a root to meet these conditions, since only roots are marked with these properties.)
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt }{\f2\fs22\insrsid1444013 REDUCED_STRESS2_ST\line 
IF   (left property is \line       potentially.reduced.stress)\line THEN (left property is reduced.stress)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The second successor test takes care of the case where a suffix follows the root which can have a reduced form.  This simple test says that the reduced stress allomorph may not be present when a suffix follows it.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st }{\f2\fs22\insrsid1444013 NO_REDUCED_STRESS_ST\line 
NOT  (left property is reduced.stress)
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The third case, where the root in question is word final, cannot be dealt with as a user-written successor test of this type, since the computer does not know if it has found the final morpheme in a word until the whole word has be
en parsed.  We could, however, use a different type of successor test, an SEC, since the computer does know whether it has found the end of the string of characters in the word.  The allomorph line for each reduced form in the dictionary would then read:

\par }\pard \s22\ql \fi360\li1080\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin1080\itap0 {\cs109\f2\fs22\insrsid1444013 \\a ze   reduced.stress   / ~_ #
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
So, three options will account for the reduced stress in compounds: two MECs in each susceptible root dictionary entry, a user-written final test, or two user-written successor tests plus an SEC on each reduced allomorph.  Of
 these, the single final test seems to capture the linguistic generalization most directly.
\par {\*\bkmkstart _Toc393786531}{\*\bkmkstart _Toc393852550}{\*\bkmkstart _Toc393873690}{\*\bkmkstart _Toc393875675}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.4\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Allomorphy of lexical exceptions (Quiegolani Zapotec Potential\line 
\tab \tab aspect){\*\bkmkstart zapotecPotentialAspect}{\*\bkmkend _Toc393786531}{\*\bkmkend _Toc393852550}{\*\bkmkend _Toc393873690}{\*\bkmkend _Toc393875675}{\*\bkmkend zapotecPotentialAspect}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now let\rquote 
s consider another case from Quiegolani Zapotec (data from Randy Regnier, p.c.).  A small set of verbs take the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ts\_ }{\insrsid1444013 
allomorph of the Potential aspect marker, not the normal allomorphs of }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 g\_}{\insrsid1444013  before vowels and semivowels and }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 y\_}{
\insrsid1444013  before consonants.  
\par {\*\bkmkstart _Toc393786532}{\*\bkmkstart _Toc393852551}{\*\bkmkstart _Toc393873691}{\*\bkmkstart _Toc393875676}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.4.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Test Method{\*\bkmkend _Toc393786532}{\*\bkmkend _Toc393852551}
{\*\bkmkend _Toc393873691}{\*\bkmkend _Toc393875676}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Before the MEC notation was available, this type of phenomenon required the use of a property }
{\f2\fs22\insrsid1444013 takes_ts_POT}{\insrsid1444013  and a user-written test.  The dictionary entries needed under the test method for one of the roots and the potential aspect prefix are as follows:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Root dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\r a\line \\a a\line 
\\g go.non.base\line \\mp takes.ts.POT  | uses the ts form of Potential\line \\c VA
\par 
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\insrsid1444013 Prefix dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\p g\line \\a 0    +/ Imp _ open    +/ Imp _ give\line \\
a g    / _[V]   / _[SV]\line \\a y    / _[C]\line \\a ts       | constrained with root test TS_POT_ST\line \\g P\line \\c VCA/V VA/V ADJ/V\line \\o -30
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note that the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ts\_}{\insrsid1444013 
 allomorph does not have any con
straint in the dictionary itself, but simply a comment to point to the user-written test.  Again we can look at various forms of the test to see which one is needed to cover all the cases.  The test can be a (root) successor test.  Version 1 identifies th
e allomorph string of the prefix and then requires that the root have the correct property:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt }{\f2\fs22\insrsid1444013 TS_POT1_ST\line 
IF   (left allomorph is "ts")\line THEN (current property is takes.ts.POT)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The big problem with version 1 is that there could be allomorphs of other morphe
mes that have the form }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ts\_}{\cs69\i\fs22\lang1024\langfe1024\noproof\insrsid1444013 .  }{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013 
Version 2 improves on this by requiring the test to}{\insrsid1444013  identify both the correct morphname and the correct allomorph, and then make sure that the root (which the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 position pointer is on) has the property }{\f2\fs22\insrsid1444013 takes.ts.POT}{\insrsid1444013 .  
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt }{\f2\fs22\insrsid1444013 TS_POT2_ST\line 
IF   (    (left morphname is P)\line       AND (left allomorph is "ts")\line      )\line THEN (current property is takes.ts.POT)
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 While version 2 is an improvement, neither version 1 nor 2 rule out having either }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 g\_}{\cs69\fs22\lang1024\langfe1024\noproof\insrsid1444013  or }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 y\_ }{\insrsid1444013 on a root which takes the }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ts\_}{\insrsid1444013  form.  Th
e IF...THEN operator in version 2 cannot simply be replaced by the IFF logical operator, since the roots which use this particular form of the Potential aspect can also have other aspect markers.  Version 3 of the test corrects this problem by combining t
he IF...THEN and IFF operators to finally assure that when the Potential aspect marker is present, only the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ts\_}{\insrsid1444013 
 form will show up with those roots which require it, and not with any others.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt }{\f2\fs22\insrsid1444013 TS_POT3_ST\line 
IF    (left morphname is P)\line THEN (    (left allomorph is "ts")\line       IFF (current property is takes.ts.POT)\line      )
\par {\*\bkmkstart _Toc393786533}{\*\bkmkstart _Toc393852552}{\*\bkmkstart _Toc393873692}{\*\bkmkstart _Toc393875677}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.4.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The MEC Method{\*\bkmkend _Toc393786533}{\*\bkmkend _Toc393852552}
{\*\bkmkend _Toc393873692}{\*\bkmkend _Toc393875677}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
This is a clear case where the MEC method is better: there is a fairly small class of roots which exceptionally take the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ts\_}{\insrsid1444013  form of the Potential aspect.}{
\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 These roots could be made into a morpheme class and then 
handled by an MEC as discussed in that section.  The difference between a morpheme class and a property is that each morphname must be added to the class definition in the Analysis Data File for a morpheme class,. whereas with a property, only the propert
y
 is defined in the Analysis Data File and then it is marked in the dictionary entry itself.  In general, morpheme classes are smaller than the classes marked with a property, but the boundaries between the two are somewhat hazy and either method is possib
le.}}}{\insrsid1444013   Each one can be marked with the morpheme property }{\f2\fs22\insrsid1444013 takes.ts.POT}{\insrsid1444013 
 just like in the root dictionary entry given for the test method above.  Then we simply need to add MECs to the allomorphs of the Potential aspect prefix to assure the same results as version 3 of the test above.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Prefix dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\p g\line \\
a 0    +/ Imp _ open    +/ Imp _ give\line \\a g    / _[V]   / _[SV]\tab \tab +/ ~_ \{takes.ts.POT\}\line \\a y    / _[C]\tab \tab \tab \tab +/ ~_ \{takes.ts.POT\}\line \\a ts       \tab \tab \tab \tab \tab +/  _ \{takes.ts.POT\}\line \\g P\line \\
c VCA/V VA/V ADJ/V\line \\o -30
\par }\pard\plain \ql \li0\ri0\sb240\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The exceptional behavior of this allom
orph of the Potential aspect is now captured locally within its dictionary entry, rather than being a test in the Analysis Data File which should cover broader generalizations about the language.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain 
\s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  Note that the name of property }{\f2\insrsid6688044 
takes.ts.POT}{\insrsid6688044  itself has a specific, exceptional nature to it, in contrast to the names of the properties used for the more general processes such as }{\f2\insrsid6688044 neutralizes}{\insrsid6688044  or }{\f2\insrsid6688044 
reduced.stress}{\insrsid6688044 .}}}{\insrsid1444013 
\par {\*\bkmkstart _Toc393786534}{\*\bkmkstart _Toc393852553}{\*\bkmkstart _Toc393873693}{\*\bkmkstart _Toc393875678}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.5\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Two contrastive properties instead of one exceptional property\line 
\tab \tab (Axininca Campa possessive allomorphy){\*\bkmkstart axinincaPossessive}{\*\bkmkend _Toc393786534}{\*\bkmkend _Toc393852553}{\*\bkmkend _Toc393873693}{\*\bkmkend _Toc393875678}{\*\bkmkend axinincaPossessive}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Next, let\rquote 
s consider how to handle the allomorphy of the Axininca Campa possessive marker (data from Payne 1981).  The data shown in (}{\field{\*\fldinst {\insrsid1444013  seq nx x47 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 49}}}{\insrsid1444013 
) is quite puzzling.
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx3240\tx5040\tx6840\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x47}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 49}}}{\v\insrsid1444013 x47}{\insrsid1444013 {\*\bkmkend x47})\tab a.\tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 no-mii-ni}{\insrsid1444013 \tab 
\lquote my otter\rquote \tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 no-maini-ti}{\insrsid1444013 \tab \lquote my bear\rquote \line \tab 1-otter-}{\caps\insrsid1444013 pos}{\scaps\insrsid1444013 \tab \tab }{\insrsid1444013 1-bear-}{
\caps\insrsid1444013 pos}{\scaps\insrsid1444013 \line }{\insrsid1444013 \line b.\tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n-iNki-ni}{\insrsid1444013 \tab \lquote my peanut\rquote \tab }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 n-iposi-ti}{\insrsid1444013 \tab \lquote my fish\rquote \line \tab 1-peanut-}{\caps\insrsid1444013 pos}{\scaps\insrsid1444013 \tab \tab }{\insrsid1444013 1-fish-}{\caps\insrsid1444013 pos}{
\scaps\insrsid1444013 \line }{\insrsid1444013 \line c.\tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 no-ts}{\cs69\i\f38\fs22\lang1024\langfe1024\super\noproof\insrsid1444013 h}{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 imi-ni}{\insrsid1444013 \tab \lquote my water hole\rquote \tab }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 no-ts}{
\cs69\i\f38\fs22\lang1024\langfe1024\super\noproof\insrsid1444013 h}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 imii-ti}{\insrsid1444013 \tab \lquote my ant\rquote \line \tab 1-water.hole-}{\caps\insrsid1444013 pos}{\scaps\insrsid1444013 
\tab \tab }{\insrsid1444013 1-ant-}{\caps\insrsid1444013 pos}{\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The pattern turns out to be that the number of
 vowels in the root determines which allomorph of the POSsessive morpheme is used.  To account for this, we can mark the roots with the morpheme properties of either }{\f2\fs22\insrsid1444013 short}{\insrsid1444013  or }{\f2\fs22\insrsid1444013 long.}{
\insrsid1444013   Note that it is not clear whether }{\cs109\f2\fs22\insrsid1444013 short}{\insrsid1444013  or }{\cs109\f2\fs22\insrsid1444013 long}{\insrsid1444013  is the default case.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Root dictionary:\line }{\cs109\f2\fs22\insrsid1444013 \\r mii\line \\a mii
\line \\c N\line \\g otter\line \\mp short\line \line \\r maini\line \\a maini\line \\c N\line \\g bear\line \\mp long\tab \tab \tab \tab etc.
\par {\*\bkmkstart _Toc393873694}{\*\bkmkstart _Toc393875679}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.5.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The MEC Method{\*\bkmkend _Toc393873694}{\*\bkmkend _Toc393875679}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The property MEC solution simply adds MECs to each of the allomorphs of the possessive suffix:

\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Suffix dictionary for MEC solution:\line }{\cs109\f2\fs22\insrsid1444013 \\
s ni\line \\a ni\tab \tab +/ \{short\} _\line \\a ti\tab \tab +/ \{long\} _\line \\c N/N\line \\g POS
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note that since we have two contrastive properties, both MECs are \'93positive\'94
 (i.e. do not contain any negation).  Two MECs are still required, however, to fully constrain the allomorphy.
\par {\*\bkmkstart _Toc393873695}{\*\bkmkstart _Toc393875680}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.5.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Test Method{\*\bkmkend _Toc393873695}{\*\bkmkend _Toc393875680}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 For the test method, we need to add allomorph properties of }{\f2\fs22\insrsid1444013 
takes.short}{\insrsid1444013  and }{\f2\fs22\insrsid1444013 takes.long}{\insrsid1444013  appropriately and then write a test and add it to the Analysis Data file under the suffix tests.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Suffix dictionary for test solution:\line }{
\cs109\f2\fs22\insrsid1444013 \\s ni\line \\a ni\tab \tab takes.short\line \\a ti\tab \tab takes.long\line \\c N/N\line \\g POS
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 
\par \\st POSSESSIVE_ST\line IF   (current morphname is POS)\line THEN (    (    (left    property is short)\line            IFF (current property is takes.short)\line           )\line       AND (    (left    property is long)\line 
           IFF (current property is takes.long)\line           )\line      )
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 This successor test says that if the }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 
 position pointer is on the suffix whose morphname is }{\scaps\insrsid1444013 pos, }{\insrsid1444013 then the property of the root will be }{\f2\fs22\insrsid1444013 short}{\insrsid1444013  only when the allomorph of the suffix has the property }{
\f2\fs22\insrsid1444013 takes.short}{\insrsid1444013 , and the property of the root will be }{\f2\fs22\insrsid1444013 long}{\insrsid1444013  only when the allomorph of the suffix has the property }{\f2\fs22\insrsid1444013 takes.long}{\insrsid1444013 .

\par {\*\bkmkstart _Toc393786535}{\*\bkmkstart _Toc393852554}{\*\bkmkstart _Toc393873696}{\*\bkmkstart _Toc393875681}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.6\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Affix allomorphy tied to property of a root, with possible compound
\line \tab \tab roots (Isthmus Zapotec aspect markers){\*\bkmkstart isthmusZapotecAspect}{\*\bkmkend _Toc393786535}{\*\bkmkend _Toc393852554}{\*\bkmkend _Toc393873696}{\*\bkmkend _Toc393875681}{\*\bkmkend isthmusZapotecAspect}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 In Isthmus Zapotec, the aspect markers have different 
forms depending upon the class of the verb they attach to (data from Randy Regnier, p.c.).  The Potential aspect has the most complex allomorphy, so it is handled by its own test, not included in this discussion.
\par {\*\bkmkstart _Toc393873697}{\*\bkmkstart _Toc393875682}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.6.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The Test Method{\*\bkmkend _Toc393873697}{\*\bkmkend _Toc393875682}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The following root successo
r test was written to make sure that the aspect allomorph and the verb classes are matched in all the other aspects:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keep\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt }{\f2\fs22\insrsid1444013 ASPECT-VERB_ST\line 
IF   (    (FOR_SOME_LEFT (LEFT morphname is member\line                                ASPECT-WO-P)\line           )\line       AND (left type is prefix)\line       AND (   (current fromcategory is VA)\line            OR (current fromcategory is VCA)
\line           )\line      )\line THEN (    (    (LEFT property is +2)\line            IFF (current property is 2)\line           )\line       AND (    (LEFT property is +1A)\line            IFF (current property is 1A)\line           )\line 
      AND (    (LEFT property is +1C)\line            IFF (current property is 1C)\line           )\line       AND (    (LEFT property is +1BC)\line            IFF (current property is 1BC)\line           )\line       AND (    (LEFT property is +1B)\line 
           IFF (current property is 1B)\line           )\line       AND (    (LEFT property is +1AC)\line            IFF (current property is 1AC)\line           )\line      )
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Let\rquote 
s begin by looking at the THEN part of the test.  It basically says (six times) that the aspect marker (pointed to by }{\cs109\f2\fs22\insrsid1444013 LEFT}{\insrsid1444013 ) which has the property }{\f2\fs22\insrsid1444013 +class.number}{\insrsid1444013 
 must be on a verb root (}{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013 ) which has the property }{\f2\fs22\insrsid1444013 class.number}{\insrsid1444013 
.  Splitting the single test into six separate ones would have the same effect, since all tests are treated as if the
y are logically ANDed together.  This required matching of the correct allomorph of the aspect marker for the particular verb class could be easily handled by property MECs on the aspect allomorphs of the form:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\a }{\f2\fs22\insrsid1444013 allomorph +/ _ ... \{class.number
\}
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\insrsid1444013 except}{\insrsid1444013  f
or the case of compound roots.  Only the first root must match in class with the aspect marker, and the ellipses needed in the MEC to allow for other prefixes could incorrectly allow an intervening root with a different class number to be skipped over.  T
he other roots in a compound will be marked with their verb class, since they can occur alone or in first position of a compound as well.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The IF part of the above test makes sure that the root being matched with the aspect prefix is the first root.  It says
 that the matching required by the THEN part of the test only holds when: (a) there is an aspect marker which is a member of the correct morpheme class somewhere to the }{\cs109\f2\fs22\insrsid1444013 LEFT}{\insrsid1444013  of the }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  position pointer; (b) the morpheme directly to the left is of the type }{\f2\fs22\insrsid1444013 prefix}{\insrsid1444013  which, coupled with the fact that this is a root test, assures us that the }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  position pointer is on the first root; and (c) that root has either fromcategory VA or VCA, which means it is the type that takes aspect only , or it can have a c
ausative in addition to requiring aspect.  It is this ability to pinpoint the exact situation where a condition holds that gives the test power that the simple MECs do not have.
\par {\*\bkmkstart _Toc393873698}{\*\bkmkstart _Toc393875683}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.6.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The MEC Method{\*\bkmkend _Toc393873698}{\*\bkmkend _Toc393875683}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 It is possible to constrain the allomorphs of the aspect marker
s with two MECs each, however, to insure that only the class number of the first root is being constrained.  One MEC is needed to account for the case where there are multiple prefixes: it says that the aspect prefix must occur before zero or more other p
refixes, then a morpheme of type }{\cs109\f2\fs22\insrsid1444013 prefix}{\insrsid1444013  then a morpheme which has the property }{\cs109\f2\fs22\insrsid1444013 class.number}{\insrsid1444013 
.  This morpheme marked with the property must be a root simply because only roots will have that property and it must be the first root since it is required to follow a morpheme of type }{\cs109\f2\fs22\insrsid1444013 prefix}{\insrsid1444013 
.  The second MEC takes care of the case where the aspect prefix is directly to the left of the root.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\a allo +/_...\{prefix\}\{class.number\}   +/_ \{class.number
\}
\par {\*\bkmkstart _Toc393786536}{\*\bkmkstart _Toc393852555}{\*\bkmkstart _Toc393873699}{\*\bkmkstart _Toc393875684}{\listtext\pard\plain\s4 \b\scaps\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.7\tab}}\pard\plain 
\s4\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl3\outlinelevel3\rin0\lin0\itap0 \b\scaps\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Cases where MECs or MCCs alone will not do{\*\bkmkend _Toc393786536}
{\*\bkmkend _Toc393852555}{\*\bkmkend _Toc393873699}{\*\bkmkend _Toc393875684}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Up to this point, we have 
seen examples of phenomena that can be handled by either simple MECs or by writing a test in the Analysis Data File.  Some of these were better accounted for via one or the other method for linguistic reasons, and we saw that there are also computational 
c
onsiderations for choosing the test method.  At the same time, many users find the simplicity of the MEC method a strong point in its favor.  The next two examples illustrate more complex cases which cannot be accounted for using the property MEC method a
lone, although another alternative is suggested for the first case.
\par {\*\bkmkstart _Toc393786537}{\*\bkmkstart _Toc393852556}{\*\bkmkstart _Toc393873700}{\*\bkmkstart _Toc393875685}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.7.1\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Optional Affixation (Isthmus Zapotec Adjectives with Aspect)
{\*\bkmkstart isthmusZapotecAdjectives}{\*\bkmkend _Toc393786537}{\*\bkmkend _Toc393852556}{\*\bkmkend _Toc393873700}{\*\bkmkend _Toc393875685}{\*\bkmkend isthmusZapotecAdjectives}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The first example is that some, but not all, of the adjectives in Isthmus Zapotec can take aspect markers.  If these adjectives always required an aspect marker, we could use an MEC (or MCC) to require such a root to follow a member of the morpheme class 
}{\f2\fs22\insrsid1444013 aspect}{\insrsid1444013 :
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs22\insrsid1444013 +\\ [aspect] _}{\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Though these adjectives may take aspect markers, however, they are not required to have any aspect marker present.  Such a case of optionality cannot be handled solely via MECs or MCCs: both MECs and MCCs specify requirements.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Further, we want to rule out the 0 allomorph of the Potential aspect from being chosen as being present on any adjectives.  The following root successor test was written for this situation:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\rt }{\f2\fs22\insrsid1444013 ASPECT+ADJ_ST\line 
IF   (    (current fromcategory is Adj)\line       AND (left morphname is member [aspect])\line      )\line THEN (        (current property is +aspect)\line       AND NOT (left allomorph is 0)\line      )
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The 
IF part of this test is similar to the test above in that it is finding the specific situation where the test applies and ruling out cases where the adjective is the non-initial root in a compound.  The requirements are: (a) the root pointed to by }{
\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  must have the fromcategory }{\cs109\f2\fs22\insrsid1444013 Adj}{\insrsid1444013 ; and (b) the }{\cs109\f2\fs22\insrsid1444013 left }{\insrsid1444013 morpheme must be a member of the morpheme class }{
\f2\fs22\insrsid1444013 [aspect]}{\insrsid1444013  (this will always be a prefix so we know that the adjective is the first root in this case).
\par Given an adjective as the first root in a word with an aspect prefix present, THEN that adjective root which is pointed to by }{\cs109\f2\fs22\insrsid1444013 current}{\insrsid1444013  must have the property }{\f2\fs22\insrsid1444013 +aspect}{
\insrsid1444013  (which says it is one which can have an aspect prefix), and the aspect allomorph pointed to by }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013  cannot be the 0 allomorph.
\par There is an alternati
ve solution to this scenario which would not require a separate user-written test.  We can augment the category system a bit instead.  We would divide the adjectives into those which can take aspect and those which never do.  Those which never take aspect
 simply have category }{\f2\fs22\insrsid1444013 Adj}{\insrsid1444013  as before, but those which can take aspect have two categories: }{\f2\fs22\insrsid1444013 Adj}{\insrsid1444013  and }{\f2\fs22\insrsid1444013 AdjA}{\insrsid1444013 
.  The aspect markers which can go on adjectives then need to have the category mapping }{\f2\fs22\insrsid1444013 AdjA/Adj}{\insrsid1444013  in addition to }{\f2\fs22\insrsid1444013 VA/V}{\insrsid1444013  and }{\f2\fs22\insrsid1444013 VCA/V}{
\insrsid1444013  needed for verbs.  The regular category mapping tests now assure that aspect markers can only go on those adjectives that have the proper category to allow aspect: }{\f2\fs22\insrsid1444013 AdjA}{\insrsid1444013 .
\par The final part of the user-written test above (which eliminates the possibility of the null allomorph of the Potential aspect prefix occurring with adjectives) can be replaced by an MEC on that allomorph using the }{\f2\fs22\insrsid1444013 AdjA}{
\insrsid1444013  category instead of a property:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\a 0\tab +/ ~_ \{AdjA\}
\par {\*\bkmkstart _Toc393786538}{\*\bkmkstart _Toc393852557}{\*\bkmkstart _Toc393873701}{\*\bkmkstart _Toc393875686}{\listtext\pard\plain\s5 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.7.3.7.2\tab}}\pard\plain 
\s5\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl4\outlinelevel4\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Identification of Non-contiguous Morphemes (Yal\'e1lag Zapotec Imperatives)
{\*\bkmkstart yalalagZapotecImperatives}{\*\bkmkend _Toc393786538}{\*\bkmkend _Toc393852557}{\*\bkmkend _Toc393873701}{\*\bkmkend _Toc393875686}{\*\bkmkend yalalagZapotecImperatives}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The final example is from a different variety of Zapotec, Yal\'e1
lag Zapotec.  In implementing the verbal system for this language, we found that we were getting parses for forms like the one in (}{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{
\insrsid1444013 ).}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{
\insrsid6688044  The abbreviations used in the Yal\'e1lag Zapotec glosses are: Imp.Pl = imperative plural;  P = potential aspect; 3r = third person, respect bound pronoun; and & = an epenthetic-like vowel augment.  The data is from Ron Newberg, p.c. and L
\'f3pez and Newberg 1990.}}}{\insrsid1444013 
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx1620\tx2610\tx2970\tx3870\tx4410\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab }{
\lang3082\langfe1033\langnp3082\insrsid1444013 {\*\bkmkstart x81}(}{\field{\*\fldinst {\lang3082\langfe1033\langnp3082\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\langnp3082\insrsid14046460 50}}}{
\v\lang3082\langfe1033\langnp3082\insrsid1444013 x81}{\lang3082\langfe1033\langnp3082\insrsid1444013 {\*\bkmkend x81})\tab \tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 lekwe'e}{\lang3082\langfe1033\langnp3082\insrsid1444013 \line 
a.\tab }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 :le-\tab 0-\tab :kwe'\tab -e\line \tab Imp.Pl-\tab P-\tab sit\tab -3r
\par }\pard \s97\ql \fi-1080\li1080\ri0\sb120\keep\keepn\widctlpar\tqr\tx864\tx1620\tx2610\tx2970\tx3870\tx4410\nooverflow\faroman\rin0\lin1080\itap0 {\lang3082\langfe1033\langnp3082\insrsid1444013 \tab \tab b.\tab }{
\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 :le-\tab :-\tab kwe\tab -'e\line \tab Imp.Pl-\tab P-\tab choose\tab -3r}{\lang3082\langfe1033\langnp3082\insrsid1444013 
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note that there is an imperative prefix and a pronominal suffix for both analyses (}
{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{\insrsid1444013 a-b).  Zapotec allows an imperative to have an object pronominal suffix only when one of three conditions are met:
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\sb120\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}
\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {\insrsid1444013 The verb is transitive.
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {
\insrsid1444013 The verb is bi-transitive.
\par {\pntext\pard\plain\s22 \f3\insrsid1444013 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s22\ql \fi360\li0\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent-360 {\pntxtb \'b7}}\nooverflow\faroman\ls2\rin0\lin0\itap0\pararsid14369330 {
\insrsid1444013 The verb contains a causative prefix.
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The problem in (}{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 50}}}{\insrsid1444013 a), of course, is that the verb root is intransitive, so the parse in (}{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{
\insrsid1444013 a) is incorrect.  The verb root in (}{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{\insrsid1444013 b), on the other hand, is transitive, so the parse in (}
{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{\insrsid1444013 b) is a correct analysis.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
What can we do to eliminate this incorrect parse?  We cannot use the verb valence idea discussed for Quechua in section }{\field{\*\fldinst {\insrsid1444013  REF _Ref392991119 \\n }}{\fldrslt {\insrsid14046460 3.4.2}}}{\insrsid1444013 
 because Zapotec verbal morphology does not require any verbal argument markers (i.e. it does not require a pronominal \'93agreement\'94
 affix to be present for subjects or objects when the subject or object is represented by a separate noun phrase).  We chose 
to tag each verb root according to whether it is intransitive, transitive or bitransitive by means of the following three morpheme properties: }{\cs109\f2\fs22\insrsid1444013 vi}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 vt}{\insrsid1444013 , and 
}{\cs109\f2\fs22\insrsid1444013 vbt}{\insrsid1444013  (these turned out to be useful for other constraints as well).
\par Now that we have each verb tagged 
according to its transitivity, how do we constrain the use of pronominal suffixes with the imperative prefixes?  Instead of trying to write MECs on a particular allomorph of the Imperative Plural morpheme shown in the data, we can try a more general MCC, 
since the restriction is true of all imperative prefixes combined with all pronoun suffixes.  What would happen if we wrote an MCC like this (assuming, of course, that we were careful to appropriately create the morpheme classes of }{
\cs109\f2\fs22\insrsid1444013 Imperative}{\insrsid1444013  and }{\cs109\f2\fs22\insrsid1444013 Pronoun)}{\insrsid1444013 :
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\mcc [Imperative] +/ _ ... \{vt\} [Pronoun]
\par                   +/ _ ... \{vbt\} [Pronoun]
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013                   +/ _ ... Caus ... [Pronoun]
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 This MCC says that a member of the morpheme class }{\cs109\f2\fs22\insrsid1444013 Imperative}{
\insrsid1444013  must co-occur with either a transitive verb followed by a pronoun OR with a bitransitive verb followed by a pronoun OR with the causative morpheme and a pronoun.  This would indeed eliminate parse (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{\insrsid1444013 a) while allowing analysis (}{\field{\*\fldinst {\insrsid1444013  seq nx x81 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 50}}}{\insrsid1444013 
b).  But what will this MCC do for a legitimate form like the one in (}{\field{\*\fldinst {\insrsid1444013  seq nx x82 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 51}}}{\insrsid1444013 )?
\par }\pard\plain \s97\ql \fi-1080\li1080\ri0\sb60\keep\keepn\widctlpar\tqr\tx864\tx2160\tx2610\tx3330\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab }{
\lang3082\langfe1033\langnp3082\insrsid1444013 {\*\bkmkstart x82}(}{\field{\*\fldinst {\lang3082\langfe1033\langnp3082\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\langnp3082\insrsid14046460 51}}}{
\v\lang3082\langfe1033\langnp3082\insrsid1444013 x82}{\lang3082\langfe1033\langnp3082\insrsid1444013 {\*\bkmkend x82})\tab }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 lewxhonnje\line }{
\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 :le-\tab kw-\tab xo:nj\tab -e\line Imp.Pl-\tab P-\tab flee\tab -&
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The root is tagged with the morpheme property }{\cs109\f2\fs22\insrsid1444013 vi}{\insrsid1444013 
, so it is considered to be an intransitive verb.  The MCC will cause this licit parse to fail because there is neither a }{\cs109\f2\fs22\insrsid1444013 Caus}{\insrsid1444013 
 morpheme nor an object pronoun present.  Further, a transitive or bitransitive verb form or a verb marked with the }{\cs109\f2\fs22\insrsid1444013 Caus}{\insrsid1444013 
 morpheme will also fail incorrectly if they have a noun phrase object instead of a pronominal one.  Thus, the MCC is too strong.  What can we do to fix the MCC?  Nothing.  We simply cannot use the MCC notation to deal with this kind of a problem.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 What we need is a way to condition a constraint on the presence of }{\b\insrsid1444013 both}{
\insrsid1444013  an imperative prefix and a pronominal suffix.  The MCC s
yntax simply does not have any way for us to express such a condition.  Tests, however, do.  Perhaps you have already realized that we need to use an IF...THEN construction such as the following:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri364\sb60\widctlpar\tx1800\nooverflow\faroman\rin364\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\st}{\f2\fs22\insrsid1444013 _IMPERATIVE_ST\line 
IF   (    (current morphname is member [Pronoun]\line       AND (INITIAL morphname is member [Imperative])\line      )\line THEN (FOR_SOME_LEFT (   (LEFT property is vt)\line                      OR (LEFT property is vbt)\line 
                     OR (LEFT morphname is Caus)\line                     )\line      )
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The test can be a 
suffix successor test because as soon as we find a pronominal suffix, everything else we need to check is earlier in the word.  The IF clause checks to see if we have a pronominal suffix }{\b\insrsid1444013 and}{\insrsid1444013 
 an imperative prefix (which just happens to always be word initia
l).  If we do, THEN we must have one of the three conditions outlined above: a transitive verb root, a bitransitive verb root or the causative morpheme.  Note the use of the FOR_SOME_LEFT construct in the THEN clause to scan to the left for the verb root 
or the causative prefix; we could not merely use the }{\cs109\f2\fs22\insrsid1444013 left}{\insrsid1444013  position pointer to find the root because adverbial suffixes may intervene between the root and the pronominal suffix.}{\cs25\super\insrsid1444013 
\chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  Instead of the }{
\f2\fs16\insrsid6688044 (INITIAL morphname is member [Imperative])}{\insrsid6688044  predicate, we could have used\line \tab }{\cs109\f2\fs16\insrsid6688044 (FOR_SOME_LEFT (LEFT morphname is member [Imperative]))}{\insrsid6688044 
\par This will indeed work, even though it causes AMPLE to give an error message (the test contains more than one leftward iteration).  Such dual iterations are legitimate if one is the IF clause and the other is in the THEN clause.}}}{\insrsid1444013 
\par {\*\bkmkstart _Toc393786539}{\*\bkmkstart _Toc393852558}{\*\bkmkstart _Toc393873702}{\*\bkmkstart _Toc393875687}{\listtext\pard\plain\s1 \b\scaps\fs32\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard\plain 
\s1\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\outlinelevel0\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 DEALING WITH TONE{\*\bkmkstart tone}{\*\bkmkend _Toc393786539}
{\*\bkmkend _Toc393852558}{\*\bkmkend _Toc393873702}{\*\bkmkend _Toc393875687}{\*\bkmkend tone}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 In this final section, we consider various issues relating to
 modeling tonal languages.  First, what one writes for tonal languages varies significantly:}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  For a much more thorough and interesting discussion of orthographic issues in tonal languages, see Bird 1996.}}}{\insrsid1444013 
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard\plain \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls5\rin720\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Some simply do not write the tone (as in Zapotec and many Mixtec languages).  The assumption or experience is that context will disambiguate any tone-oriented ambiguities.
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls5\rin720\lin1080\itap0\pararsid14369330 {\insrsid1444013 
Some only mark tone when it is needed to disambiguate lexical items.  Any kind of diacritic mark may be used, not just typical tone diacritics (such as accent marks over vowels or raised numbers after syllables).
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls5\rin720\lin1080\itap0\pararsid14369330 {\insrsid1444013 In some situations, there are ton
e rules, but they are so straightforward and internalized by speakers of the language that one only needs to write underlying tone.  That is, tone is treated like any other phonemic segment.
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls5\rin720\lin1080\itap0\pararsid14369330 {\insrsid1444013 In other situations, the tone rules are not so straightforward so some choose to write surface tone.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
What do we need to do in order to have a morphological parsing program deal with each of these four scenarios?
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard\plain \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin720\lin1080\itap0\pararsid14369330 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 If tone is not marked at all orthographically, then there is nothing special to do.
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin720\lin1080\itap0\pararsid14369330 {\insrsid1444013 If tone markings are only
 used to distinguish otherwise ambiguous lexical items, then we can treat the tone markings just like any other segment.  Again, there is nothing very special to do.
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin720\lin1080\itap0\pararsid14369330 {\insrsid1444013 If only underlying tone is marked, then we can treat the tone markings just like any other segment.
\par {\pntext\pard\plain\s81 \insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \s81\ql \fi-360\li1080\ri720\sb60\widctlpar{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin720\lin1080\itap0\pararsid14369330 {\insrsid1444013 If surface tone is written and it is a result of a set of perhaps complex tone rules, then we are going to have to try and model the tone rules in some fashion.
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Since the first two cases require no further comment, we will focus on the last two.
\par {\*\bkmkstart _Toc393786540}{\*\bkmkstart _Toc393852559}{\*\bkmkstart _Toc393873703}{\*\bkmkstart _Toc393875688}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.1\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 UNDERLYING TONE IS MARKED{\*\bkmkstart toneUnderlyingIsMarked}
{\*\bkmkend _Toc393786540}{\*\bkmkend _Toc393852559}{\*\bkmkend _Toc393873703}{\*\bkmkend _Toc393875688}{\*\bkmkend toneUnderlyingIsMarked}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
When underlying tone is marked and there is no grammatical tone operative in the language (i.e. there are no morphemes that consist merely of one or more tones), then there is nothing special to do.  Merely enter the allomorphs in
 the dictionary as they appear in the orthography.
\par When there is grammatical tone, on the other hand, it is not so straightforward.  As an example of marking underlying tone where there is grammatical tone, suppose you have the following Mixtec-like data}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 While the forms are actually hypothetical, many Mixtec languages have forms similar to these.}}}{\insrsid1444013  ( \'b4= high tone, ` = low tone, and mid tone is unmarked):
\par }\pard\plain \s59\ql \fi-1080\li1080\ri0\sb60\keep\widctlpar\tqr\tx864\tx1440\tx2430\tx6235\nooverflow\faroman\rin0\lin1080\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x85}(}{\field{\*\fldinst {
\insrsid1444013  seq nx }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 52}}}{\v\insrsid1444013 x85}{\insrsid1444013 {\*\bkmkend x85})\tab a.\tab }{\cs106\b\i\f36\fs22\lang1024\langfe1024\noproof\insrsid1444013 \'70}{
\b\i\f36\fs22\insrsid1444013 \'a1}{\cs106\b\i\f36\fs22\lang1024\langfe1024\noproof\insrsid1444013 \'74\'61}{\insrsid1444013 \tab \lquote go, continuous aspect\rquote \line b.\tab }{\cs106\b\i\f36\fs22\lang1024\langfe1024\noproof\insrsid1444013 \'70}{
\b\i\f36\fs22\insrsid1444013 \'8d}{\cs106\b\i\f36\fs22\lang1024\langfe1024\noproof\insrsid1444013 \'74\'61}{\insrsid1444013 \tab \lquote go, completive aspect\rquote \line c.\tab }{\cs106\b\i\f36\fs22\lang1024\langfe1024\noproof\insrsid1444013 \'70\'69
\'74\'61}{\insrsid1444013 \tab \lquote go, perfective aspect\rquote 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note that the only difference between these three forms is the tone on the first sy
llable.  Continuous aspect has a high tone, completive has a low tone, and perfective has an unmarked mid tone.  We can posit that the verb root is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 pita}{\insrsid1444013 
 with two (unmarked) mid tones underlyingly.  Given what you already know about controlling AMPLE, what could one do to get AMPLE to analyze these forms?  There are at least three possibilities:
\par {\*\bkmkstart _Toc393873704}{\*\bkmkstart _Toc393875689}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.1.1\tab}}\pard\plain \s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 
\b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TONE AS SUPPLETION METHOD{\*\bkmkend _Toc393873704}{\*\bkmkend _Toc393875689}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
We could create separate root entries for each aspect-root combination.  We would thus write three root entries like the following (where we use the }{\cs109\f2\fs22\insrsid1444013 \\r}{\insrsid1444013  field for an underlying form):
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\r \'b4-pita\tab \tab 
\tab \tab \\r `-pita\tab \tab \tab \tab \\r \'af-pita
\par \\a p\'edta\tab \tab \tab \tab \tab \\a p\'ecta\tab \tab \tab \tab \tab \\a pita
\par }{\cs109\f2\fs22\insrsid1444013 \\g Cont.go\tab \tab \tab \tab \\g Comp.go\tab \tab \tab \tab \\g Perf.go
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\sa120\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\c V\tab \tab \tab \tab \tab \\c V\tab \tab \tab \tab \tab \tab \\c V
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 This method of making a separate morpheme for each aspect-root combination will g
reatly increase the size of the root dictionary.  More importantly, it misses the generalization that the aspect markers are tonal morphemes.  The dictionary entries imply that the various aspectual forms of the verb are suppletive just like }{
\i\insrsid1444013 am}{\insrsid1444013  and }{\i\insrsid1444013 was}{\insrsid1444013  are in English.  Since this is clearly not the case, this solution is to be avoided.
\par {\*\bkmkstart _Toc393786541}{\*\bkmkstart _Toc393852560}{\*\bkmkstart _Toc393873705}{\*\bkmkstart _Toc393875690}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.1.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TONE AS ALLOMORPHY METHOD{\*\bkmkstart toneAllomorphyMethod}
{\*\bkmkend _Toc393786541}{\*\bkmkend _Toc393852560}{\*\bkmkend _Toc393873705}{\*\bkmkend _Toc393875690}{\*\bkmkend toneAllomorphyMethod}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
The basic idea in this approach is to treat the grammatical tones as allomorphs.  We could write the allomorphs of the root dictionary entry as:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a p\'edta  +/ Cont _

\par \\a p\'ecta  +/ Comp _
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a pita  +/ Perf _}{\lang3082\langfe1033\langnp3082\insrsid1444013 
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 where }{\cs109\f2\fs22\insrsid1444013 Cont}{\insrsid1444013 , }{\cs109\f2\fs22\insrsid1444013 Comp}{
\insrsid1444013 , and }{\cs109\f2\fs22\insrsid1444013 Perf}{\insrsid1444013  are the morphnames for the continuous, completive, and perfective aspect prefixes, respectively.  These prefixes would all have a null allomorph and could be written like the 
following:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\p \'b4\tab | underlying high tone
\par \\a 0   / # _
\par \\g Cont
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\sa120\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\c VA/V
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\p `\tab | underlying low tone
\par }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a 0   / # _
\par \\g Comp
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\sa120\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\c VA/V
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\p \'af\tab | underlying mid tone
\par }{\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\a 0   / # _
\par \\g Perf
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 \\c VA/V
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Since all of these are nulls, we would need to try and constrain them effect
ively.  This is the intent of the \'93must be word initial\'94 SECs and the }{\cs109\f2\fs22\insrsid1444013 VA/V}{\insrsid1444013  category mappings (where the verb would be of category }{\cs109\f2\fs22\insrsid1444013 VA}{\insrsid1444013 
 (verb requiring aspect) and any of these prefixes will \'93satisfy\'94 this aspectual obligation).
\par The allomorphy method has the advantage of explicitly noting the presence of the segmentally null aspect markers.
\par {\*\bkmkstart _Toc393786542}{\*\bkmkstart _Toc393852561}{\*\bkmkstart _Toc393873706}{\*\bkmkstart _Toc393875691}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.1.3\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TONE AS INFIX METHOD{\*\bkmkstart toneInfixMethod}{\*\bkmkend _Toc393786542}
{\*\bkmkend _Toc393852561}{\*\bkmkend _Toc393873706}{\*\bkmkend _Toc393875691}{\*\bkmkend toneInfixMethod}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
But can we do even better?  Is there some way to actually show that the aspect markers are tones themselves?  Note that for the allomorphy method above, the output of AMPLE will look like the following for (}{\field{\*\fldinst {\insrsid1444013 
 seq nx x85 }}{\fldrslt {\lang1024\langfe1024\noproof\insrsid14046460 52}}}{\insrsid1444013 a):
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 0-p\'edta
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 Cont-go
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 It would be better if it could look like this:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \'b4-pita
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 Cont-go
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Now we are explicitly showing that the continuous aspect consists of a high tone and that the verb \lquote go\rquote  has underlying mid tones.  How can we achieve this?
\par Note that in the desired output above we have separated the high tone from the vowel.  How could we do this automatically within AMPLE?  Recall that the TEXTIN module allows us to make orthographic chan
ges as a word is being found in a text.  Suppose we convert all instances of }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 \'ed}{\insrsid1444013  to a sequence of a high tone symbol followed by }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i}{\insrsid1444013 .  That is, we would add text orthography changes such as the following:
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\ch \'94i\'94  \'94\'afi\'94
\par \\ch \'94\'ed\'94  \'94\'b4i\'94
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\ch \'94\'ec\'94  \'94`i\'94
\par }\pard\plain \s49\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Thus, the word }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 p\'edta}{
\insrsid1444013  would become }{\cs109\f2\fs22\insrsid1444013 p\rquote ita}{\insrsid1444013  by the time ANALYSIS sees it.  Now how do we \'93pull out\'94 the high tone?  We can treat it as an infix:}{\cs25\super\insrsid1444013 \chftn {\footnote 
\pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 \fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044 
 This method is suggested and illustrated in Buseman 1993b:15-17.  To our knowledge, Alan Buseman was the first to suggest this method.}}}{\insrsid1444013 
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\keepn\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs109\f2\fs22\insrsid1444013 \\i \'b4\tab | underlying high tone
\par \\a \'b4
\par \\g Cont
\par \\loc root / # [C] _
\par }\pard \s83\ql \fi-1080\li1800\ri720\sb60\sa120\widctlpar\tx1800\nooverflow\faroman\rin720\lin1800\itap0 {\cs109\f2\fs22\insrsid1444013 \\c VA/V
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Now we do not have the problems with nulls (we just must be
 careful to write the infix location field correctly so that we only match the morpheme in the correct place).
\par {\*\bkmkstart _Toc393786543}{\*\bkmkstart _Toc393852562}{\*\bkmkstart _Toc393873707}{\*\bkmkstart _Toc393875692}{\listtext\pard\plain\s2 \b\fs28\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.2\tab}}\pard\plain 
\s2\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl1\outlinelevel1\rin0\lin0\itap0 \b\fs28\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 SURFACE TONE IS MARKED{\*\bkmkstart toneSurfaceIsMarked}
{\*\bkmkend _Toc393786543}{\*\bkmkend _Toc393852562}{\*\bkmkend _Toc393873707}{\*\bkmkend _Toc393875692}{\*\bkmkend toneSurfaceIsMarked}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
We now address the issue of what to do when surface tone is marked.  If there is very little tone perturbation, then one c
an expand the allomorphy idea outlined above to account for surface tone.  If, on the other hand, there is a great deal of tonal change, then one will want something better.
\par {\*\bkmkstart _Toc393786544}{\*\bkmkstart _Toc393852563}{\*\bkmkstart _Toc393873708}{\*\bkmkstart _Toc393875693}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.2.1\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TONE AS INFIX METHOD{\*\bkmkstart tonePatternMethod}
{\*\bkmkend _Toc393786544}{\*\bkmkend _Toc393852563}{\*\bkmkend _Toc393873708}{\*\bkmkend _Toc393875693}{\*\bkmkend tonePatternMethod}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 One possibility is to apply the tone-as-infix method to the s
urface tones.  The tonal allomorphy needs to be conditioned carefully.
\par {\*\bkmkstart _Toc393786545}{\*\bkmkstart _Toc393852564}{\*\bkmkstart _Toc393873709}{\*\bkmkstart _Toc393875694}{\listtext\pard\plain\s3 \b\insrsid1444013 \hich\af0\dbch\af0\loch\f0 4.2.2\tab}}\pard\plain 
\s3\ql \li0\ri0\sb160\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\ilvl2\outlinelevel2\rin0\lin0\itap0 \b\fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 TONE AS AUTOSEGMENT METHOD{\*\bkmkstart toneAutosegmentMethod}
{\*\bkmkend _Toc393786545}{\*\bkmkend _Toc393852564}{\*\bkmkend _Toc393873709}{\*\bkmkend _Toc393875694}{\*\bkmkend toneAutosegmentMethod}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
Another way to deal with surface tone is to inquire into the nature of what a tone is (after the fashion of Goldsmith 1976 and many others since then).  What 
are tones?  Are they features of a segment (as treated by Chomsky and Halle 1968)?  If so, why do they rarely ever show up on consonants and then only when the consonant is a syllabic nasal or another syllabic sonorant?  Tones are actually a property of t
he syllable.  Goldsmith\rquote s insight is that tones are not features of the segment, but rather are autosegments (\'93self-segments\'94
) that live on a distinct tier from the rest of the segments.  These autosegments do not attach to segments themselves, but to what 
are called Tone Bearing Units (TBUs).  A TBU may be considered to be a vowel or a syllable or a sub-constituent of the syllable called a mora.
\par These ideas can be illustrated by a discussion of the following forms from Tezoatl\'e1n Mixtec (Judith Williams, p.c.; }{\f36\fs22\insrsid1444013 \'e6}{\insrsid1444013 =high tone, }{\f36\fs22\insrsid1444013 \'c3}{\insrsid1444013 =mid tone, }{
\f36\fs22\insrsid1444013 \'85}{\insrsid1444013 =low tone; 3r =3rd person respect pronoun, 3a= 3rd person animate pronoun).  How could we analyze the tones on the clitic pronouns?
\par }\pard\plain \s112\ql \li288\ri-450\sa120\widctlpar\nooverflow\faroman\rin-450\lin288\itap0 \f2\fs22\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 \tab {\*\bkmkstart x93}(}{\field{\*\fldinst {\insrsid1444013  seq nx }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 53}}}{\v\insrsid1444013 x93}{\insrsid1444013 {\*\bkmkend x93})\tab }{\f0\fs24\insrsid1444013 \tab \tab \tab \tab \tab                3r\tab \tab              3a\tab \tab Clitic tones are:}{\f36\insrsid1444013 

\par }\pard \s112\ql \li288\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin288\itap0 {\f36\insrsid1444013 \tab \tab \tab \'31\'2e\'20\'61\'2e\'20}{\f0\fs24\insrsid1444013 \lquote lazy\rquote \tab \tab \tab }{\f36\insrsid1444013 \'64\'a3\'73\'e6\'20\'20\'6e\'e6
\tab \tab \'64\'a3\'73\'e6\'20\'20\'72\'a1\tab \tab }{\f0\fs24\insrsid1444013 both H
\par }{\f36\insrsid1444013 \tab \tab \tab \'20\'20\'20\'62\'2e\'20}{\f0\fs24\insrsid1444013 \lquote cast\rquote \tab \tab \tab }{\f36\insrsid1444013 \'74\'c3\'e6\'6e\'20\'20\'6e\'e6\tab \tab \'74\'c3\'e6\'6e\'20\'20\'72\'a1}{\f0\fs24\insrsid1444013  
\par }\pard \s112\ql \li288\ri0\sa240\widctlpar\nooverflow\faroman\rin0\lin288\itap0 {\f36\insrsid1444013 \tab \tab \tab \'20\'20\'20\'63\'2e\'20}{\f0\fs24\insrsid1444013 \lquote eat\rquote \tab \tab \tab }{\f36\insrsid1444013 \'71\'75\'ea\'a1\'20\'20\'6e\'e6
\tab \tab \'71\'75\'ea\'a1\'20\'20\'72\'a1
\par }\pard \s112\ql \li288\ri0\sa120\keepn\widctlpar\nooverflow\faroman\rin0\lin288\itap0 {\f36\insrsid1444013 \tab \tab \tab \'32\'2e\'20\'61\'2e\'20}{\f0\fs24\insrsid1444013 \lquote throw\rquote }{\f36\insrsid1444013 \tab \tab \'63\'c3\'74\'c3\'20\'20\'6e
\'85\tab \tab \'63\'c3\'74\'c3\'20\'20\'72\'8d\'20\tab \tab }{\f0\fs24\insrsid1444013 both L}{\f36\insrsid1444013 
\par }\pard \s112\ql \li288\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin288\itap0 {\f36\insrsid1444013 \tab \tab \tab \'20\'20\'20\'62\'2e\'20}{\f0\fs24\insrsid1444013 \lquote close\rquote \tab \tab }{\f36\insrsid1444013 \'63\'c3\'64\'8d\'20\'20\'6e\'85
\tab \tab \'63\'c3\'64\'8d\'20\'20\'72\'8d
\par \tab \tab \tab \'20\'20\'20\'63\'2e\'20}{\f0\fs24\insrsid1444013 \lquote tall\rquote \tab \tab \tab }{\f36\insrsid1444013 \'64\'e8\'6b\'a2\'20\'20\'6e\'85\tab \tab \'64\'e8\'6b\'a2\'20\'20\'72\'8d
\par }\pard \s112\ql \li288\ri0\sb120\sa120\keepn\widctlpar\nooverflow\faroman\rin0\lin288\itap0 {\f36\insrsid1444013 \tab \tab \tab \'33\'2e\'20\'61\'2e\'20}{\f0\fs24\insrsid1444013 \lquote different\rquote \tab \tab }{\f36\insrsid1444013 \'64\'a1\'e8\'6e\'20
\'20\'6e\'c3\tab \tab \'64\'a1\'e8\'6e\'20\'20\'72\'a1\tab \tab }{\f0\fs24\insrsid1444013 one M, one H}{\f36\insrsid1444013 
\par }\pard \s112\ql \li288\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin288\itap0 {\f36\insrsid1444013 \tab \tab \tab \'20\'20\'20\'62\'2e\'20}{\f0\fs24\insrsid1444013 \lquote drink\rquote \tab \tab }{\f36\insrsid1444013 \'63\'e9\'68\'e9\'20\'20\'6e\'c3
\tab \tab \'63\'e9\'68\'e9\'20\'20\'72\'a1
\par \tab \tab \tab \'20\'20\'20\'63\'2e\'20}{\f0\fs24\insrsid1444013 \lquote fulfill\rquote \tab \tab }{\f36\insrsid1444013 \'78\'8d\'6e\'e9\'20\'20\'6e\'c3\tab \tab \'78\'8d\'6e\'e9\'20\'20\'72\'a1
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 Note that in the first case of (}{\field{\*\fldinst {\insrsid1444013  seq nx x93 }}{\fldrslt {
\lang1024\langfe1024\noproof\insrsid14046460 53}}}{\insrsid1444013 ), both clitics have high tones and, in addition, each verb root ends in a high tone.  In the second case, both 
clitics have low tones even though the verb roots may end with either a high, mid, or low tone.  In the third case, the first clitic has a mid tone and the other clitic has a high tone while the verb roots all end with a mid tone.  How can treating tones 
as autosegments help us understand this data?
\par For case 1, where every verb ends in a high tone, we can posit that this final high tone \'93spreads\'94 onto the tone of the following clitic and replaces whatever tone the clitic had before.  Thus, the clitics follo
wing verbs of this case will have high tone.
\par For case 2, the final tone of the root is different in each case.  Suppose that there is a final floating low tone after the overt tone of the verb root.  Then this final floating low can also spread onto the to
ne of the following clitic, overriding whatever the tone of the clitic is.  Thus the clitics following verbs of this case will have low tone.
\par For case 3, the clitics differ in tone and every verb root ends in mid tone.  Suppose that mid tone is the default
 (and therefore unspecified) tone.  Thus, these verbs do not have a final tone to spread onto a following clitic.  No tone overrides the tone of the clitic, so the underlying tone of the clitic shows up in this case.  Hence, the two clitics can have disti
nct tones.
\par While this analysis may well help us understand what is happening with this data, how do we go about modeling it in AMPLE?  The analysis posits underlying tones and has a spreading rule that works from underlying to surface form.  What we have as
 input to AMPLE is the surface form.  In the general case, it could be pretty tricky to \'93invert\'94
 a set of rules and, more importantly, the linguist would have already done an analysis in terms of a derivation from underlying to surface form and not the reverse.
\par What we need then is to already have an analysis of the morphemes whereby we could then apply the rules in a derivational manner.  The TonePars program (Black 1996) provides such a thing.
\par The basic idea of the tone parsing scheme is to have AMPLE do a morphological parse of the input text, ignoring all tones.  That is, AMPLE reads the input file and converts all tone-marked segments to their toneless counterparts (e.g. }{
\i\f36\fs22\insrsid1444013 \'63\'c3\'64\'8d}{\insrsid1444013  would become }{\i\f36\fs22\insrsid1444013 \'63\'61\'64\'69}{\insrsid1444013 ) via an orthography change table.  Based on this segment-onl
y representation, AMPLE parses the word into its possible morphemes.  Because tone is ignored, the result may well be highly ambiguous.
\par The TonePars program reads the AMPLE analysis output file and augmented AMPLE dictionary files.  For each analysis posit
ed by AMPLE, it builds a model of the phonological word (segments, moras, syllables, and tone tiers).  It posits the underlying tones based on the appropriate dictionary entries and applies the user-defined tone rules to the tones.  After all the rules ha
ve applied, it creates a tone-marked form (e.g. it might be }{\i\f36\fs22\insrsid1444013 \'63\'c3\'64\'8d}{\insrsid1444013 
).  This tone-marked form is compared with the original form that the word had before AMPLE converted it to its segment-only form.  If the tone-marked form and the original form are the same, t
he analysis is passed on to the output.  If they are different, the analysis is assumed to be in error and is thrown away.  The output of TonePars is thus a disambiguated analysis output file.  See Black 1996 for further discussion of this tool.
\par {\*\bkmkstart _Toc393786546}{\*\bkmkstart _Toc393852565}{\*\bkmkstart _Toc393873710}{\*\bkmkstart _Toc393875695}{\listtext\pard\plain\s1 \b\scaps\fs32\insrsid1444013 \hich\af0\dbch\af0\loch\f0 5.\tab}}\pard\plain 
\s1\ql \li0\ri0\sb480\sa120\keep\keepn\nowidctlpar\nooverflow\faroman\ls1\outlinelevel0\rin0\lin0\itap0 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 CONCLUSION{\*\bkmkstart conclusion}{\*\bkmkend _Toc393786546}
{\*\bkmkend _Toc393852565}{\*\bkmkend _Toc393873710}{\*\bkmkend _Toc393875695}{\*\bkmkend conclusion}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 
AMPLE was designed with a lot of power and flexibility to allow it to handle the numerous phenomena encountered in natural languages efficiently and straightforwardly.  Though it might seem overwhelming to learn at first, it quickly becomes more of a chal
lenging \'93game\'94
 as each linguistic problem is dealt with in turn.  As the parser and dictionaries are built by parsing more and more data, success builds upon itself so that less and less work is required to fine-tune the various constraints.  The parser co
ntrol files and dictionaries themselves become a statement of your morphological analysis.}{\cs25\super\insrsid1444013 \chftn {\footnote \pard\plain \s32\ql \fi-144\li144\ri0\sb60\keep\nowidctlpar\nooverflow\faroman\rin0\lin144\itap0 
\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs25\super\insrsid6688044 \chftn }{\insrsid6688044  See Benton, Black, and Glaser 1996 for an example of how one might write up a morp
hological description of a language based on an AMPLE implementation.}}}{\insrsid1444013   
\par }\pard\plain \s110\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart _Toc393786547}
{\*\bkmkstart _Toc393852566}{\*\bkmkstart _Toc393873711}{\*\bkmkstart _Toc393875696}APPENDIX A: Answers to MCC Drills{\*\bkmkstart answersMccDrills}{\*\bkmkend _Toc393786547}{\*\bkmkend _Toc393852566}{\*\bkmkend _Toc393873711}{\*\bkmkend _Toc393875696}
{\*\bkmkend answersMccDrills}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\sa120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The following shows the MCC Drills of section }{\field{\*\fldinst {\insrsid1444013 
 REF _Ref393096610 \\n }}{\fldrslt {\insrsid14046460 3.4.3}}}{\insrsid1444013  and provides the expected answers.
\par }\pard\plain \ql \fi-432\li1440\ri0\sa240\keep\nowidctlpar\nooverflow\faroman\rin0\lin1440\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2\fs22\insrsid1444013 1.  A B C D\tab \tab \tab \tab \tab }{\cs109\f2\fs22\insrsid1444013 A}{
\insrsid1444013  must be immediately followed by }{\cs109\f2\fs22\insrsid1444013 B}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line *A C D\line *A D\tab \tab \tab \tab \tab \tab }{\cs109\f2\fs22\insrsid1444013 \\mcc A +/ _ B}{\f2\fs22\insrsid1444013 
\line  F A B\line  F A B D
\par 2.  A C D\tab \tab \tab \tab \tab }{\cs109\f2\fs22\insrsid1444013 A}{\insrsid1444013  must not be immediately followed by }{\cs109\f2\fs22\insrsid1444013 B}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line  A C B D\line *A B D\tab \tab \tab \tab \tab \\
mcc A +/ ~_ B\line *A B\line *F A B\line  F A D B
\par 3.  F A B E\tab \tab \tab \tab \tab A}{\insrsid1444013  must be immediately preceded by }{\f2\fs22\insrsid1444013 F}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line *A B E\line  F A\tab \tab \tab \tab \tab \tab \\mcc A +/ F _\line  F A E\line *A B
\par 4.  F A B C D\tab \tab \tab \tab A}{\insrsid1444013  must be followed somewhere by }{\f2\fs22\insrsid1444013 D}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line  F A D\line  F A B D\tab \tab \tab \tab \\mcc A +/ _ ... D\line *F A B\line  A C D
\par 5.  F A B C\tab \tab \tab \tab \tab A}{\insrsid1444013  cannot be followed anywhere by }{\cs109\f2\fs22\insrsid1444013 D}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line *F A B C D\line  F A C\tab \tab \tab \tab \tab \\mcc A +/ ~_ ... D\line *F A D\line 
 A B\line *A B D
\par 6.  F G A B C\tab \tab \tab \tab A}{\insrsid1444013  must be immediately preceded by }{\cs109\f2\fs22\insrsid1444013 F}{\insrsid1444013  }{\cs109\f2\fs22\insrsid1444013 G}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line  F G A C\line  F G A\tab \tab 
\tab \tab \tab \\mcc A +/ F G _\line *G F A\line *F A B C\line *G A B
\par 7.  F G H A B C\tab \tab \tab A}{\insrsid1444013  must be preceded somewhere by }{\cs109\f2\fs22\insrsid1444013 F}{\insrsid1444013  }{\cs109\f2\fs22\insrsid1444013 G}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line  F G H I J A C\line  F G A\tab \tab 
\tab \tab \tab \\mcc A +/ F G ... _\line *G F A\line *F A B C\line *G A B
\par 8.  F A B C D E\tab \tab \tab A}{\insrsid1444013  must be preceded immediately by }{\cs109\f2\fs22\insrsid1444013 F}{\insrsid1444013  and }{\f2\fs22\insrsid1444013 \line *F A B C D\tab \tab \tab \tab \tab }{\insrsid1444013 followed somewhere by }{
\cs109\f2\fs22\insrsid1444013 E}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line *F G A B C E\line *A B C E\tab \tab \tab \tab \\mcc A +/ F _ ... }{\f2\fs22\lang3082\langfe1033\langnp3082\insrsid1444013 E\line  F A D E\line  F A B E\line  F A C E\line 
*F A\line  F A E
\par }{\f2\fs22\insrsid1444013 9.  E B C D A\tab \tab \tab \tab A}{\insrsid1444013  must be preceded somewhere by }{\cs109\f2\fs22\insrsid1444013 E}{\insrsid1444013  and\line }{\f2\fs22\insrsid1444013  E C A}{\insrsid1444013 \tab \tab \tab \tab \tab \tab 
somewhere by }{\cs109\f2\fs22\insrsid1444013 C}{\insrsid1444013  and}{\f2\fs22\insrsid1444013 \line *E D A\tab \tab \tab \tab \tab \tab }{\cs109\f2\fs22\insrsid1444013 E}{\insrsid1444013  must precede }{\cs109\f2\fs22\insrsid1444013 C}{\insrsid1444013 .}{
\f2\fs22\insrsid1444013 \line *C D A\line  E C D A\tab \tab \tab \tab \\mcc A +/ E ... C ... _
\par 10. B C A\tab \tab \tab \tab \tab A}{\insrsid1444013  must be preceded somewhere by either }{\cs109\f2\fs22\insrsid1444013 B}{\insrsid1444013  or }{\cs109\f2\fs22\insrsid1444013 D}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line  D C A\line *C A\tab 
\tab \tab \tab \tab \tab \\mcc A +/ B ... _ +/ D ... _\line  B A\line  D A
\par 11. B C D A\tab \tab \tab \tab \tab A}{\insrsid1444013  must be preceded immediately by }{\cs109\f2\fs22\insrsid1444013 D}{\insrsid1444013  and \line }{\f2\fs22\insrsid1444013  B D A}{\insrsid1444013 \tab \tab \tab \tab \tab \tab somewhere by }{
\cs109\f2\fs22\insrsid1444013 B}{\insrsid1444013 .}{\f2\fs22\insrsid1444013 \line *C D A\tab \tab \tab \tab \tab \\mcc A +/ B ... D _\line *B C A
\par }\pard\plain \s110\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart _Toc393786548}
{\*\bkmkstart _Toc393852567}{\*\bkmkstart _Toc393873712}{\*\bkmkstart _Toc393875697}Appendix B: Answers to SEC Drills{\*\bkmkstart answersSecDrills}{\*\bkmkend _Toc393786548}{\*\bkmkend _Toc393852567}{\*\bkmkend _Toc393873712}{\*\bkmkend _Toc393875697}
{\*\bkmkend answersSecDrills}
\par }\pard\plain \s22\ql \fi360\li0\ri0\sb120\sa120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 The following shows the SEC Drills of section }{\field{\*\fldinst {\insrsid1444013 
 REF _Ref393072552 \\n }}{\fldrslt {\insrsid14046460 3.5.1}}}{\insrsid1444013  and provides the expected answers.
\par }\pard\plain \s83\ql \fi-1080\li1800\ri720\sb60\widctlpar\tx1080\tx1800\nooverflow\faroman\rin720\lin1800\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 a.\tab The allomorph }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh }{\insrsid1444013 in: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 asi, esi, ishi, osi, usi, isha}{\insrsid1444013 \line \tab \\a  }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh / i _}{\insrsid1444013 
\par }\pard \s83\ql \fi-540\li1260\ri720\sb60\widctlpar\tx2160\nooverflow\faroman\rin720\lin1260\itap0 {\insrsid1444013 b.\tab The allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh }{\insrsid1444013 in: }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 isa, ise, ishi, iso, isu, ashi\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  sh / _ i}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
\par }{\insrsid1444013 c.\tab The allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sh }{\insrsid1444013 in: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 asi, esi, ishi, osi, usi, isa\line }{\cs109\f2\fs22\insrsid1444013 
\tab \\a  sh / i _ i}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 
\par }{\insrsid1444013 d.\tab In (a)-(c) above, when does one select the }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 s}{\insrsid1444013  allomorph?  (When it is not preceded, followed, or surrounded by the high front vowel }{
\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 i}{\insrsid1444013 , respectively)  Remember that we need to negate the environment to be sure the constraint does what we want it to:}{\cs109\f2\fs22\insrsid1444013 \tab \\a  s / i ~_\line \tab 
\\a  s / ~_ i\line \tab \\a  s / i ~_ i}{\insrsid1444013 
\par e.\tab Suppose we have a language where a glottal stop only occurs word initially: }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 tata}{\insrsid1444013 , }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 ?ata}{\insrsid1444013 , 
}{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 sata}{\insrsid1444013 , etc.:\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  ?ata\tab / # _}{\insrsid1444013 
\par f.\tab Now make the glottal stop be word final:\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  ata?\tab / _ #}{\insrsid1444013 
\par g.\tab State that an allomorph }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 aba}{\insrsid1444013  doesn\rquote t take any affixes; it is a complete word itself:\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  aba \tab / # _ #}{
\insrsid1444013 
\par h.\tab What if instead it cannot stand alone?\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  aba \tab / # ~_ #}{\insrsid1444013 
\par i.\tab Suppose you have voiceless stops only before another voiceless stop or at end of word, otherwise it is voiced:\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  at\tab / _ [-voiced]   / _ #\line \tab \\a  ad\tab / _ [+voiced]}{\insrsid1444013 
\par j.\tab Suppose a word-final suffix ends in a vowel except when the following word begins with a vowel, then it is }{\cs69\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 w}{\insrsid1444013 :\line }{\cs109\f2\fs22\insrsid1444013 \tab \\a  xa\tab 
\tab / _ # [C]\line \tab \\a  xaw\tab / _ # [V]}{\insrsid1444013 
\par k.\tab Finally, to account for both back vowel harmony and final stop devoicing (as in Turkish), more complex constraints are needed.  For example, the infinitive suffix has the following forms:\line    }{
\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -mag}{\insrsid1444013  following a back vowel in the preceding syllable and before a vowel\line    }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -mak}{\insrsid1444013 
 following a back vowel in the preceding syllable but before a \tab consonant or word finally\line    }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -meg}{\insrsid1444013  following a non-back vowel in the preceding syllable and before
 a \tab vowel\line    }{\cs106\b\i\f38\fs22\lang1024\langfe1024\noproof\insrsid1444013 -mek}{\insrsid1444013  following a non-back vowel in the preceding syllable and before a\line \tab consonant or word finally. \line 
Since, as in SPE, AMPLE (and PC-KIMMO) has no notion of the syllable, there is no way to collapse the conditions for the syllable-final devoici
ng.  The vowel harmony part of the conditions must allow for the possibility of up to two consonants intervening.\line \line \tab }{\cs109\f2\fs22\insrsid1444013 \\a  mag\tab / [V+bk] ([C]) ([C]) _ [V]\line \tab \\a  mak\tab / [V+bk] ([C]) ([C]) _ [C]
\line \tab \tab \tab \tab / [V+bk] ([C]) ([C]) _  #\line \tab \\a  meg\tab / [V-bk] ([C]) ([C]) _ [V]\line \tab \\a  mek\tab / [V-bk] ([C]) ([C]) _ [C]\line \tab \tab \tab \tab / [V-bk] ([C]) ([C]) _  #
\par }\pard\plain \s111\ql \li0\ri0\sb480\sa120\keep\keepn\pagebb\nowidctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid14369330 \b\scaps\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid1444013 {\*\bkmkstart _Toc393786549}
{\*\bkmkstart _Toc393852568}{\*\bkmkstart _Toc393873713}{\*\bkmkstart _Toc393875698}REFERENCES{\*\bkmkstart references}{\*\bkmkend _Toc393786549}{\*\bkmkend _Toc393852568}{\*\bkmkend _Toc393873713}{\*\bkmkend _Toc393875698}{\*\bkmkend references}
\par }\pard\plain \s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0\pararsid10569393 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid10569393 Ajdukiewicz, Kazimierz. 1935. \'93Die syntaktische Konnexit\'a8at.\'94
 In Storrs McCall, ed., }{\i\insrsid10569393 Polish Logic 1920-1939}{\insrsid10569393 , 207\endash 231. Oxford: Oxford University Press. Translated from }{\i\insrsid10569393 Studia Philosophica}{\insrsid10569393 , 1, 1-27.
\par }\pard \s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0 {\insrsid1444013 Antworth, Evan L.  1990.  }{\i\insrsid1444013 PC-KIMMO: A Two-Level Processor for Morphological Analysis}{\insrsid1444013 
.  Occasional Publications in Academic Computing No. 16.  Dallas: Summer Institute of Linguistics.
\par }\pard \s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0\pararsid10569393 {\insrsid10569393 Bar-Hillel, Yehoshua. 1953. \'93A Quasi-Arithmetical Notation for Syntactic Description.\'94 }{\i\insrsid10569393 Language}{
\insrsid10569393 , 29, 47\endash 58.}{\insrsid10569393 
\par }{\insrsid10569393 Bar-Hillel, Yehoshua, Chaim Gaifman, and Eliyahu Shamir. 1964. \'93On Categorial and Phrase Structure Grammars.\'94 In Yehoshua Bar-Hillel, ed., }{\i\insrsid10569393 Language and Information}{\insrsid10569393 , 99\endash 
115. Reading, MA: Addison-Wesley.
\par }\pard \s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0 {\insrsid1444013 Bird, Steven.  1996.  \'93Principles of African Tone Orthography Design.\'94
  University of Edinburgh (http://www.cogsci.ed.ac.uk/hcrc/publications/rp-80.ps).
\par Benton, Joe, H. Andrew Black, and Barbara Glaser.  1996. \'93Modeling Chichicapan Zapotec Morphology\'94.  }{\i\insrsid1444013 Proceedings of the 1996 General CARLA Conference}{\insrsid1444013 : 179-202.  Summer Institute of Linguistics, Dallas, Texas.

\par Black, H. Andrew.  1996.  \'93TonePars: A Computational Tool for Exploring Autosegmental Tonology.\'94  }{\i\insrsid1444013 Proceedings of the 1996 General CARLA Conference}{\insrsid1444013 : 231-255.  Summer Institute of Linguistics, Dallas, Texas.

\par Buseman, Alan.  1992.  \'93Phonological Rule Program Reference Documentation.\'94  JAARS, ms.
\par Buseman, Alan.  }{\lang3082\langfe1033\langnp3082\insrsid1444013 1993a.  }{\i\lang3082\langfe1033\langnp3082\insrsid1444013 CARLA Tutorial.  }{\insrsid1444013 JAARS, ms.
\par Buseman, Alan.  }{\lang3082\langfe1033\langnp3082\insrsid1444013 1993b.  }{\i\lang3082\langfe1033\langnp3082\insrsid1444013 CARLA User\rquote s Guide..  }{\insrsid1444013 JAARS, ms.
\par Buseman, Alan, David J. Weber, H. Andrew Black, and Stephen R. McConnel.  1993.  }{\i\insrsid1444013 Supplement to AMPLE: A Tool for Exploring Morphology, February 1992 Update.}{\insrsid1444013   Summer Institute of Linguistics, Dallas, Texas.
\par Chomsky, Noam and Morris Halle.  1968.  }{\i\insrsid1444013 The Sound Pattern of English}{\insrsid1444013 .  Harper and Row, New York.
\par Gardner, Simon. 1994.  \'93A Problem in Boundary Morphophonemics for Computer Analysis.\'94  }{\i\insrsid1444013 Notes on Computing}{\insrsid1444013  13.6:44-48.
\par Goldsmith, John.  1976.  }{\i\insrsid1444013 Autosegmental Phonology.}{\insrsid1444013   MIT Ph.D. Dissertation.  Published by Garland Press, New York, 1979.
\par Hankamer, Jorge.  1986, \'93Finite State Morphology and Left to Right Phonology.\'94  }{\i\insrsid1444013 Proceedings of the West Coast Conference on Formal Linguistics}{\insrsid1444013  5:41-52.
\par Hockett, Charles.  1954.  \'93Two models of grammatical description.\'94  }{\i\insrsid1444013 Word}{\insrsid1444013  10:210-231.  Reprinted in Joos 1957:386-399.
\par It\'f4, Junko.  1989.  \'93A prosodic theory of epenthesis.\'94  }{\i\insrsid1444013 Natural Language and Linguistic Theory}{\insrsid1444013  7:217-259.
\par Johnson, S.C.  1978.  \'93Yacc: yet another compiler compiler.\'94  In B.W. Kernighan and M.D. McIlroy, }{\i\insrsid1444013 UNIX programmer's manual}{\insrsid1444013 , Bell Laboratories.
\par Joos, Martin (ed.)  1957.  }{\i\insrsid1444013 Readings in Linguistics I.  The Development of Descriptive Linguistics in America 1925-56.}{\insrsid1444013   University of Chicago Press, Chicago.
\par Koskenniemi, Kimmo.  1983.  }{\i\insrsid1444013 Two-Level Morphology: A General Computational Model for Word-Form Recognition and Production}{\insrsid1444013 .  Helsinki, Finland: University of Helsinki,    Department of General Linguistics.
\par }\pard \s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0\pararsid10569393 {\insrsid10569393 Lambek, Joachim. 1958. \'93The Mathematics of Sentence Structure.\'94 }{\i\insrsid10569393 American Mathematical Monthly}{
\insrsid10569393 , 65, 154\endash 170.
\par }\pard \s108\ql \fi-720\li720\ri0\sa120\widctlpar\nooverflow\faroman\rin0\lin720\itap0 {\insrsid1444013 Lesk, M.E. and E. Schmidt.  1978.  \'93Lex: a lexical analyzer generator.\'94  In B.W. Kernighan and M.D. McIlroy, }{\i\insrsid1444013 
UNIX programmer's manual}{\insrsid1444013 , Bell Laboratories.
\par L\'f3pez L., Filem\'f3n and Ronaldo Newberg Y.  }{\lang3082\langfe1033\langnp3082\insrsid1444013 1990.  }{\i\lang3082\langfe1033\langnp3082\insrsid1444013 La Conjugaci\'f3n del Verbo Zapoteco, Zapoteco de Yal\'e1lag.}{
\lang3082\langfe1033\langnp3082\insrsid1444013   Instituto Ling\'fc\'edstico de Verano, M\'e9xico, D.F.
\par }{\insrsid1444013 Maxwell, Mike.  1996.  \'93Two Theories of Morphology, One Implementation.\'94  }{\i\insrsid1444013 Proceedings of the 1996 General CARLA Conference}{\insrsid1444013 : 203-230.  Summer Institute of Linguistics, Dallas, Texas.
\par Payne, David L.  1981.  }{\i\insrsid1444013 The Phonology and Morphology of Axininca Campa.}{\insrsid1444013 
  Summer Institute of Linguistics Publications in Linguistics, Publication Number 66.  Summer Institute of Linguistics and the University of Texas at Arlington, Dallas, Texas.
\par Spencer, Andrew.  1991.  }{\i\insrsid1444013 Morphological Theory.}{\insrsid1444013   Basil Blackwell, Cambridge.
\par Swift, Kenneth E.  }{\lang3082\langfe1033\langnp3082\insrsid1444013 1988.  }{\i\lang3082\langfe1033\langnp3082\insrsid1444013 Morfolog\'eda del Caquinte.}{\lang3082\langfe1033\langnp3082\insrsid1444013   Serie Ling\'fc\'ed
stica Peruana, No. 25, Instituto Ling\'fc\'edstico de Verano, Yarinacocha, P\'e9ru.
\par }{\insrsid1444013 Tuggy T., David.  }{\lang3082\langfe1033\langnp3082\insrsid1444013 1991.  }{\i\lang3082\langfe1033\langnp3082\insrsid1444013 Curso del N\'e1huatl Moderno}{\lang3082\langfe1033\langnp3082\insrsid1444013 .  Universidad de las Am\'e9
ricas, Puebla, Mexico.
\par }{\insrsid1444013 Weber, David J., H. Andrew Black and Stephen R. McConnel.  1988.  }{\i\insrsid1444013 AMPLE: A Tool for Exploring Morphology}{\insrsid1444013 
.  Occasional Publications in Academic Computing No. 12.  Summer Institute of Linguistics, Dallas, Texas.
\par }}