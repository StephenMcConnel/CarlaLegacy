<!-- pcpatr.dtd: Document Type Definition for PATR COM output. -->
<!-- last modified 11-Apr-2001 by hab -->
<!ELEMENT Analysis (Input?, Parse*)>
<!ATTLIST Analysis
	count CDATA #REQUIRED
	fail (true | false) #IMPLIED
>
<!ELEMENT Input (Word*)>
<!ELEMENT Word (OrigWord?, Decomps?, Glosses, Cats?, FeatDescrips?, Props?, UnderlyingForms?)>
<!ELEMENT OrigWord (#PCDATA)>
<!ELEMENT Decomps (#PCDATA)>
<!ATTLIST Decomps
  count CDATA #REQUIRED
  >
<!ELEMENT Glosses (#PCDATA)>
<!ATTLIST Glosses
  count CDATA #REQUIRED
  >
<!ELEMENT Cats (#PCDATA)>
<!ATTLIST Cats
  count CDATA #REQUIRED
  >
<!ELEMENT FeatDescrips (#PCDATA)>
<!ATTLIST FeatDescrips
  count CDATA #REQUIRED
  >
<!ELEMENT Props (#PCDATA)>
<!ATTLIST Props
  count CDATA #REQUIRED
  >
<!ELEMENT UnderlyingForms (#PCDATA)>
<!ATTLIST UnderlyingForms
  count CDATA #REQUIRED
  >

<!ELEMENT Parse (Node)>
<!ELEMENT Node (Fs, (Leaf | Node | Shared)*)>
<!ATTLIST Node
	id ID #REQUIRED
	rule CDATA #IMPLIED
	cat CDATA #REQUIRED
	all (true | false) #IMPLIED
	fail (true | false) #IMPLIED
>
<!ELEMENT Leaf (Fs, Lexfs, Str)>
<!ATTLIST Leaf
	id ID #REQUIRED
	cat CDATA #REQUIRED
	gloss CDATA #IMPLIED
	all (true | false) #IMPLIED
	fail (true | false) #IMPLIED
>
<!ELEMENT Shared EMPTY>
<!ATTLIST Shared
	id IDREF #REQUIRED
>
<!-- *******************  FEATURE STRUCTURES  ****************** -->
<!-- To get things rolling, this is a simplified version of the  -->
<!-- of the TEI system for feature structure markup.             -->
<!-- Not all of this machinery is used by PC-PATR type features. -->
<!-- A feature structure has features and an optional type.
	 The RELation tells whether the specified Fs equals,
	 doesn't equal, subsumes, doesn't subsume the actual
	 feature structure that it represents.
	 ID is used to provide a target for pointing (via the
	 FVAL attribute) when the same <Fs> is the value of
	 more than one <F>. -->
<!-- Lexfs is a feature structure stored in the lexicon for a
	 lexical item.  Fs is any other feature structure. -->
<!ELEMENT Lexfs (F)*>
<!ATTLIST Lexfs
	type CDATA #IMPLIED
	rel (eq | ne | sb | ns) "eq"
	id ID #IMPLIED
>
<!ELEMENT Fs (F)*>
<!ATTLIST Fs
	type CDATA #IMPLIED
	rel (eq | ne | sb | ns) "eq"
	id ID #IMPLIED
>
<!-- A feature has a name, organization, and relation.  The
	 feature value is the content of the <F> element.
	 ORGanization declares whether the feature value is a
	 single value, a set of values, or an ordered list.
	 The RELation tells whether the specified fs equals,
	 doesn't equal, subsumes, doesn't subsume the actual
	 feature structure that it represents.
	 FVAL points to the ID's of the feature values; when
	 this attribute is used, the <f> element should have
	 no content.  -->
<!ENTITY % basic.value " Plus | Minus | Any | None | Sym | Nbr | Str ">
<!ELEMENT F (Fs | %basic.value;)?>
<!ATTLIST F
	name CDATA #REQUIRED
	org (single | set | list) #IMPLIED
	rel (eq | ne | sb | ns) "eq"
	fVal IDREFS #IMPLIED
>
<!-- These define the simple feature values:
		<Plus/>, <Minus/>, <Any/>, and <None/>.  -->
<!-- All kinds of simple values, as well as the basic values
	 below, can have an ID (as can an <Fs>) to serve as the
	 target for pointing (via the fVal attr of <F>) when
	 the same value is shared by more than one <F>. -->
<!ELEMENT Plus EMPTY>
<!ATTLIST Plus
	id ID #IMPLIED
>
<!ELEMENT Minus EMPTY>
<!ATTLIST Minus
	id ID #IMPLIED
>
<!ELEMENT Any EMPTY>
<!ATTLIST Any
	id ID #IMPLIED
>
<!ELEMENT None EMPTY>
<!ATTLIST None
	id ID #IMPLIED
>
<!ELEMENT Sym EMPTY>
<!ATTLIST Sym
	id ID #IMPLIED
	value CDATA #REQUIRED
	rel (eq | ne) "eq"
>
<!-- A feature value which is a symbol from a closed set.   -->
<!ELEMENT Nbr EMPTY>
<!ATTLIST Nbr
	id ID #IMPLIED
	value CDATA #REQUIRED
	rel (eq | ne | gt | lt | ge | le) "eq"
>
<!-- A feature value which is a number. -->
<!ELEMENT Str (#PCDATA)>
<!ATTLIST Str
	id ID #IMPLIED
	lang IDREF #IMPLIED
	rel (eq | ne | gt | lt | ge | le) "eq"
>
<!-- A feature value which is an arbitrary string.  If LANG
	 is missing, it is assumed to be the TEXT language declared
	 in <langUsage>. -->
<!-- **************************************************************************
Verification of a subsystem via rxp is done via:

	rxp -eVs -f file.err %1

where %1 is the name of the subsystem XML file.

(-e          - expand entities, including external entities
 -V          - validate
 -s          - work silently, without any output other than error reports
 -f file.err - write error messages to the specified file)
-->
