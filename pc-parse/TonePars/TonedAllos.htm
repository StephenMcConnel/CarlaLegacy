<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<!-- generated by XLingPap1.xsl Version 1.5.0-->
<title>Notes on Implementing Toned Allomorphs in TonePars/ToneGen</title>
<link rel="stylesheet" href="TonedAllos.css">
</head>
<body>
<center><b><big><big><big>Notes on Implementing Toned Allomorphs in TonePars/ToneGen</big></big></big></b></center>
<center><i>Andy Black</i></center><br><center><small>16-May-2003</small></center>
<h1><a name="sIntro">1 Introduction</a></h1>
<p>While linguistically, tones are associaterd with lexical items underlyingly and hence should be associated with the morpheme, there are practical orthographies which require AMPLE allomorphs to be used.  These may have different tones than the entire morpheme.  Sometimes this is due to vowel coalescence; sometimes due to "odd" morphophonemics (e.g. the Present tense has a final floating L tone, but none of the other tenses do), and sometimes due to the apparent whims of the orthography designer.</p>
<p>If we were to allow users the ability to key in the tones on the regular AMPLE allomorph fields (as well as using the <span class="sfm">\tone</span> field), then it would make all of this much easier for the user.  It also would simplify the set of tones rules; right now, we have to have a set of "lexical" tone rules which assign tones based on allomorph properties.</p>
<h1><a name="sProposedSolution">2 A Proposed Solution</a></h1>
<p>This section outlines a solution, i.e. how to modify the programs to make it possible to mark allomorphs with tone.</p>
<h2><a name="sStampAllo">2.1 Add tones to StampAllomorph</a></h2>
<p>Each allomorph now potentially has tones associated with it.  Therefore, we need to add a pTones field to the StampAllomorph struct.</p>
<p>In addition, the algorithm in the code which assigns lexical tones needs to check both the allomorph tones and the morpheme tones.  When both are present, it uses both.</p>
<h2><a name="sAllomorphInANA">2.2 Allomorph Info in ANA</a></h2>
<p>In order for TonePars to know which allomorphs to use, this information must somehow be in the ANA file that TonePars reads.  Currently, there is nothing available for this.  (Using the \d field will not work in the general case, because of homophonous allomorphs with different conditions - especially since AMPLE strips off tone when used with TonePars.)</p>
<p>This implies that one solution would be to add a new field to the ANA output.  Call it \ta for tone allomorph.  It could contain an integer index for each allomorph, indicating the allomorph's position within the record.  The various allomoprhs could be separated by an equal sign (like properties and feature descriptors and underlying forms are).  The morphname in the \a field would indicate the record and this index would indicate the allomorph.  Note that this will work as long as the dictionary does not change between the AMPLE's production of the ANA and the invocation of TonePars.  Given CarlaStudio, this is not likely, although it could happen.</p>
<h3><a name="sAmpleAlloIndex">2.2.1 Allomorph Index in AMPLE</a></h3>
<p>To make this work, the following must be done:</p>
<ul>
<li>To determine the index in AMPLE, in setsd.c, for each 'A' case, there is a for loop which sets the de, etc.  In this loop, add a counter for the index.  Set a new field in the AmpleAllomorph struct (ampledef.h).  Call it int iAlloIndex;</li>
<li>In dtbin.c and dtbio.c (or whatever) need to add the new field and recompile all the tools that use it.</li>
<li>Need to modify SenTrans and LexTrans to preserve the new field.</li>
</ul>
<p>Note that reduplication is a potential problem, but, I think, in order for TonePars to be able to use reduplication, we'll need to expand the redup'ed allos anyway, just like we do for STAMP.</p>
<h3><a name="sToneParsAlloIndex">2.2.2 Allomorph Index in TonePars</a></h3>
<p>To read and use the allomorph index, the following must be done in TonePars</p>
<ul>
<li>Read the number from the ANA field.</li>
<li>Use it as an index to find the corresponding StampAllomorph in the StampAllomorphList of the StampMorpheme.</li>
</ul>
<h2><a name="sParseAlloField">2.3 Parsing the tones in the Allomorph Field</a></h2>
<p>How will we determine the tones based on the characters keyed as the allomorph in the allomorph field?</p>
<h3><a name="sToneAllo">2.3.1 Tone Allomorph field in the Segment file</a></h3>
<p>Add a new field to the segment file and call it \toneallo.  It will be like the \toneseg field except that it will be reversed: we have the character(s) first, then the equal sign, and then the (possibly empty) sequence of tones.</p>
<p>Note that every character sequence that represents a tbu must be listed in a \toneallo field.</p>
<p>Some examples are shown below:</p>
<div style="margin-left: 0.25in; margin-right: 0.25in">
<table>
<tr>
<td valign="top"><a name="xSampleToneAllos">(1)</a></td>
<td>
<td>
<table>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">a  =         | mid toned a</td>
</tr>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">a_ =   L@ | mid toned a with right-floating L</td>
</tr>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">a'  =   H@ | mid toned a with right-floating H</td>
</tr>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">â  = L      | low toned a</td>
</tr>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">â_ = L L@ | low toned a with right-floating L</td>
</tr>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">á  = H      | H toned a</td>
</tr>
<tr>
<td class="sfm" align="left" valign="top">\toneallo</td>
<td class="allomorph" align="left" valign="top">á_ = H @L | H toned a with right-floating L</td>
</tr>
</table>
</td>
</td>
</tr>
</table>
</div>
<h3><a name="sToneParsAllo">2.3.2 Reading the allomorph in TonePars</a></h3>
<p>Using a greedy parser, scan the allomorph from left-to-right looking for matches with the set of characters defined in the <span class="sfm">\toneallo</span> fields of the segment file.  When a match is found, increment a tbu counter (each match indicates a tbu).  Copy the tonelist info associated with the matched item to the allomorph's tonelist.  Use the tone_ul_loc field of the tone struct to indicate the tbu number.</p>
<h3><a name="sAmpleAllo">2.3.3 Stripping Off Tones in AMPLE Dictionary changes</a></h3>
<p>Because the allomorphs will now be potentially marked with tone, we must add changes to the AMPLE dicitonary changes to strip off all tone, including floating tones.</p>
</body>
</html>
