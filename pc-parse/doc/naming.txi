@c this file should be @include d by another -*- texinfo -*- file
@chapter Variable and function naming conventions
@ifclear endash
@iftex
@ifset html
@set endash -
@end ifset
@ifclear html
@set endash --
@end ifclear
@end iftex
@ifinfo
@set endash -
@end ifinfo
@end ifclear

The basic goal behind choosing names in the @value{library-name}
function library is for the name to convey information about what it
represents.  This is achieved in two ways: striving for a descriptive
name rather than a short cryptic abbreviated name, and following a
different pattern of capitalization for each type of name.

@section Preprocessor macro names

Preprocessor macro names are written entirely in capital letters.  If
the name requires more than one word for an adequate description, the
words are joined together with intervening underscore (@code{_})
characters.

@section Data structure names

Data structure names consist of one or more capitalized words.  If the
name requires more than one word for an adequate description, the words
are joined together without underscores, depending on the
capitalization pattern to make them readable as separate words.

@section Variable names

Variable names in the @value{library-name} function library
follow a modified form of the Hungarian naming convention described by
Steve McConnell in his book @cite{Code Complete} on pages
202@value{endash}206.

Variable names have three parts:  a lowercase type prefix, a
descriptive name, and a scope suffix.

@subheading Type prefix

The type prefix has the following basic possibilities:

@table @code
@item b
a Boolean, usually encoded as a @code{char}, @code{short}, or @code{int}
@item c
a character, usually a @code{char} but sometimes a @code{short} or
@code{int}
@item d
a double precision floating point number, that is, a @code{double}
@item e
an enumeration, encoded as an @code{enum} or as a @code{char},
@code{short}, or @code{int}
@item i
an integer, that is, an @code{int}, @code{short}, @code{long}, or
(rarely) @code{char}
@item s
a data structure defined by a @code{struct} statement
@item sz
a @sc{NUL} (that is, zero) terminated character string
@item pf
a pointer to a function
@end table
@noindent
In addition, the basic types may be prefixed by these qualifiers:

@table @code
@item u
indicates that an integer or a character is unsigned
@item a
indicates an array of the basic type
@item p
indicates a pointer to the type, possibly a pointer to an array or to a
pointer
@end table

@subheading Descriptive name

The descriptive name portion of a variable name consists of one or more
capitalized words concatenated together.  There are no underscores
(@code{_}) separating these words from each other, or from the type
prefix.  For the @value{library-name} function library, the descriptive
name for global variables
@ifset opaclib
may begin with the name of the most relevant data strucure, if any.
@end ifset
@ifclear opaclib
begins with @value{library-tag}.
@end ifclear

@subheading Scope suffix

The scope suffix has these possibilities:

@table @code
@item _g
indicates a global variable accessible throughout the program
@item _m
indicates a module (semiglobal) variable accessible throughout the file
(declared @code{static})
@item _in
indicates a function argument used for input
@item _out
indicates a function argument used for output (must be a pointer)
@item _io
indicates a function argument used for both input and output (must be a
pointer)
@item _s
indicates a function variable that retains its value between calls
(declared @code{static})
@end table

The lack of a scope suffix indicates that a variable is declared within
a function and exists on the stack for the duration of the current
call.

@section Function names

Global function names in the @value{library-name} function library have
two parts: a verb that is all lowercase followed by a noun phrase
containing one or more capitalized words.  These pieces are
concatanated without any intervening underscores (@code{_}).  For the
@value{library-name} library functions, the noun phrase section
includes
@ifset opaclib
the name of the most relevant data strucure, if any.
@end ifset
@ifclear opaclib
@value{library-tag}.
@end ifclear

@section Examples

Given the discussion above, it is easy to discern at a glance what type
of item each of the following names refers to.
@table @code
@item SAMPLE_NAME
is a preprocessor macro.
@item SampleName
is a data structure.
@item pSampleName
is a local pointer variable.
@item writeSampleName
is a function (that may apply to a data structure named @code{SampleName}).
@end table
