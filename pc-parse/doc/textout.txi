@c this file should be @include d by another -*- texinfo -*- file
@c following a node `Text output control file' and a chapter title.
@c
@c This material is adapted from chapter 8 of
@c    Weber, David J., H. Andrew Black, Stephen R. McConnel, and Alan Buseman.
@c    STAMP: a tool for dialect adaptation.
@c    Occasional Publications in Academic Computing No. 15.
@c    Dallas, TX: Summer Institute of Linguistics. 1990.
@c
@c this file is conditionalized by
@c	@set ktext
@c	@set stamp
@c	@set intergen
@c	@set textin
@c	@set textin-title <text input control file chapter title>
@c
@set textout
@ifclear endash
@iftex
@ifset html
@set endash -
@end ifset
@ifclear html
@set endash --
@end ifclear
@end iftex
@ifinfo
@set endash -
@end ifinfo
@end ifclear
@c
@ifset stamp
@set commentchar |
@set commentcharname vertical bar (@code{|})
@set ProgName STAMP
@end ifset
@ifset intergen
@set commentchar |
@set commentcharname vertical bar (@code{|})
@set ProgName INTERGEN
@end ifset
@ifset ktext
@set commentchar ;
@set commentcharname semicolon (@code{;})
@set ProgName KTEXT
@end ifset
@ifclear commentchar
@set commentchar ;
@end ifclear
@ifclear commentcharname
@set commentcharname semicolon (@code{;})
@end ifclear
@ifclear ProgName
@set ProgName UNKNOWN_PROGRAM
@end ifclear
@cindex text output control

@ifset textin
@menu
* \ambig (xxOUTX.CTL)::
* \ch (xxOUTX.CTL)::
* \dsc (xxOUTX.CTL)::
* \format (xxOUTX.CTL)::
* \luwfc (xxOUTX.CTL)::
* \luwfcs (xxOUTX.CTL)::
* \scl (xxOUTX.CTL)::
* \wfc (xxOUTX.CTL)::
* \wfcs (xxOUTX.CTL)::
* Sample text output control file::
@end menu
@end ifset
@ifclear textin
@menu
* \ambig::
* \ch::
* \dsc::
* \format::
* \luwfc::
* \luwfcs::
* \scl::
* \wfc::
* \wfcs::
* Sample text output control file::
@end menu
@end ifclear

The @i{text output} module restores a processed document from the
internal format to its textual form.  It re-imposes capitalization on
words and restores punctuation, format markers, white space, and line
breaks.  Also, orthography changes can be made, and the delimiter that
marks ambiguities and failures can be changed.  This chapter describes
the control file given to the text output module.@footnote{This chapter
is adapted from chapter 8 of Weber (1990).}

@c ----------------------------------------------------------------------------
@ifset textin
@node \ambig (xxOUTX.CTL), \ch (xxOUTX.CTL), Text output control file, Text output control file
@end ifset
@ifclear textin
@node \ambig, \ch, Text output control file, Text output control file
@end ifclear
@section Text output ambiguity delimiter: \ambig
@findex \ambig

The text output module flags words that either produced no results or
multiple results when processed.  These are flagged with percent signs
(@code{%}) by default, but this can be changed by declaring the desired
character with the \ambig field code.  For example, the following would
change the ambiguity delimiter to @code{@@}:
@example
\ambig @@
@end example

@c ----------------------------------------------------------------------------
@ifset textin
@node \ch (xxOUTX.CTL), \dsc (xxOUTX.CTL), \ambig (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \ch, \dsc, \ambig, Text output control file
@end ifclear
@section Text output orthographic changes: \ch
@findex \ch

The text output module allows orthographic changes to be made to the
processed words.
These are given in the text output control file.
@ifset textin
(They have exactly the same form as the input orthographic changes; see
@end ifset
@ifset textintxt
`@value{textin-title}' above.)
@end ifset
@ifset textinntxt
@ref{Text input control file}.)
@end ifset
@ifset textin
The output orthographic changes allow conversion from the internal
representation used by the program to the practical orthography of the
target language.  These changes are applied to the words after they
have been processed, but before the text is re-assembled (from the
internal format) for output.
@example
@group
\ch "N"   "m"  / _ p       @value{commentchar} assimilates before p
\ch "N"   "n"              @value{commentchar} otherwise stays n
@end group
@end example
@noindent
The first change makes N into m when it directly precedes p; the second
makes all other N's into n.
@end ifset
@ifclear textin
@include changes.txi
@end ifclear

@c ----------------------------------------------------------------------------
@ifset textin
@node \dsc (xxOUTX.CTL), \format (xxOUTX.CTL), \ch (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \dsc, \format, \ch, Text output control file
@end ifclear
@section Decomposition Separation Character: \dsc
@findex \dsc

The @code{\dsc} field defines the character used to separate the
morphemes in the decomposition field of the input analysis file.  For
example, to use the equal sign (@code{=}), the text input control file
would include:
@example

\dsc  =

@end example
@noindent
This would handle a decomposition field like the following:
@example

\d %3%kay%ka=y%ka=y%

@end example

It makes sense to use the @code{\dsc} field only once in the text output
control file.  If multiple @code{\dsc} fields do occur in the file, the
value given in the first one is used.  If the text output control file
does not have an @code{\dsc} field, a dash (@code{-}) is used.

The first printing character following the @code{\dsc} field code is used
as the morpheme decomposition separator character.  The same character
cannot be used both for separating decomposed morphemes in the analysis
output file and for marking comments in the output control files.  Thus,
one normally cannot use the @value{commentcharname} as the decomposition
separation character.

@ifclear intergen
This field is provided for use by the INTERGEN program.  It is of little
use to @value{ProgName}.
@end ifclear

@c ----------------------------------------------------------------------------
@ifset textin
@node \format (xxOUTX.CTL), \luwfc (xxOUTX.CTL), \dsc (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \format, \luwfc, \dsc, Text output control file
@end ifclear
@section Primary format marker character: \format
@findex \format

The @code{\format} field designates a single character to flag the
beginning of a primary format marker.  For example, if the format
markers in the text files begin with the at sign (@code{@@}), the
following would be placed in the text input control file:
@example

\format  @@

@end example
@noindent
This would be used, for example, if the text contained format markers
like the following:
@example

@group
@@
@@p
@@sp
@@make(Article)
@@very-long.and;muddled/format*marker,to#be$sure
@end group

@end example

If a @code{\format} field occurs in the text input control file without
a following character to serve for flagging format markers, then the
program will not recognize any format markers and will try to parse
everything other than punctuation characters.

It makes sense to use the @code{\format} field only once in the text
input control file.  If multiple @code{\format} fields do occur in the
file, the value given in the first one is used.

The first printing character following the @code{\format} field code is
used to flag format markers.  The character currently used to mark
comments cannot be assigned to also flag format markers.  Thus, the
@value{commentcharname} cannot normally be used to flag format markers.

@ifclear intergen
This field is provided for use by the INTERGEN program.  It is of little
use to @value{ProgName}.
@end ifclear

@c ----------------------------------------------------------------------------
@ifset textin
@node \luwfc (xxOUTX.CTL), \luwfcs (xxOUTX.CTL), \format (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \luwfc, \luwfcs, \format, Text output control file
@end ifclear
@section Lowercase/uppercase character pairs: \luwfc
@findex \luwfc

To break a text into words, the program needs to know which characters
are used to form words.  It always assumes that the letters @code{A}
through @code{Z} and @code{a} through @code{z} are used as word
formation characters.  If the orthography of the language the user is
working in uses any other characters that have lowercase and uppercase
forms, these must given in a @code{\luwfc} field in the text input
control file.

The @code{\luwfc} field defines pairs of characters; the first member
of each pair is a lowercase character and the second is the
corresponding uppercase character.  Several such pairs may be placed in
the field or they may be placed on separate fields.  Whitespace may be
interspersed freely.  For example, the following three examples are
equivalent:
@example

\luwfc  È… Ò—

@end example
or
@example

@group
\luwfc  È…      @value{commentchar} e with acute accent
\luwfc  Ò—      @value{commentchar} enyee
@end group

@end example
or
@example

\luwfc  È …  Ò —

@end example
@noindent
Note that comments can be used as well (just as they can in any
@value{ProgName} control file).  This means that the comment character
cannot be designated as a word formation character.  If the orthography
includes the @value{commentcharname}, then a different comment character
must be defined with the @samp{-c} command line option when
@value{ProgName} is initiated; see
@ifset txt
@ifset stamp
`STAMP Command Options'
@end ifset
@ifset intergen
`Running INTERGEN'
@end ifset
@ifset ktext
`Running KTEXT'
@end ifset
above.
@end ifset
@ifclear txt
@ifset stamp
@ref{Command options}.
@end ifset
@ifset intergen
@ref{Running INTERGEN}.
@end ifset
@ifset ktext
@ref{Running KTEXT}.
@end ifset
@end ifclear

The @code{\luwfc} field can be entered anywhere in the text input control file,
although a natural place would be before the @code{\wfc} (word formation
character) field.

Any standard alphabetic character (that is @code{a} through @code{z} or
@code{A} through @code{Z}) in the @code{\luwfc} field will override the
standard lower- upper case pairing.  For example, the following will
treat @code{X} as the upper case equivalent of @code{z}:
@example

\luwfc z X

@end example
@noindent
Note that @code{Z} will still have @code{z} as its lower-case
equivalent in this case.

The @code{\luwfc} field is allowed to map multiple lower case characters to
the same upper case character, and vice versa.  This is needed for
languages that do not mark tone on upper case letters.

@c ----------------------------------------------------------------------------
@ifset textin
@node \luwfcs (xxOUTX.CTL), \scl (xxOUTX.CTL), \luwfc (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \luwfcs, \scl, \luwfc, Text output control file
@end ifclear
@section Multibyte lowercase/uppercase character pairs: \luwfcs
@findex \luwfcs

The @code{\luwfcs} field extends the character pair definitions of the
@code{\luwfc} field to multibyte character sequences.  Like the
@code{\luwfc} field, the @code{\luwfcs} field defines pairs of
characters; the first member of each pair is a multibyte lowercase
character and the second is the corresponding multibyte uppercase
character.  Several such pairs may be placed in the field or they may be
placed on separate fields.  Whitespace separates the members of each
pair, and the pairs from each other.  For example, the following three
examples are equivalent:
@example

\luwfcs  e' E` n~ N^ Á C&

@end example
or
@example

@group
\luwfcs  e' E`      @value{commentchar} e with acute accent
\luwfcs  n~ N^      @value{commentchar} enyee
\luwfcs  Á  C&      @value{commentchar} c cedilla
@end group

@end example
or
@example

@group
\luwfcs  e' E`
		 n~ N^
		 Á  C&
@end group

@end example
@noindent
Note that comments can be used as well (just as they can in any
@value{ProgName} control file).  This means that the comment character
cannot be designated as a word formation character.  If the orthography
includes the @value{commentcharname}, then a different comment character
must be defined with the @samp{-c} command line option when
@value{ProgName} is initiated; see
@ifset txt
@ifset stamp
`STAMP Command Options' above.
@end ifset
@ifset intergen
`Running INTERGEN' above.
@end ifset
@ifset ktext
`Running KTEXT' above.
@end ifset
@end ifset
@ifclear txt
@ifset stamp
@ref{Command options}.
@end ifset
@ifset intergen
@ref{Running INTERGEN}.
@end ifset
@ifset ktext
@ref{Running KTEXT}.
@end ifset
@end ifclear

Also note that there is no requirement that the lowercase form be the
same length (number of bytes) as the uppercase form.  The examples shown
above are only one or two bytes (character codes) in length, but there is
no limit placed on the length of a multibyte character.

The @code{\luwfcs} field can be entered anywhere in the text input
control file.  @code{\luwfcs} fields may be mixed with @code{\luwfc}
fields in the same file.

Any standard alphabetic character (that is @code{a} through @code{z} or
@code{A} through @code{Z}) in the @code{\luwfcs} field will override the
standard lower- upper case pairing.  For example, the following will
treat @code{X} as the upper case equivalent of @code{z}:
@example

\luwfcs z X

@end example
@noindent
Note that @code{Z} will still have @code{z} as its lowercase
equivalent in this case.

The @code{\luwfcs} field is allowed to map multiple multibyte lowercase
characters to the same multibyte uppercase character, and vice versa.
This may be useful in some situations, but it introduces an element of
ambiguity into the decapitalization and recapitalization processes.  If
ambiguous capitalization is supported, then for the previous example,
@code{z} will have both @code{X} and @code{Z} as uppercase equivalents,
and @code{X} will have both @code{x} and @code{Z} as lowercase
equivalents.

@c ----------------------------------------------------------------------------
@ifset textin
@node \scl (xxOUTX.CTL), \wfc (xxOUTX.CTL), \luwfcs (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \scl, \wfc, \luwfcs, Text output control file
@end ifclear
@section Text output string classes: \scl
@findex \scl

@ifset textin
It is possible to define string classes, as discussed in section
@ifset txt
`String class: \scl' above.
@end ifset
@ifclear txt
@ref{\scl}.
@end ifclear
@end ifset
@ifclear textin
A string class is defined by the @code{\scl} field code followed by the
class name, which is followed in turn by one or more contiguous
character strings or (previously defined) string class names.  A string
class name used as part of the class definition must be enclosed in
square brackets.
@end ifclear
For example, the sample text output control file given below contains
the following lines:
@example
@group
a. \scl X t s c
b. \ch "h"   "j"   / [X] ~_
@end group
@end example
@noindent
Line a defines a string class including t, s, and c; change rule b
makes use of this class to block the change of h to j when it occurs in
the digraphs th, sh, and ch.

@ifclear textin
The class name must be a single, contiguous sequence of printing
characters.  Characters and words which have special meanings in tests
should not be used.  The actual character strings have no such
restrictions.  The individual members of the class are separated by
spaces, tabs, or newlines.

Each @code{\scl} field defines a single string class.  Any number of
@code{\scl} fields may appear in the file.  The only restriction is
that a string class must be defined before it is used.
@end ifclear

@ifset ktext
Changes in the text output control file may also make use of string
classes defined in the KTEXT control file.
@end ifset

@c ----------------------------------------------------------------------------
@ifset textin
@node \wfc (xxOUTX.CTL), \wfcs (xxOUTX.CTL), \scl (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \wfc, \wfcs, \scl, Text output control file
@end ifclear
@section Caseless word formation characters: \wfc
@findex \wfc

To break a text into words, the program needs to know which characters
are used to form words.  It always assumes that the letters @code{A}
through @code{Z} and @code{a} through @code{z} are used as word
formation characters.  If the orthography of the language the user is
working in uses any characters that do not have different lowercase and
uppercase forms, these must given in a @code{\wfc} field in the text
input control file.

For example, English uses an apostrophe character (@code{'}) that could
be considered a word formation character.  This information is provided
by the following example:
@example

\wfc  '    @value{commentchar} needed for words like don't

@end example

Notice that the characters in the @code{\wfc} field may be separated by
spaces, although it is not required to do so.  If more than one
@code{\wfc} field occurs in the text input control file, the program
uses the combination of all characters defined in all such fields as
word formation characters.

The comment character cannot be designated as a word formation character.
If the orthography includes the @value{commentcharname}, then a different
comment character must be defined with the @samp{-c} command line option
when @value{ProgName} is initiated; see
@ifset txt
@ifset stamp
`STAMP Command Options' above.
@end ifset
@ifset intergen
`Running INTERGEN' above.
@end ifset
@ifset ktext
`Running KTEXT' above.
@end ifset
@end ifset
@ifclear txt
@ifset stamp
@ref{Command options}.
@end ifset
@ifset intergen
@ref{Running INTERGEN}.
@end ifset
@ifset ktext
@ref{Running KTEXT}.
@end ifset
@end ifclear

@c ----------------------------------------------------------------------------
@ifset textin
@node \wfcs (xxOUTX.CTL), Sample text output control file, \wfc (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node \wfcs, Sample text output control file, \wfc, Text output control file
@end ifclear
@section Multibyte caseless word formation characters: \wfcs
@findex \wfcs

The @code{\wfcs} field allows multibyte characters to be defined as
``caseless'' word formation characters.  It has the same relationship to
@code{\wfc} that @code{\luwfcs} has to @code{\luwfc}.  The multibyte word
formation characters are separated from each other by whitespace.

@c ----------------------------------------------------------------------------
@ifset textin
@node Sample text output control file, , \wfcs (xxOUTX.CTL), Text output control file
@end ifset
@ifclear textin
@node Sample text output control file, , \wfcs, Text output control file
@end ifclear
@section A sample text output control file

A complete text output control file used for adapting to Asheninca
Campa is given below.

@example
@group
\id AEouttx.ctl for Asheninca Campa
\ch "N"   "m"  / _ p       @value{commentchar} assimilates before p
\ch "N"   "n"              @value{commentchar} otherwise becomes n
\ch "ny"  "n~"

\ch "ts"  "th" / ~_ i      @value{commentchar} (N)tsi is unchanged
\ch "tsy" "ch"
\ch "sy"  "sh"
\ch "t"   "tz" / n _ i

\ch "k"   "qu" / _ i / _ e
\ch "k"   "q"  / _ y
\ch "k"   "c"

\scl X t s c               @value{commentchar} define class of  t   s   c
\ch "h"   "j"   / [X] ~_   @value{commentchar} change except in th, sh, ch

\ch "#"   " "              @value{commentchar} remove fixed space
\ch "@@"   ""              @value{commentchar} remove blocking character
@end group
@end example
