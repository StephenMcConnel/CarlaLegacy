@c this file should be @include d by another -*- texinfo -*- file
@c following a node `Dictionary files' and a chapter title.
@c
@c This material is adapted from chapter 11 of
@c     Weber, David J., H. Andrew Black, and Stephen R. McConnel.
@c     AMPLE: a tool for exploring morphology.
@c     Occasional Publications in Academic Computing No. 12.
@c     Dallas, TX: Summer Institute of Linguistics. 1988.
@c and section 7.1 of
@c     Weber, David J., H. Andrew Black, Stephen R. McConnel, and Alan Buseman.
@c     STAMP: a tool for dialect adaptation.
@c     Occasional Publications in Academic Computing No. 15.
@c     Dallas, TX: Summer Institute of Linguistics. 1990.
@c
@c this file is conditionalized by
@c	@set ample
@c	@set stamp
@c
@c Modified for AMPLE v. 3.3.0 and STAMP v. 2.1b1 by H. Andrew Black,
@c      May 14, 1999
@set dictfile
@ifclear endash
@iftex
@ifset html
@set endash -
@end ifset
@ifclear html
@set endash --
@end ifclear
@end iftex
@ifinfo
@set endash -
@end ifinfo
@end ifclear
@c
@ifclear commentchar
@ifset ample
@set commentchar |
@set ProgName AMPLE
@end ifset
@ifset stamp
@set commentchar |
@set ProgName STAMP
@end ifset
@end ifclear
@ifclear commentchar
@set commentchar ;
@end ifclear
@ifclear ProgName
@set ProgName UNKNOWN_PROGRAM
@end ifclear
@cindex dictionary files

This chapter describes the content of @value{ProgName} dictionary
files.  These are normally divided into
@enumerate
@item
a prefix dictionary file (if needed),
@item
an infix dictionary file (if needed),
@item
an suffix dictionary file (if needed), and
@item
one or more root dictionary files.
@end enumerate

@noindent
With the @samp{-u} command line option in conjunction with the
@code{\unified} field in the dictionary code table file, the
dictionary can be stored as one or more files containing entries of any
type: prefix, infix, suffix, or root.

The following sections describe the different types of fields used in
the different types of dictionary files.  Remember, the mapping from
the actual field codes used in the dictionary files to the type codes
that @value{ProgName} uses internally is controlled by the dictionary code table
file
@ifset txt
(see `Dictionary Code Table File' above).
@end ifset
@ifclear txt
(@pxref{Dictionary code table file}).
@end ifclear

@ifset ample
@menu
* Allomorph::                               Internal code A
* Category::                                Internal code C
* Elsewhere allomorph::                     Internal code E
* Feature descriptor::                      Internal code F
* Root gloss::                              Internal code G
* Infix location::                          Internal code L
* Morphname::                               Internal code M
* Order class::                             Internal code O
* Morpheme property::                       Internal code P
* Morpheme type::                           Internal code T
* Underlying form::                         Internal code U
* Morpheme co-occurrence constraint::       Internal code Z
* Do not load::                             Internal code !
@end menu
@end ifset
@ifset stamp
@menu
* Allomorph::                               Internal code A
* Category::                                Internal code C
* Elsewhere allomorph::                     Internal code E
* Infix location::                          Internal code L
* Morphname::                               Internal code M
* Order class::                             Internal code O
* Morpheme property::                       Internal code P
* Morpheme type::                           Internal code T
* Do not load::                             Internal code !
@end menu
@end ifset

@c ----------------------------------------------------------------------------
@node Allomorph, Category, Dictionary files, Dictionary files
@section Allomorph (internal code A)

Each dictionary entry must contain one or more allomorph fields.  Each
of these contains one of the infix's allomorphs, that is, the string of
characters by which the affix is represented in text and recognized by
@value{ProgName}.

If an affix has multiple allomorphs, each one must be entered in its own
allomorph field.  These fields should be ordered with those on which the
strictest constraints have been imposed preceding those with less strict
or no constraints.  The only exception to this is the use of indexed
string classes to indicate reduplication.  (See lines 20 and 21 below.)

Properties, constraints, and comments may follow the allomorph string.
Any properties must be listed before any constraints.  String, punctuation and
morpheme environment constraints may be intermixed, but must come
before any comments.  A complete BNF grammar of an allomorph field is
given below.

@example

@group
 1a. <allomorph_field> ::= <allomorph>
 1b.                       <allomorph> <properties>
 1c.                       <allomorph> <constraints>
 1d.                       <allomorph> <properties> <constraints>
 1e.                       <allomorph> <comment>
 1f.                       <allomorph> <properties> <comment>
 1g.                       <allomorph> <constraints> <comment>
 1h.                       <allomorph> <properties> <constraints> <comment>
@end group

@group
 2a. <allomorph>       ::= <literal>
 2b.                       <literal> @{ <literal> @}
 2c.                       <redup_pattern>
 2d.                       <redup_pattern> @{ <literal> @}
@end group

@group
 3a. <properties>      ::= <literal>
 3b.                       <literal> <properties>
@end group

@c Following reworked by hab 14-May-1999
@group
 4a. <constraints>     ::= <string_constraint>
 4b.                       <morph_constraint>
 4c.                       <punct_constraint>
 4d.                       <string_constraint> <constraints>
 4e.                       <morph_constraint> <constraints>
 4f.                       <punct_constraint> <constraints>
@end group

 5.  <comment>         ::= <comment_char> anything to the end of the line

@group
 6a. <string_constraint> ::= / <envbar> <string_right>
 6b.                         / <string_left> <envbar>
 6c.                         / <string_left> <envbar> <string_right>
@end group

@group
 7a. <string_left>       ::= <string_side>
 7b.                         <boundary>
 7c.                         <boundary> <string_side>
 7d.                         <string_side> # <string_side>
 7e.                         <boundary> <string_side> # <string_side>
@end group

@group
 8a. <string_right>      ::= <string_side>
 8b.                         <boundary>
 8c.                         <string_side> <boundary>
 8d.                         <string_side> # <string_side>
 8e.                         <string_side> # <string_side> <boundary>
@end group

@group
 9a. <string_side>       ::= <string_item>
 9b.                         <string_item> <string_side>
 9c.                         <string_item> ... <string_side>
@end group

@group
10a. <string_item>       ::= <string_piece>
10b.                         ( <string_piece> )
@end group

@group
11a. <string_piece>      ::= ~ <string_piece>
11b.                         <literal>
11c.                         [ <literal> ]
11d.                         [ <indexed_literal> ]
@end group

@group
12a. <morph_constraint>  ::= +/ <envbar> <morph_right>
12b.                         +/ <morph_left> <envbar>
12c.                         +/ <morph_left> <envbar> <morph_right>
@end group

@group
13a. <morph_left>        ::= <morph_side>
13b.                         <boundary>
13c.                         <boundary> <morph_side>
13d.                         <morph_side> # <morph_side>
13e.                         <boundary> <morph_side> # <morph_side>
@end group

@group
14a. <morph_right>       ::= <morph_side>
14b.                         <boundary>
14c.                         <morph_side> <boundary>
14d.                         <morph_side> # <morph_side>
14e.                         <morph_side> # <morph_side> <boundary>
@end group

@group
15a. <morph_side>        ::= <morph_item>
15b.                         <morph_item> <morph_side>
15c.                         <morph_item> ... <morph_side>
@end group

@group
16a. <morph_item>        ::= <morph_piece>
16b.                         ( <morph_piece> )
@end group

@group
17a. <morph_piece>       ::= ~ <morph_piece>
17b.                         <literal>
17c.                         [ <literal> ]
17d.                         @{ <literal> @}
@end group

@c Punct items added by hab 14-May-1999
@c numbering of following items also reworked
@group
18a. <punct_constraint>  ::= ./ <envbar> <punct_right>
18b.                         ./ <punct_left> <envbar>
18c.                         ./ <punct_left> <envbar> <punct_right>
@end group

@group
19a. <punct_left>        ::= <punct_side>
19b.                         <boundary>
19c.                         <boundary> <punct_side>
@end group

@group
20a. <punct_right>       ::= <punct_side>
20b.                         <boundary>
20c.                         <punct_side> <boundary>
@end group

@group
21a. <punct_side>        ::= <punct_item>
21b.                         <punct_item> <punct_side>
@end group

@group
22a. <punct_item>        ::= <punct_piece>
22b.                         ( <punct_piece> )
@end group

@group
23a. <punct_piece>       ::= ~ <punct_piece>
23b.                         <literal>
23c.                         [ <literal> ]
@end group

@group
24a. <envbar>            ::= _
24b.                         ~_
@end group

@group
25a. <boundary>          ::= #
25b.                         ~#
@end group

@group
26a. <redup_pattern>     ::= [ <indexed_literal> ]
26b.                         <literal> [ <indexed_literal> ]
26c.                         [ <indexed_literal> ] <literal>
26d.                         [ <indexed_literal> ] <redup_pattern>
26e.                         <redup_pattern> [ <indexed_literal> ]
@end group

27.  <indexed_literal>   ::= <literal> ^ <number>

28.  <literal>           ::= one or more contiguous characters

@group
29.  <comment_char>      ::= character defined by @samp{-c} command
							 line option, or @code{|} by default

30.  <number>            ::= one or more contiguous digits (0-9)
@end group

@end example

@subsubheading Comments on selected BNF rules
@table @asis

@item 2.
The (first) literal string is a surface form representation of the
morpheme.  The literal string enclosed in braces is a unique allomorph
identification string.  (The identification string is a feature added
to support LinguaLinks.  It is not stored unless the @samp{-b} command
line option is used.

@item 3.
Each literal string is an allomorph property defined by a @code{\ap}
field in the analysis data file.

@c Item 4 reworked by hab 14-May-1999
@item 4.
String, punctuation and morpheme constraints can be mixed together, but
it is recommended that you group the string constraints together, the
punctuation constraints together and the morpheme constraints together.

@item 5.
A comment begins with a specified character and ends with the end of
the line.

@item 7@value{endash}8.
Note that what can appear to the left of the environment bar is a
mirror image of what can appear to the right.

@item 7de.
@itemx 8de.
These should be avoided, and other means used to prune analyses based
on adjacent words.

@item 9c.
An ellipsis (@code{...}) indicates a possible break in contiguity.

@item 10b.
Something enclosed in parentheses is optional.

@item 11a.
A tilde (@code{~}) reverses the desirability of an element, causing the
constraint to fail if it is found rather than fail if it is not found.

@item 11b.
A literal is matched against the surface form of the word.

@item 11c.
A literal enclosed in square brackets must be the name of a string
class defined by a @code{\scl} field in the analysis data file or the
dictionary orthography change table file.

@item 11d.
The indexed literal enclosed in square brackets must match an indexed
literal given as part of the reduplication allomorph pattern.  (See 2c,
2d, and 26.)

@item 13@value{endash}14.
Note that what can appear to the left of the environment bar is a
mirror image of what can appear to the right.

@item 13de.
@itemx 14de.
These should be avoided, and other means used to prune analyses based
on adjacent words.

@item 15c.
An ellipsis (@code{...}) indicates a possible break in contiguity.

@item 16b.
Something enclosed in parentheses is optional.

@item 17a.
A tilde (@code{~}) reverses the desirability of an element, causing the
constraint to fail if it is found rather than fail if it is not found.

@item 17b.
A literal is a morphname from one of the dictionary files.

@item 17c.
A literal enclosed in square brackets must be the name of a morpheme
class defined by a @code{\mcl} field in the analysis data file.

@item 17d.
A literal enclosed in curly braces must be one of the following
(checked in this order):
@enumerate
@item
one of the keywords @code{root}, @code{prefix}, @code{infix}, or
@code{suffix}
@item
a property name defined by an @code{\ap} or @code{\mp} field in the
analyis data file
@item
a category name defined by a @code{\ca} field in the analysis data file
@item
a category class name defined by a @code{\ccl} field in the analysis
data file
@item
a morpheme class name defined by a @code{\mcl} field in the analysis
data file
@end enumerate

@c 19-23 added by hab 14-May-1999
@item 19@value{endash}20.
Note that what can appear to the left of the environment bar is a
mirror image of what can appear to the right.

@item 22b.
Something enclosed in parentheses is optional.

@item 23a.
A tilde (@code{~}) reverses the desirability of an element, causing the
constraint to fail if it is found rather than fail if it is not found.

@item 23b.
A literal is a punctuation character.
@ifset ample
All such punctuation characters should not be listed in the set of word
formation characters.  See
@end ifset
@ifset ampletxt
`Text Input Control File' below.
@end ifset
@ifset amplentxt
@ref{Text input control file}.
@end ifset

The punctuation characters can match punctuation characters either
before or after the current word.  Unlike string constraints,
punctuation constraints effectively ignore the position of the
conditioned allomorph within the word.  All that matters are any
punctuation characters immediately preceding or following the current
word.  Further note that neither ellipsis nor cross word boundary
conditions are allowed.

@item 24.
A tilde (@code{~}) attached to the environment bar inverts the sense of
the constraint as a whole.

@item 25b.
The boundary marker preceded by a tilde (@code{~#}) indicates that it
must not be a word boundary.

@item 26@value{endash}27.
Although the BNF has spaces in it to improve readability, these two items
cannot have embedded spaces in the dictionary file.

@item 26.
The reduplication allomorph pattern contains references to string classes
and possibly literal strings.  The string class names are indexed to
indicate identical shared values, either in the string environment
constraint or in more than one location in the reduplication allomorph
pattern itself.  @emph{Note: this has been implemented only for AMPLE at this
point.}

@item 27.
The literal (without the following index given by an ASCII caret
(@code{^}) and a number) must be the name of a string class defined by a
@code{\scl} field in the analysis data file or the dictionary orthography
change table file.

@item 28.
The special characters used by environment constraints can be included
in a literal only if they are immediately preceded by a backslash:
@example

\+  \/  \#  \~  \[  \]  \(  \)  \@{  \@}  \.  \_  \\

@end example
@end table

@noindent
The allomorph field is used in all types of dictionary entries: prefix,
infix, suffix, and root.

@c ----------------------------------------------------------------------------
@node Category, Elsewhere allomorph, Allomorph, Dictionary files
@section Category (internal code C)

Each dictionary entry must contain a category field.  If multiple
category fields exist, then their contents are merged together.

For affix entries, this field must contain at least one category pair
for the morpheme, but may contain any number of category pairs
separated by spaces or tabs.  Each category pair consists of two
category names separated by a slash (@code{/}).  The category names
must have been defined by a @code{\ca} field in the analysis data
file.  The first category is the @dfn{from category}, that is, the
category of the unit to which this morpheme can be affixed.  The second
category is the @dfn{to category}, that is, the category of the result
after this morpheme has been affixed.

For root entries, this field contains one or more morphological
categories as defined by a @code{\ca} field in the analysis data file.
If multiple categories are listed, they should be separated by spaces
or tabs.

The category field is used in all types of dictionary entries: prefix,
infix, suffix, and root.

@c ----------------------------------------------------------------------------
@ifset ample
@node Elsewhere allomorph, Feature descriptor, Category, Dictionary files
@end ifset
@ifset stamp
@node Elsewhere allomorph, Infix location, Category, Dictionary files
@end ifset
@section Elsewhere Allomorph (internal code E)

@ifset ample
For compatibility with STAMP, the ``elsewhere'' field defines an
allomorph.  In AMPLE, this field also provides a default value for the
underlying form.

The syntax of the elsewhere allomorph field is the same as the syntax
of the normal allomorph field.
@end ifset
@ifset ampletxt
See `Allomorph (internal code A)' above.
@end ifset
@ifset amplentxt
@xref{Allomorph}.
@end ifset
@ifset stamp
WRITE ME!
@end ifset

The elsewhere allomorph field is used in all types of dictionary
entries: prefix, infix, suffix, and root.

@ifset ample
@c ----------------------------------------------------------------------------
@node Feature descriptor, Root gloss, Elsewhere allomorph, Dictionary files
@section Feature Descriptor (internal code F)

The feature descriptor field is always optional.  It contains the names of
one or more features that are written verbatim to the @code{\fd} field
of the output analysis file.  It is not otherwise used by @value{ProgName}.

If a dictionary entry contains multiple feature descriptor fields,
their contents are merged together.

The feature descriptor field is used in all types of dictionary entries:
prefix, infix, suffix, and root.
@end ifset

@ifset ample
@c ----------------------------------------------------------------------------
@node Root gloss, Infix location, Feature descriptor, Dictionary files
@section Root Gloss (internal code G)

The root gloss field contains an alternative morphname for writing to
the output analysis file.  It is enabled by the @samp{-g} command line
option.  Without this command line option, it is totally ignored by
@value{ProgName}.
@end ifset
@ifset ampletxt
See `Morphname (internal code M)' below.
@end ifset
@ifset amplentxt
@xref{Morphname}.
@end ifset
@ifset ample
Only one root gloss field is allowed in each dictionary entry.  If an
entry has more than one root gloss field, then the first one is used
and the others trigger provoke an error message.

The root gloss field is used only in root dictionary entries.

@c ----------------------------------------------------------------------------
@node Infix location, Morphname, Root gloss, Dictionary files
@end ifset
@ifset stamp
@node Infix location, Morphname, Elsewhere allomorph, Dictionary files
@end ifset
@section Infix location (internal code L)

The infix location field serves to restrict where infixes may be found,
and must be included in each infix dictionary entry.  Subject to the
constraints imposed by the infix location field, @value{ProgName} searches the
rest of the word for any occurrence of any allomorph string of the
infix.  This makes infixes rather expensive, computationally, so they
should be constrained as much as possible.

@example

@group
 1.  <infix_location> ::= <types> <constraints>

 2a. <types>          ::= <type>
 2b.                      <type> <types>
@end group

@group
 3a. <constraints>    ::= <environment>
 3b.                      <environment> <constraints>
@end group

@group
 4a. <environment>    ::= <marker> <leftside> <envbar> <rightside>
 4b.                      <marker> <leftside> <envbar>
 4c.                      <marker> <envbar> <rightside>
@end group

@group
 5a. <leftside>       ::= <side>
 5b.                      <boundary>
 5c.                      <boundary> <side>
@c 5d.                      <side> # <side>
@c 5e.                      <boundary> <side> # <side>
@end group

@group
 6a. <rightside>      ::= <side>
 6b.                      <boundary>
 6c.                      <side> <boundary>
@end group

@group
 7a. <side>           ::= <item>
 7b.                      <item> <side>
 7c.                      <item> ... <side>
@end group

@group
 8a. <item>           ::= <piece>
 8b.                      ( <piece> )
@end group

@group
 9a. <piece>          ::= ~ <piece>
 9b.                      <literal>
 9c.                      [ <literal> ]
@end group

@group
10a. <type>           ::= prefix
10b.                      root
10c.                      suffix
@end group

@group
11a. <marker>         ::= /
11b.                      +/
@end group

@group
12a. <envbar>         ::= _
12b.                      ~_
@end group

@group
13a. <boundary>       ::= #
13b.                      ~#

14.  <literal>        ::= one or more contiguous characters
@end group

@end example

@subsubheading Comments on selected BNF rules
@table @asis

@item 2.
The first part of the infix location field lists the type of morpheme
in which the infix may be hidden.  This consists of one or more of the
words @code{prefix}, @code{root}, or @code{suffix}.  If @code{prefix}
is given, then @value{ProgName} looks for infixes after exhausting the possible
prefixes at a given point in the word, and resumes looking for more
prefixes after finding an infix.  Similarly, if @code{root} is given,
then @value{ProgName} looks for infixes after running out of roots while parsing
the word, and if it finds an infix, it looks for more roots.  Suffixes
are treated the same way if @code{suffix} is given in the infix
location field.

@item 5.
A boundary marker (@code{#}) on the left side of the environment bar
refers to the place in the word which the parse has reached before
looking for infixes, not to the beginning of the word.

@item 6.
A boundary marker (@code{#}) on the right side of the environment bar
refers to the end of the word.

@item 7c.
An ellipsis (@code{...}) indicates a possible break in contiguity.

@item 8b.
Something enclosed in parentheses is optional.

@item 9a.
A tilde (@code{~}) reverses the desirability of an element, causing the
constraint to fail if it is found rather than fail if it is not found.

@item 11.
A @code{+/} is usually used for morpheme environment constraints, but may
used for infix location environment constraints as well.

@item 12.
A tilde attached to the environment bar (@code{~_}) inverts the sense of
the constraint as a whole.

@item 13b.
The boundary marker preceded by a tilde (@code{~#}) indicates that it
must not be a word boundary.

@item 14.
The special characters used by environment constraints can be included
in a literal only if they are immediately preceded by a backslash:
@example

\+  \/  \#  \~  \[  \]  \(  \)  \@{  \@}  \.  \_  \\

@end example
@end table

@noindent
The infix location field is used only in infix dictionary entries.

@c ----------------------------------------------------------------------------
@node Morphname, Order class, Infix location, Dictionary files
@section Morphname (internal code M)

A morphname is an arbitrary name for a given morpheme.  Only the first
word (string of contiguous nonspace characters) following the morphname
field code is used as the morphname.  Morphnames must be less than 64
characters long.

A morphname serves two important functions:
@enumerate
@item
It identifies a morpheme in morpheme environment constraints, morpheme
co-occurrence constraints, ad hoc pairs, and tests.

@item
It is the default morpheme identifier written to the output analysis
file.
@ifset ampletxt
See `Root Gloss (internal code G)' above.
@end ifset
@ifset amplentxt
@xref{Root gloss}.
@end ifset
@end enumerate

@noindent
Generally, a morphname is an identifier of a morpheme and does not
need to faithfully represent that morpheme's meaning or function.

If a dictionary entry has more than one morphname field, the morphname
from the first one is used; the others cause an error message.  The
morphname field is used in all types of dictionary entries: prefix,
infix, suffix, and root.  The usage differs somewhat between affix and
root dictionary entries, so these two types of morphnames are described
separately.

@subheading Affix morphnames

Every affix dictionary entry must have a morphname field.  Users are
strongly encouraged to observe the following suggestions in creating
affix morphnames:

@enumerate
@item
Make each morphname unique.  If two morphemes have the same name, it is
impossible to refer unambiguously to them.  The same morphname should
not be used in different affix dictionaries (that is, in the prefix
dictionary and in the suffix dictionary).

@item
Keep morphnames short.  This reduces the size of analysis files and
makes text glossing more aesthetically pleasing.  For example, for a
verbal person marker, use simply @code{1} rather than @code{1P} unless
there is good reason to add the @code{P} for person or possessive.  For
a first person object marker, @code{1O} might serve as well as
@code{1OBJ}.

@item
Use only uppercase alphabetic characters and numbers for contrast with
root morphnames, which are generally made up of lowercase alphabetic
characters.  Be cautious in using hyphens, periods, underscores,
slashes, backslashes, or other nonalphanumeric characters.  The reason
to avoid these is that other programs which apply to the resulting
analysis may make use of nonalphanumerics in different ways.

@item
Design a syntax of names and stick to it for inflectional morphemes
which combine more than one semantic notion.  For example, for Latin
nominal inflections, which indicate gender, number, and case, the
syntax might be
@example

MORPHNAME = GENDER CASE NUMBER

@end example
@noindent
where @code{GENDER} is @code{M} for masculine, @code{F} for feminine
and @code{N} for neuter; @code{CASE} is @code{N} for nominative,
@code{A} for accusative, @code{G} for genitive, and so on; and @code{NUMBER}
is @code{S} for singular and @code{P} for plural.  The name for
masculine nominative singular would then be @code{MNS}.
@end enumerate

@subheading Root morphnames

Root morphnames are generally either glosses or etymologies.
Etymologies are frequently marked with a leading asterisk (@code{*}).
(This is used by STAMP to indicate regular sound changes.)

If the morphname field contains only an asterisk, the morphname becomes
an asterisk followed by whatever allomorph is matched.  If the
morphname field is omitted, or if it contains only a comment, @value{ProgName}
puts whatever allomorph was matched in the text into the analysis.  If
the morpheme contains any alternate forms, it is wise to include an
explicit morphname field.

@c ----------------------------------------------------------------------------
@node Order class, Morpheme property, Morphname, Dictionary files
@section Order class (internal code O)

The order class of an affix is a number indicating its position
relative to other morphemes.  Prefixes should be assigned negative
numbers and suffixes should be assigned positive numbers.  Infixes
should be assigned order class values appropriate to where they can
appear in the word relative to the prefixes and suffixes.

If the order class field is omitted, then a default value of zero (0)
is assigned to the affix.  Order class values must be between -32767
and 32767.

Order classes are used only by tests in the analysis data file.  They
are needed only if appropriate tests are written to take advantage of
them.

The order class field is used only in affix type dictionary entries:
prefix, infix, and suffix.  Roots always have an implicit order class
of zero.

@c ----------------------------------------------------------------------------
@node Morpheme property, Morpheme type, Order class, Dictionary files
@section Morpheme property (internal code P)

This field contains one or more morpheme properties.  These properties
must have been defined by a @code{\mp} field in the analysis data file.
A morpheme property is inherited by all allomorphs of the morpheme.

The morpheme property field is optional, and may be repeated.  If
multiple properties apply to a morpheme, they may be given all in a
single field or each in a separate field.

Morpheme properties typically indicate a characteristic of the morpheme
which conditions the occurrence of allomorphs of an adjacent morpheme.
Morpheme properties are used in tests defined in the analysis data file
and in morpheme environment constraints.

The morpheme property field is used in all types of dictionary entries:
prefix, infix, suffix, and root.

@c ----------------------------------------------------------------------------
@ifset ample
@node Morpheme type, Underlying form, Morpheme property, Dictionary files
@end ifset
@ifset stamp
@node Morpheme type, Do not load, Morpheme property, Dictionary files
@end ifset
@section Morpheme type (internal code T)

In a unified dictionary, the type of an entry is determined by the
first letter following the morpheme type field code: @code{p} or
@code{P} for prefixes, @code{i} or @code{I} for infixes, @code{s} or
@code{S} for suffixes, and @code{r} or @code{R} for roots.  The
morpheme type field is not needed for root entries because the entry
type defaults to root.

The morpheme type field is used only in unified dictionary files, since
the morpheme type is otherwise implicit.

@ifset ample
@c ----------------------------------------------------------------------------
@node Underlying form, Morpheme co-occurrence constraint, Morpheme type, Dictionary files
@section Underlying Form (internal code U)

The underlying form field contains information for writing to @code{\u}
fields in the output analysis file.  If a mapping from a dictionary
field code to internal code @code{U} is not defined in the dictionary
code table file, then this field effectively does not exist.

Only one underlying form field is allowed in each dictionary entry.  If an
entry has more than one underlying form field, then the first one is used
and the others trigger provoke an error message.

If a particular record in a dictionary file does not have an underlying
form field, but does use an ``elsewhere'' field
@end ifset
@ifset ampletxt
(see `Elsewhere Allomorph (internal code E)' above),
@end ifset
@ifset amplentxt
(@pxref{Elsewhere allomorph}),
@end ifset
@ifset ample
then @value{ProgName} uses the elsewhere entry for the underlying form.  If an
entry has neither an underlying form field nor an elsewhere field,
@value{ProgName} assumes that the underlying form is null and will output a zero
(0) for the underlying form.

The underlying form field is used in all types of dictionary entries:
prefix, infix, suffix, and root.
@end ifset

@ifset ample
@c ----------------------------------------------------------------------------
@node Morpheme co-occurrence constraint, Do not load, Underlying form, Dictionary files
@section Morpheme Co-occurrence Constraint (internal code Z)

@end ifset
@ifset ampletxt
See `Morpheme Co-occurrence Constraint: \mcc' above
@end ifset
@ifset amplentxt
@xref{\mcc},
@end ifset
@ifset ample
for a description of morpheme co-occurrence constraint fields in the
analysis data file.  These fields can also occur in dictionary entries.
This is appropriate only if the constraint is about that morpheme.

One difference between morpheme co-occurrence constraints in the
analysis data file and those found in dictionary entries is that the
field code in the dictionary file is not necessarily @code{\mcc}.  The
primary difference is that morpheme co-occurrence constraints found in
a dictionary entry are stored with the dictionary entry in memory, and
those found in the analysis data file are stored together in one long
list.  If a constraint applies to more than one morpheme, it must be
put in the analysis data file to work properly.

The morpheme co-occurrence constraint field is optional.  If more than
one constraint applies to the morpheme, as many of these fields as
desired may be included.

The morpheme co-occurrence constraint field is used in all types of
dictionary entries: prefix, infix, suffix, and root.

@c ----------------------------------------------------------------------------
@node Do not load, , Morpheme co-occurrence constraint, Dictionary files
@end ifset
@ifset stamp
@node Do not load, , Morpheme type, Dictionary files
@end ifset
@section Do not load (internal code !)

When a ``do not load'' field is included in a record, @value{ProgName}
ignores the record altogether.  This makes it possible to include records
in the dictionary for linguistic purposes, while not needlessly taking up
memory space if the dictionary is used for some other purpose.

The ``do not load'' field is used in all types of dictionary entries:
prefix, infix, suffix, and root.
