


| Andy Black 27-Feb-1998
|            28-Sep-1998 rework inflectional rules to use binary-branching
|                        among the optional elements

| ============================================================
|                     RULES
| ============================================================

rule Word_1 = Word_2 Clitic
								| percolation
		<Word_1 synCat>       = <Word_2 synCat>
		<Word_1 morphoSyntax> = <Word_2 morphoSyntax>
								| constraint
		<Word_2 morphoSyntax> = <Clitic morphoSyntax>

rule Stem = Root
		| percolation
		<Stem synCat>       = <Root rootCat>
		<Stem morphoSyntax> = <Root morphoSyntax>

|
| ------------------------------------------------------------
|     Inflectional rules ("templates")

		| Verbal inflectional "templates"

rule Word = Infl
								| percolation
		<Word synCat>       = <Infl synCat>
		<Word morphoSyntax> = <Infl morphoSyntax>
								| constraints
		<Infl synCat>       = V
								| default assignments
		<Word morphoSyntax subject number> = !sg
		<Word morphoSyntax subject person 1> = !-
		<Word morphoSyntax subject person 2> = !-
		{
		<Word morphoSyntax object>           = none /
		<Word morphoSyntax object>           = unspecified /
		<Word morphoSyntax object  number>   = !sg
		<Word morphoSyntax object  person 1> = !-
		<Word morphoSyntax object  person 2> = !-
		}
		<Word morphoSyntax tense> = !present
		<Word morphoSyntax mood> = !realis
		<Infl morphoSyntax> == [tense: future] -> [mood:irrealis]


rule Infl = Stem Asp
								| percolation
		<Infl synCat>       = <Stem synCat>
		<Infl morphoSyntax> = <Stem morphoSyntax>
								| constraints
		<Stem    synCat>       = V
		<Asp    morphoSyntax> = <Stem morphoSyntax>

rule Infl = Stem Tense
								| percolation
		<Infl synCat>       = <Stem synCat>
		<Infl morphoSyntax> = <Stem morphoSyntax>
								| constraints
		<Stem  synCat>       = V
		<Tense morphoSyntax> = <Stem morphoSyntax>

rule Infl = Stem (Loc) 2PlSubj
								| percolation
		<Infl synCat>       = <Stem synCat>
		<Infl morphoSyntax> = <Stem morphoSyntax>
								| constraints
		<Stem  synCat>       = V
		<Loc   morphoSyntax> = <Stem morphoSyntax>
		<2PlSubj morphoSyntax> = <Stem morphoSyntax>

rule Infl = Stem (Loc) AspPer
								| percolation
		<Infl synCat>       = <Stem synCat>
		<Infl morphoSyntax> = <Stem morphoSyntax>
								| constraints
		<Stem  synCat>       = V
		<Loc   morphoSyntax> = <Stem morphoSyntax>
		<AspPer morphoSyntax> = <Stem morphoSyntax>

rule Infl_1 = Past Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Past   morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = Mood Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Mood   morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = 1st Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<1st    morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = Imm Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Imm    morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = 3SPl Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<3SPl   morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = Rec Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Rec    morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = Ha Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Ha     morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = 3OPl Infl_2
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<3OPl   morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = Infl_2 Loc
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Loc    morphoSyntax> = <Infl_2 morphoSyntax>

rule Infl_1 = Infl_2 Pers
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<Pers   morphoSyntax> = <Infl_2 morphoSyntax>
		<Infl_2 morphoSyntax> == ~[mood: irrealis] | arbitrarily put mood last
		<Infl_2 morphoSyntax> == ~[tense: past]    | arbitrarily put past last

rule Infl_1 = Infl_2 2PlSubj
								| percolation
		<Infl_1 synCat>       = <Infl_2 synCat>
		<Infl_1 morphoSyntax> = <Infl_2 morphoSyntax>
								| constraints
		<Infl_2 synCat>       = V
		<2PlSubj morphoSyntax> = <Infl_2 morphoSyntax>
		<Infl_2 morphoSyntax> == ~[mood: irrealis] | arbitrarily put mood last

|  Had: Rule Word = (MdPst) (1st) (Imm) (3SPl) (Rec) (Ha) (3OPl) Stem Asp (Loc) (Pers) (2PlSubj)
|  Had: Rule Word = Mood (1st) (Imm) (3SPl) (Rec) (Ha) (3OPl) Stem Tense (Pers) (2PlSubj)
|  Had: Rule Word = (MdPst) (1st) (Imm) (Rec) (Ha) (3OPl) Stem (Loc) 2PlSubj
|  Had: Rule Word = (MdPst) (1st) (Imm) (3SPl) (Rec) (Ha) (3OPl) Stem (Loc) AspPer

		| Nominal inflectional "templates"
rule Word = Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraint
		<Stem synCat> = N


		| Adjectival inflectional "templates"
rule Word = Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraint
		<Stem synCat> = ADJ

		| Other word categories do not have any inflection
rule Word = Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraint
		{
		<Stem synCat> = ADV /
		<Stem synCat> = NUM /
		<Stem synCat> = PART
		}

|
| ------------------------------------------------------------
|     Derivational rules

rule Stem = Root_1 Root_2
								| percolation
		<Stem synCat>        = <Root synCat>
		<Stem morphoSyntax>  = <Root_1 morphoSyntax>
		<Stem morphoSyntax> <= <Root_2 morphoSyntax>
								| constraints

								| Derivational "prefixes"
rule Stem_1 = Derv Stem_2
								| percolation
		<Stem_1 synCat>        = <Derv toCat>
		<Stem_1 paradigmClass> = <Derv toParadigmClass>
		<Stem_1 morphoSyntax>  = <Stem_2 morphoSyntax>
		<Stem_1 morphoSyntax> <= <Derv toMorphoSyntax>
								| constraints
		<Stem_2 synCat>        = <Derv fromCat>
		<Stem_2 morphoSyntax>  = <Derv fromMorphoSyntax>
		<Stem_2 paradigmClass> = <Derv fromParadigmClass>

								| Derivational "suffixes"
rule Stem_1 = Stem_2 Derv
								| percolation
		<Stem_1 synCat>        = <Derv toCat>
		<Stem_1 paradigmClass> = <Derv toParadigmClass>
		<Stem_1 morphoSyntax>  = <Stem_2 morphoSyntax>
		<Stem_1 morphoSyntax> <= <Derv toMorphoSyntax>
								| constraints
		<Stem_2 synCat>        = <Derv fromCat>
		<Stem_2 morphoSyntax>  = <Derv fromMorphoSyntax>
		<Stem_2 paradigmClass> = <Derv fromParadigmClass>


| ============================================================
|                     TEMPLATES
| ============================================================

|  Verbal Inflectional templates
Let AspPers be {[cat : Pers]   | some person markers also have aspect
				[cat : AspPer]}

		| Aspect
Let imperfective be [morphoSyntax : [aspect : imperfective
									 mood   : realis]]
Let   perfect    be [morphoSyntax : [aspect :   perfect   ]]
Let   perfective be [morphoSyntax : [aspect :   perfective]]

		| Tense
Let future    be [morphoSyntax : [tense    : future
								  location : none]] | cannot co-occur with loc
Let unSpecFut be [morphoSyntax : [tense : unSpecifiedFuture]]
Let past      be [morphoSyntax : [tense : past
								  mood  : realis]] | past not with IRR
		| Mood
Let irrealis be [morphoSyntax : [mood : irrealis]]
Let   realis be [morphoSyntax : [mood :   realis]]

		| Person
Let 1Sub  be [morphoSyntax : [subject : [person : [1:+]]]] | 2:- if 1PL absent
Let 12Sub be [morphoSyntax : [subject : [person : [1:+
												   2:+]
										]]]
Let 1Obj  be [morphoSyntax : [object  : [person : [1:+]]
							  subject : [person : [1:-]]]]
Let 2Sub  be [morphoSyntax : [subject : [person : [1:-
												   2:+]
										]]]
Let 2Obj  be [morphoSyntax : {[object : [person : [2 : +]]]
							  []  | is this right?
							 }
			 ]
|  or maybe  [morphoSyntax : [object : [person : [2 : !+]]]]
Let 3Sub  be [morphoSyntax : [subject : [person : [1:-
												   2:-]
										]]]
Let 3Obj  be [morphoSyntax : [object  : [person : [1:-
												   2:-]
										]]]
		| Number
Let sgSub be [morphoSyntax : [subject : [number : sg]]]
Let plSub be [morphoSyntax : [subject : [number : pl]]]
Let sgObj be [morphoSyntax : [object  : [number : sg]]]
Let plObj be [morphoSyntax : [object  : [number : pl]]]

		| Special combinations
Let 12PlSub   be 12Sub plSub
Let 2SgSub    be 2Sub  sgSub
Let 2PlSub    be 2Sub  plSub {[perfect] [imperfective]}
Let 2SubFut   be 2Sub        future
Let 2PlSubFut be 2Sub  plSub future
Let 2SgSubPfv be 2Sub  sgSub perfective
Let 3Sub,Pl   be {[3Sub plSub] [3Sub plObj]}
Let 3PlObj    be 3Obj plObj

		| Other inflectional templates
Let reciprocal be [morphoSyntax : [reciprocal : +]]
Let immanent   be [morphoSyntax : [immanent : +]]
				  {[imperfective] [future]}     | only occurs with imperfective
												|  or future
Let distal     be [morphoSyntax : [location : distal  ]]
Let proximal   be [morphoSyntax : [location : proximal]]

|  Derivational templates
Let completely be [morphoSyntax : [completely : +]]
Let pass       be [toMorphoSyntax : [object : none]]
Let caus       be [toMorphoSyntax : [object : [number : [] person:[]] ]]
Let dir        be [toMorphoSyntax : [object : [number : [] person:[]] ]]
Let uo         be [toMorphoSyntax : [object : unspecified] ]

|  set of features defined by AMPLE categories

Let ADJ             be [rootCat: ADJ]
Let ADJ/ADJ         be [fromCat: ADJ   toCat: ADJ]
Let ADJ/N           be [fromCat: ADJ   toCat: N]
Let ADJ/V           be [fromCat: ADJ   toCat: V]
Let ADV             be [rootCat: ADV]
Let ADV/ADV         be [fromCat: ADV   toCat: ADV]
Let ADV/N           be [fromCat: ADV   toCat: N]
Let INCH            be [rootCat: INCH]
Let N               be [rootCat: N]
Let N/N             be [fromCat: N     toCat: N]
Let N/V             be [fromCat: N     toCat: V]
Let NUM             be [rootCat: NUM]
Let NUM/NUM         be [fromCat: NUM   toCat: NUM]
Let PART            be [rootCat: PART]
Let PART/N          be [fromCat: PART   toCat: N]
Let PART/PART       be [fromCat: PART   toCat: PART]
Let V               be [rootCat: V]
Let V/N             be [fromCat: V     toCat: N]
Let V/V             be [fromCat: V     toCat: V]

| set of features defined by AMPLE properties
Let vi be [morphoSyntax : [object : none]]         | intransitive verb
Let vt be [morphoSyntax : [object : [person : []   |   transitive verb
									 number : []]]]

|  Following are AMPLE properties which play no role in word structure building:
Let compound        be []
Let glottalized     be []
Let drops.n         be []
Let deletes.n       be []
Let n.deleted       be []
Let deletes.q       be []
Let q.deleted       be []
Let irr.plural      be []
Let final.short.V   be []
Let follows.short.V be []
Let kh.metathesis   be []
Let q.harmony       be []
Let q.initial       be []
Let MSyllVFinal     be []
Let Pglottalized    be []
Let takes.INCH      be []
Let glottalized.num be []
Let FromPOSG0B8876B8-226D-0358-6B72-7A392E303663.6A be
		   [ fromCat : G0B8876B8-226D-0358-6B72-7A392E303663\:6A ]
