


|   Andy Black 23-Sep-1998

| ============================================================
|                     RULES
| ============================================================

		| Adverbial Clitics
rule Word_1 = Word_2 Clitic
								| percolation
		<Word_1 synCat>       = <Word_2 synCat>
		<Word_1 morphoSyntax> = <Word_2 morphoSyntax>
								| constraint
		<Word_2 morphoSyntax> = <Clitic morphoSyntax>

rule Word_1 = Word_2 PronominalClitic
								| percolation
		<Word_1 synCat>       = <Word_2 synCat>
		<Word_1 morphoSyntax> = <Word_2 morphoSyntax>
								| constraint
		{
		<Word_2 synCat> = V
		{
		  <Word_1 morphoSyntax subject> = <PronominalClitic morphoSyntax>
		   /
		  <Word_1 morphoSyntax object> = <PronominalClitic morphoSyntax>
		}
		/
		<Word_2 synCat> = N
		<Word_1 morphoSyntax possessor> = <PronominalClitic morphoSyntax>
		<PronominalClitic morphoSyntax> = <person: none>  | can't have a 2nd on nouns
		/
		<Word_2 synCat> = Prn
		<Word_1 morphoSyntax subject> = <PronominalClitic morphoSyntax>
		<Word_1 morphoSyntax object>  = <PronominalClitic morphoSyntax>
		}
		| need if word is a noun, then Clitic is pronoun iff word is possessed
		<Word_2> == [synCat: N] -> [morphoSyntax: [possessed : +]]
		<Word_2 morphoSyntax> == [object:  [person: []]] ->
								 [subject: [person: []]]

rule Stem = Root
		| percolation
		<Stem synCat>       = <Root rootCat>
		<Stem morphoSyntax> = <Root morphoSyntax>

|
| ------------------------------------------------------------
|     Inflectional rules ("templates")

		| Verbal inflectional "templates"

rule Word = (Imperative) Aspect (Repetitive) (Pl.pfx) Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraints
		<Stem       synCat>       = V
		<Imperative morphoSyntax> = <Stem morphoSyntax>
		<Aspect     morphoSyntax> = <Stem morphoSyntax>
		<Repetitive morphoSyntax> = <Stem morphoSyntax>
		<Pl.pfx     morphoSyntax> = <Stem morphoSyntax>
		<Word morphoSyntax> == [pluralWord: +] -> ([direction: toNonBase] &
												   ([aspect: potential] /
													[aspect: habitual])
												  )
								| default assignments
		<Word morphoSyntax mood> = !indicative

		| Nominal inflectional "templates"
rule Word = (Possessive) Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraint
		<Stem synCat> = N
		<Word morphoSyntax> <= <Possessive morphoSyntax>
								| default assignments

		| Adjectival inflectional "templates"
rule Word = Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraint
		<Stem synCat> = Adj

		| Other word categories do not have any inflection
rule Word = Stem
								| percolation
		<Word synCat>       = <Stem synCat>
		<Word morphoSyntax> = <Stem morphoSyntax>
								| constraint
		{
		<Stem synCat> = Adv  /
		<Stem synCat> = Conj /
		<Stem synCat> = Det  /
		<Stem synCat> = Num  /
		<Stem synCat> = Prep /
		<Stem synCat> = Prn  /
		<Stem synCat> = Prt  /
		<Stem synCat> = Q    /
		<Stem synCat> = V
		<Stem morphoSyntax pluralWord> = +
		}

|
| ------------------------------------------------------------
|     Derivational rules

rule Stem = Root_1 Root_2
								| percolation
		<Stem synCat>        = <Root synCat>
		<Stem morphoSyntax>  = <Root_1 morphoSyntax>
		<Stem morphoSyntax> <= <Root_2 morphoSyntax>
								| constraints

								| Derivational "prefixes"
rule Stem_1 = Derv Stem_2
								| percolation
		<Stem_1 synCat>        = <Derv toCat>
		<Stem_1 paradigmClass> = <Derv toParadigmClass>
		<Stem_1 morphoSyntax>  = <Stem_2 morphoSyntax>
		<Stem_1 morphoSyntax> <= <Derv toMorphoSyntax>
								| constraints
		<Stem_2 synCat>        = <Derv fromCat>
		<Stem_2 morphoSyntax>  = <Derv fromMorphoSyntax>
		<Stem_2 paradigmClass> = <Derv fromParadigmClass>

								| Derivational "suffixes"
rule Stem_1 = Stem_2 Derv
								| percolation
		<Stem_1 synCat>        = <Derv toCat>
		<Stem_1 paradigmClass> = <Derv toParadigmClass>
		<Stem_1 morphoSyntax>  = <Stem_2 morphoSyntax>
		<Stem_1 morphoSyntax> <= <Derv toMorphoSyntax>
								| constraints
		<Stem_2 synCat>        = <Derv fromCat>
		<Stem_2 morphoSyntax>  = <Derv fromMorphoSyntax>
		<Stem_2 paradigmClass> = <Derv fromParadigmClass>


| ============================================================
|                     TEMPLATES
| ============================================================

|  Verbal Inflectional templates
		| Aspect
Let potential    be [morphoSyntax : [aspect : potential]]
Let completive   be [morphoSyntax : [aspect : completive]]
Let habitual     be [morphoSyntax : [aspect : habitual]]
Let stative      be [morphoSyntax : [aspect : stative]]
Let infinitive   be [morphoSyntax : [aspect : infinitive]] | non-noun???
Let potentialOrHabitual be {[potential] [habitual]}

		| Motion
Let come be [morphoSyntax : [direction : toBase]]
Let go   be [morphoSyntax : [direction : toNonBase]]

		| Mood
Let interrogative be [morphoSyntax: [mood : interrogative]]
Let imperative    be [morphoSyntax: [mood : imperative]]
Let hortatory     be [morphoSyntax: [mood : hortatory]]

		| Mode (is this the right term?)
Let aplastando be [toMorphoSyntax: [mode : [aplastando : +]]]
Let bien       be [toMorphoSyntax: [mode : [bien : +]]]
Let chaz       be [toMorphoSyntax: [mode : [chaz : +]]]
Let chga       be [toMorphoSyntax: [mode : [chga : +]]]
Let chich      be [toMorphoSyntax: [mode : [chich : +]]]
Let chix       be [toMorphoSyntax: [mode : [chix : +]]]
Let chk        be [toMorphoSyntax: [mode : [chk : +]]]
Let chka       be [toMorphoSyntax: [mode : [chka : +]]]
Let con        be [toMorphoSyntax: [mode : [con : +]]]
Let definite   be [morphoSyntax: [mode : [definite : +]]] | is this best here?
Let de.veras   be [morphoSyntax: [mode : [de.veras : +]]]
Let direcci¢n.de be [morphoSyntax: [mode : [direcci¢n.de : +]]]
Let direcci¢n.de2 be [morphoSyntax: [mode : [direcci¢n.de2 : +]]]
Let dubitative be [toMorphoSyntax: [mode : [dubitative : +]]]
Let en.exceso  be [toMorphoSyntax: [mode : [en.exceso : +]]]
Let firmamente be [toMorphoSyntax: [mode : [firmamente : +]]]
Let ga         be [toMorphoSyntax: [mode : [ga : +]]]
Let hasta      be [morphoSyntax: [mode : [hasta : +]]]
Let intensive  be [morphoSyntax: [mode : [intensive : +]]]
Let k          be [toMorphoSyntax: [mode : [k : +]]]
Let kaz        be [toMorphoSyntax: [mode : [kaz : +]]]
Let ke         be [toMorphoSyntax: [mode : [ke : +]]]
Let kero       be [toMorphoSyntax: [mode : [kero : +]]]
Let lolj       be [toMorphoSyntax: [mode : [lolj : +]]]
Let nada.mas   be [morphoSyntax: [mode : [nada.mas : +]]]
Let nninn      be [toMorphoSyntax: [mode : [nninn : +]]]
Let nyaz       be [toMorphoSyntax: [mode : [nyaz : +]]]
Let pobre      be [toMorphoSyntax: [mode : [pobre : +]]]
Let rapidly    be [toMorphoSyntax: [mode : [rapidly : +]]]
Let re         be [morphoSyntax: [mode : [re : +]]]
Let repeatedly be [toMorphoSyntax: [mode : [repeatedly : +]]]
Let repetitive be [morphoSyntax: [mode : [repetitive : +]]]
Let respect    be [morphoSyntax: [mode : [respect : +]]]
Let riz        be [toMorphoSyntax: [mode : [riz : +]]]
Let rodar      be [toMorphoSyntax: [mode : [rodar : +]]]
Let sin.impedimento be [morphoSyntax: [mode : [sin.impedimento : +]]]
Let stek       be [morphoSyntax: [mode : [stek : +]]]
Let tat        be [toMorphoSyntax: [mode : [tat : +]]]
Let tega       be [toMorphoSyntax: [mode : [tega : +]]]
Let tek        be [morphoSyntax: [mode : [tek : +]]]
Let tel        be [toMorphoSyntax: [mode : [tel : +]]]
Let tez        be [morphoSyntax: [mode : [tez : +]]]
Let tin        be [toMorphoSyntax: [mode : [tin : +]]]
Let tip        be [toMorphoSyntax: [mode : [tip : +]]]
Let tit        be [toMorphoSyntax: [mode : [tit : +]]]
Let xexj       be [toMorphoSyntax: [mode : [xexj : +]]]
Let xoxj       be [toMorphoSyntax: [mode : [xoxj : +]]]
Let yann       be [morphoSyntax: [mode : [yann : +]]]
Let yoll       be [toMorphoSyntax: [mode : [yoll : +]]]

		| Person
Let 1sg be [morphoSyntax: [person : 1
						   number : sg]]
Let 1pe be [morphoSyntax: [person : 1
						   number : plExc]]
Let 1pi be [morphoSyntax: [person : 1
						   number : plInc]]
Let 2sg be [morphoSyntax: [person : 2
						   number : sg]]
Let 2pl be [morphoSyntax: [person : 2
						   number : pl]]
Let 3a  be [morphoSyntax: [person : 3
						   gender : animate]]
Let 3i  be [morphoSyntax: [person : 3
						   gender : inanimate]]
Let 3f  be [morphoSyntax: [person : 3
						   gender : familiar]]
Let 3r  be [morphoSyntax: [person : 3
						   gender : respect]]

		| Number
Let plural be [morphoSyntax : [subject : [number : pl]]]
Let sg     be [morphoSyntax : [subject : [number : sg]]]


|  Derivational templates
Let causative  be [toMorphoSyntax : [object : [number : [] person:[]] ]]

Let goPotentialOrHabitualPlural be [go] [potentialOrHabitual] [plural]
Let pluralWord be [synCat : Plural]
				  [morphoSyntax : [pluralWord : +]]

|  Nominal Inflectional templates
Let possessed be [morphoSyntax : [possessed : +]]

|  set of features defined by AMPLE categories

Let Adj       be [rootCat: Adj]
Let Adj/Adj   be [fromCat: Adj  toCat: Adj]
Let Adv       be [rootCat: Adv]
Let Adv/Adv   be [fromCat: Adv  toCat: Adv]
Let Conj      be [rootCat: Conj]
Let Conj/Conj be [fromCat: Conj toCat: Conj]
Let Det       be [rootCat: Det]
Let Det/Det   be [fromCat: Det  toCat: Det]
Let N         be [rootCat: N]
				 [morphoSyntax: [possessed : !-]]
Let N/N       be [fromCat: N    toCat: N]
Let Num       be [rootCat: Num]
Let Num/Num   be [fromCat: Num  toCat: Num]
Let Prep      be [rootCat: Prep]
Let Prn       be [rootCat: Prn]
Let Prn/Prn   be [fromCat: Prn  toCat: Prn]
Let Prt       be [rootCat: Prt]
Let Prt/N     be [fromCat: Prt  toCat: N]
Let Prt/Prt   be [fromCat: Prt  toCat: Prt]
Let Q         be [rootCat: Q]
				 [interrogative]
Let Q/Q       be [fromCat: Q    toCat: Q]
Let Qnt       be [rootCat: Qnt]
Let Qnt/Qnt   be [fromCat: Qnt  toCat: Qnt]
Let V         be [rootCat: V]
				 [morphoSyntax: [pluralWord : !-]]
Let V/V       be [fromCat: V    toCat: V]

| set of features defined by AMPLE properties
Let vi  be [morphoSyntax : [object : none]]         | intransitive verb
Let vt  be [morphoSyntax : [object : [person : []   |   transitive verb
									  number : []]]]
Let vbt be [morphoSyntax : [object : [person : []   | bitransitive verb
									 number : []]]]  | is this right?

|  Following are AMPLE properties which play no role in word structure building:
Let takes.class1              be []
Let takes.class2              be []
Let takes.laryngealizes       be []
Let takes.null.Pot            be []
Let takes.under.ao            be []
Let takes.under.o             be []
Let takes.colonx.Poss             be []
Let class1                    be []
Let class2                    be []
Let can.take.group.2.pns      be []
Let can.take.kw.C.with.Pl.pfx be []
Let laryngealizes             be []
Let takes.group.2.pns         be []
Let takes.kw.C.with.Pl.pfx    be []
Let takes.null.H              be []
Let takes.null.P              be []
Let takes.null.S              be []
Let takes.p.C                 be []
Let takes.kw.C                be []
Let takes.kw.P                be []
Let takes.colon.Caus              be []
Let takes.colons.Caus             be []
Let takes.ch.Caus             be []
Let takes.k.Caus              be []
Let takes.l.Caus              be []
Let takes.colonl.Caus             be []
Let takes.s.Caus              be []
Let takes.kw.Caus             be []
Let takes.x.Caus              be []
Let under.ao                  be []
Let under.o                   be []
