|
| **********************************************************************
| DO NOT EDIT THIS FILE UNTIL YOU HAVE COMPLETED THE ENTIRE STARTER KIT!
|
| (Otherwise your changes will get over-written the next time you save.)
| **********************************************************************
|
|PC-PATR Grammar file for PAWS Starter Kit
| C Black    October 2006
|
|------------------------------------------------------------------------------
|-Phrase structure rules

Let absolutive		be	<head case> = absolutive
Let absolutive_prefix   be      <head type prefix absolutive>   = +
								[absolutive]
Let absolutive_suffix   be      <head type suffix absolutive>   = +
								[absolutive]
Let -absolutive		be	[]
Let accusative		be	<head case> = accusative
Let -accusative		be	[]
Let accusative.or.genitive be   <head case> = {accusative genitive}
Let AdjP-final		be	<head type AdjP-final>		= +
				<head type AdjP-initial>	= -
Let AdjP-initial	be	<head type AdjP-initial>	= +
				<head type AdjP-final>		= -
Let AdvP-final		be	<head type AdvP-final>		= +
				<head type AdvP-initial>	= -
Let AdvP-initial	be	<head type AdvP-initial>	= +
				<head type AdvP-final>		= -
Let animate		be	<head agr animate>		= +
Let animate_absolutive	be	{ [head:[object:[head:[agr:[animate:+]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[animate:+]]]
															type:[transitive:-]]] }
Let animate_ergative	be	<head subject head agr animate> = +
											   <head type transitive> = +
Let animate_object	be	<head object head agr animate> = +
Let animate_subject	be	<head subject head agr animate> = +
Let -animate		be	<head agr animate>		= -
Let -animate_absolutive	be	{ [head:[object:[head:[agr:[animate:-]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[animate:-]]]
															type:[transitive:-]]] }
Let -animate_ergative	be	<head subject head agr animate> = -
											   <head type transitive> = +
Let -animate_object	be	<head object head agr animate>	= -
Let -animate_subject	be	<head subject head agr animate> = -
Let class_1		be	<head agr class>		= 1
Let class_2		be	<head agr class>		= 2
Let class_3		be	<head agr class>		= 3
Let class_4		be	<head agr class>		= 4
Let class_5		be	<head agr class>		= 5
Let class_6		be	<head agr class>		= 6
Let class_7		be	<head agr class>		= 7
Let class_8		be	<head agr class>		= 8
Let class_9		be	<head agr class>		= 9
Let class_10		be	<head agr class>		= 10
Let class_11		be	<head agr class>		= 11
Let class_12		be	<head agr class>		= 12
Let class_13		be	<head agr class>		= 13
Let class_14		be	<head agr class>		= 14
Let class_15		be	<head agr class>		= 15
Let class_16		be	<head agr class>		= 16
Let class_17		be	<head agr class>		= 17
Let class_18		be	<head agr class>		= 18
Let class_19		be	<head agr class>		= 19
Let class_20		be	<head agr class>		= 20
Let class_21		be	<head agr class>		= 21
Let class_22		be	<head agr class>		= 22
Let class_23		be	<head agr class>		= 23
Let class_24		be	<head agr class>		= 24
Let class_25		be	<head agr class>		= 25
Let class_26		be	<head agr class>		= 26
Let class_27		be	<head agr class>		= 27
Let class_28		be	<head agr class>		= 28
Let class_29		be	<head agr class>		= 29
Let class_30		be	<head agr class>		= 30
Let class_1_absolutive	be	{ [head:[object:[head:[agr:[class:1]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:1]]]
															type:[transitive:-]]] }
Let class_2_absolutive	be	{ [head:[object:[head:[agr:[class:2]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:2]]]
															type:[transitive:-]]] }
Let class_3_absolutive	be	{ [head:[object:[head:[agr:[class:3]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:3]]]
															type:[transitive:-]]] }
Let class_4_absolutive	be	{ [head:[object:[head:[agr:[class:4]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:4]]]
															type:[transitive:-]]] }
Let class_5_absolutive	be	{ [head:[object:[head:[agr:[class:5]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:5]]]
															type:[transitive:-]]] }
Let class_6_absolutive	be	{ [head:[object:[head:[agr:[class:6]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:6]]]
															type:[transitive:-]]] }
Let class_7_absolutive	be	{ [head:[object:[head:[agr:[class:7]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:7]]]
															type:[transitive:-]]] }
Let class_8_absolutive	be	{ [head:[object:[head:[agr:[class:8]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:8]]]
															type:[transitive:-]]] }
Let class_9_absolutive	be	{ [head:[object:[head:[agr:[class:9]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:9]]]
															type:[transitive:-]]] }
Let class_10_absolutive	be	{ [head:[object:[head:[agr:[class:10]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:10]]]
															type:[transitive:-]]] }
Let class_11_absolutive	be	{ [head:[object:[head:[agr:[class:11]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:11]]]
															type:[transitive:-]]] }
Let class_12_absolutive	be	{ [head:[object:[head:[agr:[class:12]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:12]]]
															type:[transitive:-]]] }
Let class_13_absolutive	be	{ [head:[object:[head:[agr:[class:13]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:13]]]
															type:[transitive:-]]] }
Let class_14_absolutive	be	{ [head:[object:[head:[agr:[class:14]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:14]]]
															type:[transitive:-]]] }
Let class_15_absolutive	be	{ [head:[object:[head:[agr:[class:15]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:15]]]
															type:[transitive:-]]] }
Let class_16_absolutive	be	{ [head:[object:[head:[agr:[class:16]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:16]]]
															type:[transitive:-]]] }
Let class_17_absolutive	be	{ [head:[object:[head:[agr:[class:17]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:17]]]
															type:[transitive:-]]] }
Let class_18_absolutive	be	{ [head:[object:[head:[agr:[class:18]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:18]]]
															type:[transitive:-]]] }
Let class_19_absolutive	be	{ [head:[object:[head:[agr:[class:19]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:19]]]
															type:[transitive:-]]] }
Let class_20_absolutive	be	{ [head:[object:[head:[agr:[class:20]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:20]]]
															type:[transitive:-]]] }
Let class_21_absolutive	be	{ [head:[object:[head:[agr:[class:21]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:21]]]
															type:[transitive:-]]] }
Let class_22_absolutive	be	{ [head:[object:[head:[agr:[class:22]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:22]]]
															type:[transitive:-]]] }
Let class_23_absolutive	be	{ [head:[object:[head:[agr:[class:23]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:23]]]
															type:[transitive:-]]] }
Let class_24_absolutive	be	{ [head:[object:[head:[agr:[class:24]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:24]]]
															type:[transitive:-]]] }
Let class_25_absolutive	be	{ [head:[object:[head:[agr:[class:25]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:25]]]
															type:[transitive:-]]] }
Let class_26_absolutive	be	{ [head:[object:[head:[agr:[class:26]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:26]]]
															type:[transitive:-]]] }
Let class_27_absolutive	be	{ [head:[object:[head:[agr:[class:27]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:27]]]
															type:[transitive:-]]] }
Let class_28_absolutive	be	{ [head:[object:[head:[agr:[class:28]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:28]]]
															type:[transitive:-]]] }
Let class_29_absolutive	be	{ [head:[object:[head:[agr:[class:29]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:29]]]
															type:[transitive:-]]] }
Let class_30_absolutive	be	{ [head:[object:[head:[agr:[class:30]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[class:30]]]
															type:[transitive:-]]] }
Let class_1_ergative	be	<head subject head agr class> = 1
											   <head type transitive> = +
Let class_2_ergative	be	<head subject head agr class> = 2
											   <head type transitive> = +
Let class_3_ergative	be	<head subject head agr class> = 3
											   <head type transitive> = +
Let class_4_ergative	be	<head subject head agr class> = 4
											   <head type transitive> = +
Let class_5_ergative	be	<head subject head agr class> = 5
											   <head type transitive> = +
Let class_6_ergative	be	<head subject head agr class> = 6
											   <head type transitive> = +
Let class_7_ergative	be	<head subject head agr class> = 7
											   <head type transitive> = +
Let class_8_ergative	be	<head subject head agr class> = 8
											   <head type transitive> = +
Let class_9_ergative	be	<head subject head agr class> = 9
											   <head type transitive> = +
Let class_10_ergative	be	<head subject head agr class> = 10
											   <head type transitive> = +
Let class_11_ergative	be	<head subject head agr class> = 11
											   <head type transitive> = +
Let class_12_ergative	be	<head subject head agr class> = 12
											   <head type transitive> = +
Let class_13_ergative	be	<head subject head agr class> = 13
											   <head type transitive> = +
Let class_14_ergative	be	<head subject head agr class> = 14
											   <head type transitive> = +
Let class_15_ergative	be	<head subject head agr class> = 15
											   <head type transitive> = +
Let class_16_ergative	be	<head subject head agr class> = 16
											   <head type transitive> = +
Let class_17_ergative	be	<head subject head agr class> = 17
											   <head type transitive> = +
Let class_18_ergative	be	<head subject head agr class> = 18
											   <head type transitive> = +
Let class_19_ergative	be	<head subject head agr class> = 19
											   <head type transitive> = +
Let class_20_ergative	be	<head subject head agr class> = 20
											   <head type transitive> = +
Let class_21_ergative	be	<head subject head agr class> = 21
											   <head type transitive> = +
Let class_22_ergative	be	<head subject head agr class> = 22
											   <head type transitive> = +
Let class_23_ergative	be	<head subject head agr class> = 23
											   <head type transitive> = +
Let class_24_ergative	be	<head subject head agr class> = 24
											   <head type transitive> = +
Let class_25_ergative	be	<head subject head agr class> = 25
											   <head type transitive> = +
Let class_26_ergative	be	<head subject head agr class> = 26
											   <head type transitive> = +
Let class_27_ergative	be	<head subject head agr class> = 27
											   <head type transitive> = +
Let class_28_ergative	be	<head subject head agr class> = 28
											   <head type transitive> = +
Let class_29_ergative	be	<head subject head agr class> = 29
											   <head type transitive> = +
Let class_30_ergative	be	<head subject head agr class> = 30
											   <head type transitive> = +
Let class_1_object	be	<head object head agr class>	= 1
Let class_2_object	be	<head object head agr class>	= 2
Let class_3_object	be	<head object head agr class>	= 3
Let class_4_object	be	<head object head agr class>	= 4
Let class_5_object	be	<head object head agr class>	= 5
Let class_6_object	be	<head object head agr class>	= 6
Let class_7_object	be	<head object head agr class>	= 7
Let class_8_object	be	<head object head agr class>	= 8
Let class_9_object	be	<head object head agr class>	= 9
Let class_10_object	be	<head object head agr class>	= 10
Let class_11_object	be	<head object head agr class>	= 11
Let class_12_object	be	<head object head agr class>	= 12
Let class_13_object	be	<head object head agr class>	= 13
Let class_14_object	be	<head object head agr class>	= 14
Let class_15_object	be	<head object head agr class>	= 15
Let class_16_object	be	<head object head agr class>	= 16
Let class_17_object	be	<head object head agr class>	= 17
Let class_18_object	be	<head object head agr class>	= 18
Let class_19_object	be	<head object head agr class>	= 19
Let class_20_object	be	<head object head agr class>	= 20
Let class_21_object	be	<head object head agr class>	= 21
Let class_22_object	be	<head object head agr class>	= 22
Let class_23_object	be	<head object head agr class>	= 23
Let class_24_object	be	<head object head agr class>	= 24
Let class_25_object	be	<head object head agr class>	= 25
Let class_26_object	be	<head object head agr class>	= 26
Let class_27_object	be	<head object head agr class>	= 27
Let class_28_object	be	<head object head agr class>	= 28
Let class_29_object	be	<head object head agr class>	= 29
Let class_30_object	be	<head object head agr class>	= 30
Let class_1_subject	be	<head subject head agr class>	= 1
Let class_2_subject	be	<head subject head agr class>	= 2
Let class_3_subject	be	<head subject head agr class>	= 3
Let class_4_subject	be	<head subject head agr class>	= 4
Let class_5_subject	be	<head subject head agr class>	= 5
Let class_6_subject	be	<head subject head agr class>	= 6
Let class_7_subject	be	<head subject head agr class>	= 7
Let class_8_subject	be	<head subject head agr class>	= 8
Let class_9_subject	be	<head subject head agr class>	= 9
Let class_10_subject	be	<head subject head agr class>	= 10
Let class_11_subject	be	<head subject head agr class>	= 11
Let class_12_subject	be	<head subject head agr class>	= 12
Let class_13_subject	be	<head subject head agr class>	= 13
Let class_14_subject	be	<head subject head agr class>	= 14
Let class_15_subject	be	<head subject head agr class>	= 15
Let class_16_subject	be	<head subject head agr class>	= 16
Let class_17_subject	be	<head subject head agr class>	= 17
Let class_18_subject	be	<head subject head agr class>	= 18
Let class_19_subject	be	<head subject head agr class>	= 19
Let class_20_subject	be	<head subject head agr class>	= 20
Let class_21_subject	be	<head subject head agr class>	= 21
Let class_22_subject	be	<head subject head agr class>	= 22
Let class_23_subject	be	<head subject head agr class>	= 23
Let class_24_subject	be	<head subject head agr class>	= 24
Let class_25_subject	be	<head subject head agr class>	= 25
Let class_26_subject	be	<head subject head agr class>	= 26
Let class_27_subject	be	<head subject head agr class>	= 27
Let class_28_subject	be	<head subject head agr class>	= 28
Let class_29_subject	be	<head subject head agr class>	= 29
Let class_30_subject	be	<head subject head agr class>	= 30
Let comp			be      <head type comp>        = +
Let comp_prefix		be	<head type prefix comp>          = +
Let comp_suffix		be	<head type suffix comp>          = +
Let completive		be	<head infl aspect> =  completive
Let compound            be      <head type compound>            = +
Let -compound           be      <head type compound>            = -
Let conjoins_DP         be      <head type conjoins_DP>         = +
Let conjoins_IP         be      <head type conjoins_IP>         = +
Let -conjoins_DP        be      <head type conjoins_DP>         = -
Let -conjoins_IP        be      <head type conjoins_IP>         = -
Let continuative	be	<head infl aspect continuative> = +
Let copular		be	<head type copular>		= +
Let copular_prefix      be      <head type prefix copular>      = +
								[copular]
Let copular_suffix      be      <head type suffix copular>      = +
								[copular]
Let CP-final		be	<head type CP-final>		= +
Let -CP-final           be      <head type CP-final>            = -
Let CP-initial          be      <head type CP-initial>          = +
Let -CP-initial         be      <head type CP-initial>          = -
Let CP-specifier-initial be	<head type CP-specifier-initial> = +
Let dative              be      <head case> = dative
Let declarative		be	<head infl mood declarative>    = +
Let ditransitive	be	<head type ditransitive>	= +
								<head type transitive>          = +
Let DP-final            be      <head type DP-final>            = +
Let -DP-final           be      <head type DP-final>            = -
Let DP-initial          be      <head type DP-initial>          = +
Let -DP-initial         be      <head type DP-initial>          = -
Let dual		be	<head agr number> = dual
Let dual_absolutive	be	{ [head:[object:[head:[agr:[number:dual]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[number:dual]]]
															type:[transitive:-]]] }
Let dual_ergative	be	<head subject head agr number> = dual
											   <head type transitive> = +
Let dual_object		be	<head object head agr number> = dual
Let dual_subject 	be	<head subject head agr number> = dual
Let embedded_CP         be      <embedded cat> = CP
Let embedded_IP         be      <embedded cat> = IP
Let embedded_IPpro-dropOrCP be  {[embedded: [cat:IP
											 head: [subject:[head:[type:[pro-drop:+]]]]]]
								 [embedded: [cat:CP
											 head: [subject:[head:[type:[pro-drop:-]]]]]] }
Let embedded_finite     be      <embedded head infl finite>          = +
								<embedded head type question>        = !-
Let embedded_nonfinite  be      <embedded head infl finite>          = -
								<embedded head type question>        = !-
Let embedded_perfective be      <embedded head infl aspect perfective> = +
Let embedded_pro-drop   be      <embedded head subject head type pro-drop> = +
Let embedded_question   be      <embedded head type question>        = +
Let embedded_question_allowed be <embedded head type question>       = {+/-}
Let embedded_subjunctive be     <embedded head infl mood realis>     = -
Let ergative		be	<head case> = ergative
Let ergative_prefix     be      <head type prefix ergative>     = +
								[ergative]
Let ergative_suffix     be      <head type suffix ergative>     = +
								[ergative]
Let -ergative		be	[]
Let exclusive		be	<head agr person> = first_exclusive
Let excl-initial		be	<head type excl-initial> = +
Let excl-final		be	<head type excl-final> = +
Let feminine		be	<head agr gender> = feminine
Let feminine_absolutive	be	{ [head:[object:[head:[agr:[gender:feminine]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[agr:[gender:feminine]]]
															type:[transitive:-]]] }
Let feminine_ergative	be	<head subject head agr gender> = feminine
											   <head type transitive> = +
Let feminine_object	be	<head object head agr gender> = feminine
Let feminine_subject	be	<head subject head agr gender> = feminine
Let finite              be      <head infl finite>               = +
Let -finite             be      <head infl finite>               = -
Let first		be	<head agr person> = first
Let first_exclusive     be      <head agr person> = first_exclusive
Let first_exclusive_absolutive	be	{ [head:[object:[head:[agr:[person:first_exclusive]]]
																		 type:[transitive:+]]]
															  [head:[subject:[head:[agr:[person:first_exclusive]]]
																		type:[transitive:-]]] }
Let first_exclusive_ergative	be	<head subject head agr person> = first_exclusive
													 <head type transitive> = +
Let first_exclusive_subject be  <head subject head agr person> = first_exclusive
Let first_exclusive_object  be  <head object head agr person> = first_exclusive
Let first_inclusive     be      <head agr person> = first_inclusive
Let first_inclusive_absolutive	be	{ [head:[object:[head:[agr:[person:first_inclusive]]]
																		 type:[transitive:+]]]
															  [head:[subject:[head:[agr:[person:first_inclusive]]]
																		type:[transitive:-]]] }
Let first_inclusive_ergative	be	<head subject head agr person> = first_inclusive
													 <head type transitive> = +
Let first_inclusive_subject be  <head subject head agr person> = first_inclusive
Let first_inclusive_object be   <head object head agr person> = first_inclusive
Let first_absolutive	be	{ [head:[object:[head:[agr:[person:first]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[person:first]]]
																type:[transitive:-]]] }
Let first_ergative	be	<head subject head agr person> = first
											<head type transitive> = +
Let first_object	be	<head object head agr person> = first
Let first_subject	be	<head subject head agr person> = first
Let focus		be	<head type focus> = +
Let focus-initial		be	<head type focus-initial> = +
Let focus-final		be	<head type focus-final> = +
Let future		be	<head infl tense> = future
Let genitive		be	<head case> = genitive
Let genitive_prefix     be      <head type prefix genitive>     = +
								[genitive]
Let genitive_suffix     be      <head type suffix genitive>     = +
								[genitive]
Let -genitive		be	[]
Let habitual		be	<head infl aspect habitual>     = +
Let human               be      <head type human>               = +
Let human_absolutive	be	{ [head:[object:[head:[type:[human:+]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[type:[human:+]]]
															type:[transitive:-]]] }
Let human_ergative	be	<head subject head type human> = +
											   <head type transitive> = +
Let human_object	be	<head object head type human> = +
Let human_subject	be	<head subject head type human> = +
Let -human              be      <head type human>               = -
Let -human_absolutive	be	{ [head:[object:[head:[type:[human:-]]]
															type:[transitive:+]]]
												 [head:[subject:[head:[type:[human:-]]]
															type:[transitive:-]]] }
Let -human_ergative	be	<head subject head type human> = -
											   <head type transitive> = +
Let -human_object	be	<head object head type human>	= -
Let -human_subject	be	<head subject head type human> = -
Let imperative		be	<head infl mood imperative>     = +
Let imperfective	be	<head infl aspect imperfective> = +
Let inclusive		be	<head agr person> = first_inclusive
Let incompletive	be	<head infl aspect incompletive> = +
Let indefinite          be      <head type indefinite>          = +
								<head type relative>            = -
Let infinitive          be      <head infl finite>              = -
Let instrumental        be      <head case> = instrumental
Let interrogative	be	<head infl mood interrogative>  = +
				<head type question> 		= +
Let -interrogative  	be	<head type question>		= -
								<head infl mood interrogative>  = -
Let intransitive	be	<head type transitive>		= -
Let irrealis		be	<head infl mood realis>         = -
Let locative		be	<head type locative>		= +
Let manner		be	<head type manner>		= +
Let masculine		be	<head agr gender> = masculine
Let masculine_absolutive	be	{ [head:[object:[head:[agr:[gender:masculine]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[gender:masculine]]]
																type:[transitive:-]]] }
Let masculine_ergative	be	<head subject head agr gender> = masculine
											<head type transitive> = +
Let masculine_object	be	<head object head agr gender> = masculine
Let masculine_subject	be	<head subject head agr gender> = masculine
Let mass                be      <head type mass>                = +
Let modifies_Adj	be	<head type modifies_Adj>	= +
Let modifies_Adv	be	<head type modifies_Adv temporal> = +
				<head type modifies_Adv locative> = +
				<head type modifies_Adv manner> = +
				<head type modifies_Adv reason> = +
Let modifies_Adv-reason be	<head type modifies_Adv reason>	= -
				<head type modifies_Adv locative> = +
				<head type modifies_Adv manner> = +
				<head type modifies_Adv temporal> = +
Let modifies_locative	be	<head type modifies_Adv locative> = +
Let modifies_manner	be	<head type modifies_Adv manner>	= +
Let modifies_NP		be	<head type modifies_NP>		= +
Let modifies_PP		be	<head type modifies_PP>		= +
Let modifies_Q 		be	<head type modifies_Q>		= +
Let modifies_reason	be	<head type modifies_Adv reason>	= +
Let modifies_temporal	be	<head type modifies_Adv temporal> = +
Let motion		be	<head type motion>		= +
Let negative		be	<head type negative>            = +
Let negative_prefix   be      <head type prefix negative>   = +
								[negative]
Let negative_suffix   be      <head type suffix negative>   = +
								[negative]
Let negative-polarity		be	<head type negative-polarity>            = +
								[negative]
Let negative-polarity_prefix   be      <head type prefix negative-polarity>   = +
				[negative_prefix]
Let negative-polarity_suffix   be      <head type suffix negative-polarity>   = +
				[negative_suffix]
Let neuter		be	<head agr gender> = neuter
Let neuter_absolutive	be	{ [head:[object:[head:[agr:[gender:neuter]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[gender:neuter]]]
																type:[transitive:-]]] }
Let neuter_ergative	be	<head subject head agr gender> = neuter
											<head type transitive> = +
Let neuter_object	be	<head object head agr gender> = neuter
Let neuter_subject	be	<head subject head agr gender> = neuter
Let nominative		be	<head case> = nominative
Let -nominative		be	[]
Let nominative.or.accusative be <head case> = {nominative accusative}
Let nominative.or.genitive   be <head case> = {nominative genitive}
Let oblique             be      <head type oblique>             = +
Let participle          be      <head type participle>          = +
Let partitive		be	<head type partitive>		= +
Let passive		be	<head type passive>		= +
Let passive.optional	be	<head type passive>		= {+ -}
Let past		be	<head infl tense>          =  past
Let perfective		be	<head infl aspect perfective>   = +
Let plural		be	<head agr number> = plural
Let plural_absolutive	be	{ [head:[object:[head:[agr:[number:plural]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[number:plural]]]
																type:[transitive:-]]] }
Let plural_ergative	be	<head subject head agr number> = plural
											<head type transitive> = +
Let plural_object	 be	<head object head agr number> = plural
Let plural_subject	be	<head subject head agr number> = plural
Let poss_class_1        be	<head possessor head agr class> = 1
Let poss_class_2        be	<head possessor head agr class> = 2
Let poss_class_3        be	<head possessor head agr class> = 3
Let poss_class_4        be	<head possessor head agr class> = 4
Let poss_class_5        be	<head possessor head agr class> = 5
Let poss_class_6        be	<head possessor head agr class> = 6
Let poss_class_7        be	<head possessor head agr class> = 7
Let poss_class_8        be	<head possessor head agr class> = 8
Let poss_class_9        be	<head possessor head agr class> = 9
Let poss_class_10       be	<head possessor head agr class> = 10
Let poss_class_11       be	<head possessor head agr class> = 11
Let poss_class_12       be	<head possessor head agr class> = 12
Let poss_class_13       be	<head possessor head agr class> = 13
Let poss_class_14       be	<head possessor head agr class> = 14
Let poss_class_15       be	<head possessor head agr class> = 15
Let poss_class_16       be	<head possessor head agr class> = 16
Let poss_class_17       be	<head possessor head agr class> = 17
Let poss_class_18       be	<head possessor head agr class> = 18
Let poss_class_19       be	<head possessor head agr class> = 19
Let poss_class_20       be	<head possessor head agr class> = 20
Let poss_class_21       be	<head possessor head agr class> = 21
Let poss_class_22       be	<head possessor head agr class> = 22
Let poss_class_23       be	<head possessor head agr class> = 23
Let poss_class_24       be	<head possessor head agr class> = 24
Let poss_class_25       be	<head possessor head agr class> = 25
Let poss_class_26       be	<head possessor head agr class> = 26
Let poss_class_27       be	<head possessor head agr class> = 27
Let poss_class_28       be	<head possessor head agr class> = 28
Let poss_class_29       be	<head possessor head agr class> = 29
Let poss_class_30       be	<head possessor head agr class> = 30
Let poss_animate        be	<head possessor head agr animate> = +
Let poss_dual		be	<head possessor head agr number> = dual
Let poss_exclusive	be	<head possessor head agr person> = first_exclusive
Let poss_feminine	be	<head possessor head agr gender> = feminine
Let poss_first		be	<head possessor head agr person> = first
Let poss_human          be	<head possessor head type human> = +
Let poss_inanimate      be	<head possessor head agr animate> = -
Let poss_inclusive	be	<head possessor head agr person> = first_inclusive
Let poss_masculine	be	<head possessor head agr gender> = masculine
Let poss_neuter  	be	<head possessor head agr gender> = neuter
Let poss_nonhuman       be	<head possessor head type human> = -
Let poss_plural		be	<head possessor head agr number> = plural
Let poss_second		be	<head possessor head agr person> = second
Let poss_singular	be	<head possessor head agr number> = singular
Let poss_third		be	<head possessor head agr person> = third
Let poss_prefix         be      <head type prefix poss>         = +
Let poss_suffix         be      <head type suffix poss>         = +
Let possessed		be	<head type possessed>           = +
Let possessive          be      <head type possessive>          = +
Let potential		be	<head infl aspect potential>    = +
Let present		be	<head infl tense>       =  present
Let progressive		be	<head infl aspect progressive>  = +
Let proper          be      <head type proper>          = +
Let PP          be      <head type PP>          = +
Let P_prefix            be      <head type prefix P>            = +
Let P_suffix            be      <head type suffix P>            = +
Let question		be	<head type question>		= +
Let -question		be	<head type question>		= -
Let QP-final		be	<head type QP-final>		= +
				<head type QP-initial>		= -
Let QP-initial		be	<head type QP-initial>		= +
				<head type QP-final>		= -
Let quantifier		be	<head type quantifier>		= +
Let quantifier_prefix   be      <head type prefix quantifier>   = +
								[quantifier]
Let quantifier_suffix   be      <head type suffix quantifier>   = +
								[quantifier]
Let reason		be	<head type reason>		= +
Let realis		be	<head infl mood realis>         = +
Let reciprocal 		be	<head type reciprocal>		= +
Let reflexive		be	<head type reflexive>		= +
Let relative		be	<head type relative>		= +
Let relative_prefix		be	<head type prefix relative>		= +
Let relative_suffix		be	<head type suffix relative>		= +
Let +root		be	<head type root>		= +
Let -root		be	<head type root>		= -
Let second		be	<head agr person> = second
Let second_absolutive	be	{ [head:[object:[head:[agr:[person:second]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[person:second]]]
																type:[transitive:-]]] }
Let second_ergative	be	<head subject head agr person> = second
											<head type transitive> = +
Let second_object	be	<head object head agr person> = second
Let second_subject	be	<head subject head agr person> = second
Let sentential		be	<head type sentential>		= +
Let sentential_with_object be   <head type sentential_with_object> = +
Let singular		be	<head agr number> = singular
Let singular_absolutive	be	{ [head:[object:[head:[agr:[number:singular]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[number:singular]]]
																type:[transitive:-]]] }
Let singular_ergative	be	<head subject head agr number> = singular
											<head type transitive> = +
Let singular_object	be	<head object head agr number> = singular
Let singular_subject	be	<head subject head agr number> = singular
Let stand-alone         be      <head type stand-alone>         = +
Let stative		be	<head infl aspect stative>      = +
Let subjunctive         be      <head infl mood realis>         = -
Let takes_Adv           be      <head type takes_Adv>           = +
Let takes_DP            be      <head type takes_DP>            = +
Let temporal		be	<head type temporal>		= +
Let third		be	<head agr person> = third
Let third_absolutive	be	{ [head:[object:[head:[agr:[person:third]]]
													  type:[transitive:+]]]
													 [head:[subject:[head:[agr:[person:third]]]
																type:[transitive:-]]] }
Let third_ergative	be	<head subject head agr person> = third
											<head type transitive> = +
Let third_object	be	<head object head agr person> = third
Let third_subject	be	<head subject head agr person> = third
Let topic		be	<head type topic> = +
Let topic-initial		be	<head type topic-initial> = +
Let topic-final		be	<head type topic-final> = +
Let transitive		be	<head type transitive>		= +
Let wh			be	<head type wh>			= +
Let -wh			be	<head type wh> 			= -
Let whQ		be      <head type whQ>        = +
Let whQ_prefix		be	<head type prefix whQ>          = +
Let whQ_suffix		be	<head type suffix whQ>          = +
Let YNQ			be      <head type YNQ>        = +
Let YNQ_prefix		be	<head type prefix YNQ>          = +
Let YNQ_suffix		be	<head type suffix YNQ>          = +


Let Adj			be	<cat> = !Adj
				<head type ordinal>		= !-
				<head type wh>			= !-
				<head type sentential>          = !-
								<head type relative>            = !-
				<head type clausal-comp> = !-
								<head type focusmarked>         = -

Let Adv			be	<cat> = !Adv
				<head type wh>			= !-
								<head type manner>              = !-
								<head type takes_Adv>           = !-
								<head type takes_DP>            = !-
				<head type sentential>          = !-
								<embedded>      = !none


Let Art			be	<cat> = !Art
				<head type wh>			= !-
								<head type focusmarked>         = -


Let Aux			be	<cat> = !Aux
				<head type passive>		= !-
				<head type negative>		= !-
				<head type participle>		= -
				<head infl finite>              = !+

Let C			be	<cat> = !C
				<head type question>		= !-
				<head type relative>		= !-
								<embedded>      = !none


Let Conj                be      <cat> = !Conj

Let Deg                 be      <cat> = !Deg
								<head type modifies_Adj>        = !-
								<head type modifies_Adv temporal> = !-
								<head type modifies_Adv locative> = !-
								<head type modifies_Adv manner> = !-
								<head type modifies_Adv reason> = !-
								<head type modifies_NP>         = !-
								<head type modifies_PP>         = !-
								<head type modifies_Q>          = !-
								<head type quantifier>          = !-
								<head type wh>                  = !-
								<head type relative>            = !-
								<head type focusmarked>         = -

Let Dem                 be      <cat> = !Dem
								<head type wh>                  = !-
								<head agr person> = !third
								<head type relative>            = !-
								<head type temporal>            = !-
								<head type focusmarked>         = -


Let Det                 be      <cat> = !Det
								<head type wh>                  = !-
								<head agr person> = !third
								<head type relative>            = !-
								<head type focusmarked>         = -


Let Excl                be      <cat> = Excl

Let Greet                be      <cat> = Greet

Let Intj                be      <cat> = Intj

Let N                   be      <cat> = !N
								<head agr person> = !third
								<head possessor head agr> = !none
								<head agr animate>              = !-
								<head type human>               = !-
								<head type wh>                  = -
								<head type reciprocal>          = !-
								<head type reflexive>          = !-
								<head type sentential>          = !-
								<head type proper>              = !-
								<head type relative>            = !-
								<head type mass>                = !-
								<head type temporal>            = !-
								<head embedded>      = !none
								<head type focusmarked>         = -

								<head type possessed>            = !-


Let Num                 be      <cat> = !Num
								<head type ordinal>             = !-
								<head type wh>                  = !-
								<head agr number> = !plural
								<head type relative>            = !-
								<head type focusmarked>         = -


Let ordinal             be      <cat> = Adj
								<head type ordinal>             = +
								<head agr number> = !plural
								<head type focusmarked>         = -

Let P                   be      <cat> = !P
								<head type passive>             = !-
								<head type wh>                  = -
								<head type partitive>           = !-
								<head type temporal>            = !-
				<head type locative>            = !-
								<head sentential>      = !-

Let Poss                be      <cat> = Poss
								[genitive]

Let Poss_ergative       be      <cat> = Poss
								[ergative]

Let Poss_absolutive     be      <cat> = Poss
								[absolutive]

Let Pron                be      <cat> = !Pron
								<head type wh>                  = !-
								<head agr animate>             = !+
								<head type human>               = !+
								<head type reciprocal>          = !-
								<head type reflexive>          = !-
								<head type posessive>          = !-
								<head type relative>            = !-
								<head type temporal>            = !-
								<head type focusmarked>         = -


Let PropN		be	<cat> = N
				<head agr animate>		= !+
								<head type human>               = !+
				<head agr person> = !third
								<head possessor head agr> = !none
				<head type wh>			= -
				<head type proper>		= +
								<head type reciprocal>          = !-
								<head type reflexive>          = !-
								<head type sentential>          = !-
								<head type relative>            = !-
								<head type mass>                = !-
								<head type temporal>            = !-
								<head type focusmarked>         = -

								<head type possessed>            = !-


Let Q                   be      <cat> = !Q
								<head type wh>                  = !-
								<head type focusmarked>         = -

Let V                   be      <cat> = !V
								<head type passive>             = !-
								<head type sentential>          = !-
								<head type sentential_with_object>          = !-
								<head type copular>             = !-
								<head type motion>              = !-
								<head type reciprocal>          = !-
								<head type reflexive>           = !-
								<head infl finite>              = !+
								<head type negative>            = !-
								<head type participle>          = !-
								<head infl mood realis>         = !+
								<head infl mood imperative>         = !-
								<head embedded>      = !none
								<head type focusmarked>         = -


Let makeAdj		be	<cat> = Adj
				<head type ordinal>		= !-
				<head type wh>			= !-
				<head type sentential>          = !-
								<head type relative>            = !-
				<head type clausal-comp> = !-
								<head type focusmarked>         = -

Let makeAdv		be	<cat> = Adv
				<head type wh>			= !-
								<head type manner>              = !-
								<head type takes_Adv>           = !-
								<head type takes_DP>            = !-
				<head type sentential>          = !-
								<head embedded>      = !none


Let makeArt		be	<cat> = Art
				<head type wh>			= !-
								<head type focusmarked>         = -


Let makeAux		be	<cat> = Aux
				<head type passive>		= !-
				<head type negative>		= !-
				<head type participle>		= -
				<head infl finite>              = !+

Let makeC		be	<cat> = C
				<head type question>		= !-
				<head type relative>		= !-
								<head embedded>      = !none


Let makeConj            be      <cat> = Conj

Let makeDeg             be      <cat> = Deg
								<head type modifies_Adj>        = !-
								<head type modifies_Adv temporal> = !-
								<head type modifies_Adv locative> = !-
								<head type modifies_Adv manner> = !-
								<head type modifies_Adv reason> = !-
								<head type modifies_NP>         = !-
								<head type modifies_PP>         = !-
								<head type modifies_Q>          = !-
								<head type quantifier>          = !-
								<head type wh>                  = !-
								<head type relative>            = !-
								<head type focusmarked>         = -

Let makeDem             be      <cat> = Dem
								<head type wh>                  = !-
								<head agr person> = !third
								<head type relative>            = !-
								<head type temporal>            = !-
								<head type focusmarked>         = -


Let makeExcl  be    <cat> = Excl

Let makeFocusM  be    <cat> = FocusM

Let makeGreet  be    <cat> = Greet

Let makeInitialConj  be    <cat> = InitConj

Let makeIntj  be    <cat> = Intj

Let makeN               be      <cat> = N
								<head agr person> = !third
								<head possessor head agr> = !none
								<head agr animate>             = !-
								<head type human>               = !-
								<head type wh>                  = -
								<head type reciprocal>          = !-
								<head type reflexive>          = !-
								<head type sentential>          = !-
								<head type proper>              = !-
								<head type relative>            = !-
								<head type mass>                = !-
								<head type temporal>            = !-
								<head type focusmarked>         = -

								<head type possessed>            = !-


Let makeNum             be      <cat> = Num
								<head type ordinal>             = !-
								<head type wh>                  = !-
								<head agr number> = !plural
								<head type relative>            = !-
								<head type focusmarked>         = -


Let makeP               be      <cat> = P
								<head type passive>             = !-
								<head type wh>                  = -
								<head type partitive>           = !-
				<head type temporal>            = !-
								<head type sentential>          = !-

Let makePron            be      <cat> = Pron
								<head type wh>                  = !-
								<head agr animate>             = !+
								<head type human>               = !+
								<head type reciprocal>          = !-
								<head type reflexive>          = !-
								<head type posessive>          = !-
								<head type relative>            = !-
								<head type temporal>            = !-
								<head type focusmarked>         = -


Let makeQ                   be  <cat> = Q
								<head type wh>                  = !-
								<head type focusmarked>         = -

Let makeTopicM  be    <cat> = TopicM

Let makeV               be      <cat> = V
								<head type passive>             = !-
								<head type sentential>          = !-
								<head type sentential_with_object>          = !-
								<head type copular>             = !-
								<head type motion>              = !-
								<head type reciprocal>          = !-
								<head infl finite>              = !+
								<head type negative>            = !-
								<head type participle>          = !-
								<head infl mood realis>         = !+
								<head infl mood imperative>         = !-
								<embedded>      = !none
								<head type focusmarked>         = -

rule {S option start.symbol  - PPs optional}
S = (PP_1) {IP / CP} (PP_2)
	<S head> = <IP head>
	<S head> = <CP head>
	<IP head type root> = +
	<IP head type question> = -
	<IP head fronted cat> = none
	<CP head type root> = +
	<S option> = start.symbol

rule {S option start.initial - AdvP or DP initial}
S = {AdvP / DP} {IP / CP}
	<S head> = <IP head>
	<S head> = <CP head>
	<IP head type root> = +
	<IP head type question> = -
	<IP head fronted cat> = none
	<CP head type root> = +
	<AdvP head type manner> = -
	<DP head type temporal> = +
	<IP head type negative> <= <DP head type negative>
	<IP head type negative> <= <AdvP head type negative>
	<CP head type negative> <= <DP head type negative>
	<CP head type negative> <= <AdvP head type negative>
	<S option> = start.initial

rule {S option start.final - AdvP or DP final}
S = {IP / CP} {AdvP / DP}
	<S head> = <IP head>
	<S head> = <CP head>
	<IP head type root> = +
	<IP head type question> = -
	<IP head fronted cat> = none
	<CP head type root> = +
	<AdvP head type manner> = -
	<DP head type temporal> = +
	<IP head type negative> <= <DP head type negative>
	<IP head type negative> <= <AdvP head type negative>
	<CP head type negative> <= <DP head type negative>
	<CP head type negative> <= <AdvP head type negative>
	<S option> = start.final

rule {S option greeting}
S = Greet (DP)
	<S head> = <Greet head>
	<DP head type temporal> = -
	<DP head type locative> = -
	<DP head type wh> = -
	<DP head type topic> = -
	<DP head type focus> = -
	<DP head type negative> = -
	<S option> = greet

rule {S option interjection}
S = Intj / Adj
	<S head> = <Intj head>
	<S head> = <Adj head>
	<S option> = interjection

rule {CP option conj - conjoined CPs}
CP = (InitConj) CP_1 Conj CP_2
	<CP head> = <CP_1 head>
	<Conj head type conjoins_IP> = +
	<CP conjoined> = +
	<CP_1 conjoined> = -	|limit recursion
	<CP option> = conj

rule {CP option 1 - no fronting, root}
CP = C'
	<CP head> = <C' head>
	<C' head type root > = +
	<C' head type vacuous> = -
	<C' head type relative> = -
	<C' head fronted> = none
	<CP option> = 1

rule {CP option 2a - DP specifier initial, wh, root}
CP = DP C'
	<CP head> = <C' head>
	<C' head type root> = +
	<C' head type question> = +
	<C' head type relative> = -
	<C' head fronted> = <DP>
	<DP head type wh> = +
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<CP option> = 2a

rule {CP option 2b - PP specifier initial, wh, root}
CP = PP C'
	<CP head> = <C' head>
	<C' head type root> = +
	<C' head type question> = +
	<C' head type relative> = -
	<C' head fronted> = <PP>
	<PP head type wh> = +
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<CP option> = 2b

rule {CP option 2c - AdvP specifier initial, wh, root}
CP = AdvP C'
	<CP head> = <C' head>
	<C' head type root> = +
	<C' head type question> = +
	<C' head type relative> = -
	<C' head fronted> = <AdvP>
	<AdvP head type wh> = +
	<CP option> = 2c

rule {CP option 3 - no fronting, non-root}
CP = C'
	<CP head> = <C' head>
	<C' head type root > = -
	<C' head type vacuous> = -		| to avoid empty CP
	<C' head fronted> = none
	<CP option> = 3

rule {CP option 4a - DP specifier initial, wh, non-root}
CP = DP C'
	<CP head> = <C' head>
	<C' head type root> = -
	<C' head type question> = +
	<C' head type wh> = +
	<C' head type relative> = -
	<C' head fronted> = <DP>
	<DP head type wh> = +
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<CP option> = 4a

rule {CP option 4b - PP specifier initial, wh, non-root}
CP = PP C'
	<CP head> = <C' head>
	<C' head type root> = -
	<C' head type question> = +
	<C' head fronted> = <PP>
	<C' head type relative> = -
	<PP head type wh> = +
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<CP option> = 4b

rule {CP option 4c - AdvP specifier initial, wh, non-root}
CP = AdvP C'
	<CP head> = <C' head>
	<C' head type root> = -
	<C' head type question> = +
	<C' head type relative> = -
	<C' head fronted> = <AdvP>
	<AdvP head type wh> = +
	<CP option> = 4c

rule {CBar option 1a - head vacuous, root, no aux fronting}
C' = IP
	<C' head> = <IP head>
	<C' head type root> = +
	<C' head type relative> = -
	<C' head type vacuous> = +		| to avoid empty CP
	<C' option> = 1a

rule {CBar option 1e - head-final, question, root}
C' = IP C
	<C' head> = <IP head>
	<C' head type> = <C head type>
	<C' head type root> = +
	<C' head type question> = +
	<C' head type relative> = -
	<C head type CP-final> = +
	<C' option> = 1e

rule {CBar option 1g - head both sides, question, root}
C' = C IP C_1
	<C' head> = <IP head>
	<C' head type> = <C head type>
	<C head type question> = <C_1 head type question>
	<C' head type root> = +
	<C' head type question> = +
	<C' head type relative> = -
	<C head type CP-initial> = +
	<C_1 head type CP-final> = +
	<C' option> = 1g

rule {CBar option 2a - head vacuous, non-root, no aux fronting}
C' = IP
	<C' head> = <IP head>
	<C' head type root> = -
	<C' head type vacuous> = +		| to avoid empty CP
	<C' option> = 2a

rule {CBar option 2c - head-initial, question, non-root}
C' = C IP
	<C' head> = <IP head>
	<C' head type> = <C head type>
	<C' head type root> = -
	<C' head type question> = +
	<C' head type relative> = -
	<C head type CP-initial> = +
	<C' option> = 2c

rule {CBar option 5a - head-initial, relative clause}
C' = C IP
	<C' head> = <IP head>
	<C' head type> = <C head type>
	<C' head type root> = -
	<C' head type question> = -
	<C' head type relative> = +
	<C head type CP-initial> = +
	<C' option> = 5a

rule {IP option conj - conjoined IPs}
IP = (InitConj) IP_1 Conj IP_2
	<IP head> = <IP_1 head>
	<Conj head type conjoins_IP> = +
	<IP conjoined> = +
	<IP_1 conjoined> = -	|limit recursion
	<IP option> = conj

rule {IP option 3 - subject internal to VP for VSO, OSV}
IP = I'
	<IP head> = <I' head>
	<IP option> = 3

rule {IBar option 1 - no auxiliaries}
I' = VP
	<I' head> = <VP head>
	{<I' head type auxiliary> = -
	 <I' head type question> = -
	/<I' head type question> = +
	}
	<I' option> = 1

rule {VP option conj - conjoined VPs}
VP = (InitConj) VP_1 Conj VP_2
	<VP head> = <VP_1 head>
	<VP_1 head type participle> = <VP_2 head type participle>
	<Conj head type conjoins_IP> = +
	<VP conjoined> = +
	<VP_1 conjoined> = -	|limit recursion
	<VP option> = conj

rule {VP option 1a - manner AdvP initial, adjoined to VP}
VP = AdvP VP_1
	<VP head> = <VP_1 head>
	<AdvP head type manner> = +
	<AdvP head type negative> = -
	<VP head type prefix> <= <AdvP head type prefix>
	<VP option> = 1a

rule {VP option 1b - manner AdvP final, adjoined to VP}
VP = VP_1 AdvP
	<VP head> = <VP_1 head>
	<AdvP head type manner> = +
	<AdvP head type negative> = -
	<VP head type suffix> <= <AdvP head type suffix>
	<VP option> = 1b

rule {VP option 1c - split CP relative clause adjoined to VP}
VP = VP_1 CP
	<VP head> = <VP_1 head>
	<CP head type relative> = +
	<VP head type suffix> <= <CP head type suffix>
	<VP option> = 1c

rule {VP option 2b - VSO order, intransitive}
VP = V DP
	<VP head> = <V head>
	<V head type transitive> = -
	<V head type copular> = -
	<V head subject> = <DP>
	<VP head type pro-drop> = -
	<V head type passive> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	<VP head type suffix> <= <DP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
		<VP option> = 2b

rule {VP option 2bi - VSO/OSV order, intransitive, imperative}
VP = V
	<VP head> = <V head>
	<VP head infl mood imperative> = +
	<V head type transitive> = -
	<V head type copular> = -
	<V head type passive> = -
	<VP head type question> = -
	 <VP head fronted> == ~[cat:FocusP]
		<VP option> = 2bi

rule {VP option 2bp - VSO/OSV order, intransitive, pro-drop}
VP = V
	<VP head> = <V head>
	<V head type transitive> = -
	<V head type copular> = -
	<VP head type pro-drop> = +
	<V head type passive> = -
	<VP head infl mood imperative> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	 <VP head fronted> == ~[cat:FocusP]
		<VP option> = 2bp

rule {VP option 2d - VSO/OSV, intransitive, subject questioned}
VP = V
	<VP head> = <V head>
	<V  head type transitive> = -
	<V head type copular> = -
	<VP head type question> = +
	<VP head fronted cat> = DP
	<VP head fronted head type wh> = +
	<VP head fronted> = <V head subject>
		<VP option> = 2d

rule {VP option 2dfoc - VSO/OSV, intransitive, subject focused}
VP = V
	<VP head> = <V head>
	<V  head type transitive> = -
	<V head type copular> = -
	<VP head type question> = -
	<VP head fronted cat> = FocusP
	<VP head fronted head type wh> = -
	<VP head fronted> = <V head subject>
		<VP option> = 2dfoc

rule {VP option 3c - VSO order, motion intransitive}
VP = V DP {PP / AdvP}
	<VP head> = <V head>
	<VP head locative> = <AdvP>
	<PP head type locative> = +
	<PP head type sentential> = -
	<AdvP head type locative> = +
	<V head type transitive> = -
	<V head type copular> = -
	<V head type motion> = +
	<V head subject> = <DP>
	<VP head type pro-drop> = -
	<V head type passive> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted cat> = PP
	}
	<VP head type suffix> <= <PP head type suffix>
	<VP head type suffix> <= <AdvP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 3c

rule {VP option 3ci - VSO order, motion intransitive, imperative}
VP = V {PP / AdvP}
	<VP head> = <V head>
	<VP head locative> = <AdvP>
	<VP head infl mood imperative> = +
	<PP head type locative> = +
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<AdvP head type locative> = +
	<V head type motion> = +
	<V head type transitive> = -
	<V head type copular> = -
	<V head type passive> = -
	<VP head type question> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head type suffix> <= <AdvP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
		<VP option> = 3ci

rule {VP option 3cp - VSO order, motion intransitive, pro-drop}
VP = V {PP / AdvP}
	<VP head> = <V head>
	<VP head locative> = <AdvP>
	<PP head type locative> = +
	<PP head type sentential> = -
	<AdvP head type locative> = +
	<V head type transitive> = -
	<V head type copular> = -
	<VP head infl mood imperative> = -
	<V head type motion> = +
	<VP head type pro-drop> = +
	<V head type passive> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted cat> = PP
	}
	<VP head type suffix> <= <PP head type suffix>
	<VP head type suffix> <= <AdvP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
		<VP option> = 3cp

rule {VP option 3e - VSO order, motion intransitive, subject questioned}
VP = V {PP / AdvP}
	<VP head> = <V head>
	<VP head locative> = <AdvP>
	<PP head type locative> = +
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<AdvP head type locative> = +
	<V head type transitive> = -
	<V head type copular> = -
	<V head type motion> = +
	<V head type passive> = -
	<VP head type question> = +
	<VP head fronted cat> = DP
	<VP head fronted head type wh> = +
	<VP head fronted> = <V head subject>
	<VP head type suffix> <= <PP head type suffix>
	<VP head type suffix> <= <AdvP head type suffix>
		<VP option> = 3e

rule {VP option 4f - VSO order, copular sentence, no verb, no Aux required}
VP = DP {PP / AdjP / DP_1}
	<VP head> = <PP head>
	<VP head> = <AdjP head>
	<VP head> = <DP_1 head>
	<VP head subject> = <DP>
	<VP head type copular> = +
	<VP head type transitive> = -
	<VP head type pro-drop> = -
	<VP head type passive> = -
	<DP head type wh> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<PP head type sentential> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	<VP head type prefix> <= <DP head type prefix>  | sentential PP
	<DP head> == ~[case:accusative]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 4f

rule {VP option 4fp - VSO order, copular sentence, no verb, pro-drop, no Aux required}
VP = {PP / AdjP / DP_1}
	<VP head> = <PP head>
	<VP head> = <AdjP head>
	<VP head> = <DP_1 head>
	<VP head type copular> = +
	<VP head type transitive> = -
	<VP head type pro-drop> = +
	<VP head infl mood imperative> = -
	<VP head type passive> = -
	<DP head type wh> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<PP head type sentential> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 4fp

rule {VP option 4j - VSO/OSV order, copular sentence, no verb, subj/AdvP questioned}
VP = {PP / AdjP / DP}
	<VP head> = <PP head>
	<VP head> = <AdjP head>
	<VP head> = <DP head>
	<VP head type copular> = +
	<VP head type transitive> = -
	<VP head type question> = +
	{<VP head fronted cat> = AdvP
	/<VP head fronted cat> = DP }
	<VP head fronted head type wh> = +
	<VP head type passive> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<PP head type sentential> = -
	<VP option> = 4j

rule {VP option 5eiNegObjVerbRequired - VSO order, transitive (accusative case object), imperative}
VP = V DP_1
	<VP head> = <V head>
	<VP head infl mood imperative> = +
	<V head object> = <DP_1>
	<V head type transitive> = +
	<V head type copular> = -
	<DP_1 head case> = accusative
	<V head type passive> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type question> = -
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 5eiNegObjVerbRequired

rule {VP option 5epNegObjVerbRequired - VSO order, transitive (accusative case object), pro-drop}
VP = V DP_1
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V head object> = <DP_1>
		{<DP_1 head type reflexive> = -
		/<DP_1 head type reflexive> = +
	<DP head agr> = <VP head subject head agr>
	}
	<VP head infl mood imperative> = -
	<V head type transitive> = +
	<V head type copular> = -
	<DP_1 head case> = accusative
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<V head type passive> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [type:[reciprocal:+]] ->
					 [subject:[head:[agr:[number:plural]]]]
	<VP head> == [object:[head:[type:[reciprocal:+]]]] ->
					 [subject:[head:[agr:[number:plural]]]]
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 5epNegObjVerbRequired

rule {VP option 5k - VSO order, transitive, object questioned (accusative)}
VP = V DP
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <VP head fronted>
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<DP head case> = nominative
	<VP head fronted head case> = accusative
	<VP head fronted head type wh> = +
	<VP head fronted cat> = DP
	<VP head type question> = +
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<V head type passive> = -
	<VP head type suffix> <= <DP head type suffix>
	<VP option> = 5k

rule {VP option 5kp - VSO order, transitive, object questioned (accusative), pro-drop}
VP = V
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V head object> = <VP head fronted>
	<V head type transitive> = +
	<V head type copular> = -
	<VP head fronted head case> = accusative
	<VP head fronted head type wh> = +
	<VP head fronted cat> = DP
	<VP head type question> = +
	<V head type passive> = -
	<VP option> = 5kp

rule {VP option 5oNegObjVerbRequired - VSO order, transitive, subject questioned (nominative)}
VP = V DP
	<VP head> = <V head>
	<V head object> = <DP>
	<V head subject> = <VP head fronted>
	<V head type transitive> = +
	<VP head type pro-drop> = -
		{<DP head type reflexive> = +
	<VP head object head agr> = <VP head fronted head agr>
		/<DP head type reflexive> = -
		}
	<V head type copular> = -
	<DP head case> = accusative
	<VP head fronted head case> = nominative
	<VP head fronted head type wh> = +
	<VP head fronted cat> = DP
	<VP head type question> = +
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<V head type passive> = -
	<VP head type suffix> <= <DP head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP option> = 5oNegObjVerbRequired

rule {VP option 6eNegObjVerbRequired - VSO order, ditransitive with PP (accusative object)}
VP = V DP DP_1 PP
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <DP_1>
	<V head indirectobject> = <PP head object>
		{<DP_1 head type reflexive> = -
		/<DP_1 head type reflexive> = +
	<DP head agr> = <DP_1 head agr>
	}
	<V head type ditransitive> = +
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<DP head case> = nominative
	<DP_1 head case> = accusative
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type passive> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head> == [type:[reciprocal:+]] ->
					 [subject:[head:[agr:[number:plural]]]]
	<VP head> == [object:[head:[type:[reciprocal:+]]]] ->
					 [subject:[head:[agr:[number:plural]]]]
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 6eNegObjVerbRequired

rule {VP option 6eiNegObjVerbRequired - VSO order, ditransitive with PP (accusative case object), imperative}
VP = V DP_1 PP
	<VP head> = <V head>
	<VP head infl mood imperative> = +
	<V head object> = <DP_1>
	<V head indirectobject> = <PP head object>
	<V head type ditransitive> = +
	<V head type transitive> = +
	<V head type copular> = -
	<DP_1 head case> = accusative
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<V head type passive> = -
	<VP head type question> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 6eiNegObjVerbRequired

rule {VP option 6epNegObjVerbRequired - VSO order, ditransitive with PP (accusative object), pro-drop}
VP = V DP_1 PP
	<VP head> = <V head>
	<V head type pro-drop> = +
	<V head object> = <DP_1>
	<V head indirectobject> = <PP head object>
		{<DP_1 head type reflexive> = -
		/<DP_1 head type reflexive> = +
	<V head subject head agr> = <DP_1 head agr>
	}
	<V head type ditransitive> = +
	<V head type transitive> = +
	<V head type copular> = -
	<DP_1 head case> = accusative
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type passive> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head> == [type:[reciprocal:+]] ->
					 [subject:[head:[agr:[number:plural]]]]
	<VP head> == [object:[head:[type:[reciprocal:+]]]] ->
					 [subject:[head:[agr:[number:plural]]]]
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 6epNegObjVerbRequired

rule {VP option 6mNegObjVerbRequired - VSO order, ditransitive with PP (accusative object questioned)}
VP = V DP PP
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <VP head fronted>
	<V head indirectobject> = <PP head object>
	<DP head case> = nominative
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<VP head fronted head case> = accusative
	<VP head fronted head type wh> = +
	<VP head fronted cat> = DP
	<VP head type question> = +
	<V head type ditransitive> = +
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<V head type passive> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	<VP option> = 6mNegObjVerbRequired

rule {VP option 6mpNegObjVerbRequired - VSO order, ditransitive with PP (accusative object questioned), pro-drop}
VP = V PP
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V head object> = <VP head fronted>
	<V head indirectobject> = <PP head object>
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<VP head fronted head case> = accusative
	<VP head fronted head type wh> = +
	<VP head fronted cat> = DP
	<VP head type question> = +
	<V head type ditransitive> = +
	<V head type transitive> = +
	<V head type copular> = -
	<V head type passive> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	<VP option> = 6mpNegObjVerbRequired

rule {VP option 6qNegObjVerbRequired - VSO order, ditransitive with PP (acc object), subj questioned}
VP = V DP PP
	<VP head> = <V head>
	<V head object> = <DP>
	<V head subject> = <VP head fronted>
	<V head indirectobject> = <PP head object>
		{<DP head type reflexive> = +
	<VP head object head agr> = <VP head fronted head agr>
	   /<DP head type reflexive> = -
		}
	<V head type ditransitive> = +
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<DP head case> = accusative
	<PP head type sentential> = -
	<PP head type suffix poss> = -         | only in possessor position
	<PP head type prefix poss> = -
	<VP head fronted head case> = nominative
	<VP head fronted head type wh> = +
	<VP head fronted cat> = DP
	<VP head type question> = +
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<V head type passive> = -
	<VP head type suffix> <= <PP head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	<VP option> = 6qNegObjVerbRequired

rule {VP option 6uNegObjVerbRequired - VSO order, ditransitive with PP questioned (acc object)}
VP = V DP DP_1
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <DP_1>
		{<DP_1 head type reflexive> = -
		/<DP_1 head type reflexive> = +
	<DP head agr> = <DP_1 head agr>
	}
	<V head type ditransitive> = +
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<V head type passive> = -
	<DP head case> = nominative
	<DP_1 head case> = accusative
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP head type prefix copular> = -      | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head fronted cat> = PP
	<VP head type question> = +
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP option> = 6uNegObjVerbRequired

rule {VP option 6upNegObjVerbRequired - VSO order, ditransitive with PP questioned (acc object), pro-drop}
VP = V DP_1
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V head object> = <DP_1>
		{<DP_1 head type reflexive> = -
		/<DP_1 head type reflexive> = +
	<V head subject head agr> = <DP_1 head agr>
	}
	<V head type ditransitive> = +
	<V head type transitive> = +
	<V head type copular> = -
	<V head type passive> = -
	<DP_1 head case> = accusative
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head fronted cat> = PP
	<VP head type question> = +
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP option> = 6upNegObjVerbRequired

rule {VP option 7mNegObjVerbRequired - VSO order, ditransitive with DP (acc object questioned)}
VP = V DP DP_1
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <VP head fronted>
	<V head indirectobject> = <DP_1>
	<VP head fronted cat> = DP
	<VP head fronted head case> = accusative
		{<DP_1 head type reflexive> = +
	<VP head subject head agr> = <DP_1 head agr>
		/<DP_1 head type reflexive> = -
		}
	<DP head case> = nominative
	<VP head type question> = +
	<V head type ditransitive> = +
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<V head type passive> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP head type prefix copular> = -    | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	<VP option> = 7mNegObjVerbRequired

rule {VP option 7mpNegObjVerbRequired - VSO order, ditransitive with DP (acc object questioned), pro-drop}
VP = V DP_1
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V head object> = <VP head fronted>
	<V head indirectobject> = <DP_1>
	<VP head fronted cat> = DP
	<VP head fronted head case> = accusative
		{<DP_1 head type reflexive> = +
	<VP head subject head agr> = <DP_1 head agr>
		/<DP_1 head type reflexive> = -
		}
	<VP head type question> = +
	<V head type ditransitive> = +
	<V head type transitive> = +
	<V head type copular> = -
	<V head type passive> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [indirectobject:[head:[type:[negative:+]]]] ->  | if indirectobject negative, VP must be
					 [type:[negative:+]]
	<VP option> = 7mpNegObjVerbRequired

rule {VP option 7qNegObjVerbRequired - VSO order, ditransitive with DP questioned (acc object)}
VP = V DP DP_1
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <DP_1>
	<VP head fronted cat> = DP
		{<DP_1 head type reflexive> = +
	<VP head subject head agr> = <DP_1 head agr>
		/<DP_1 head type reflexive> = -
		}
	<DP_1 head case> = accusative
	<DP head case> = nominative
	<VP head type question> = +
	<V head type ditransitive> = +
	<V head type transitive> = +
	<VP head type pro-drop> = -
	<V head type copular> = -
	<V head type passive> = -
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP head type prefix copular> = -    | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP option> = 7qNegObjVerbRequired

rule {VP option 7qpNegObjVerbRequired - VSO order, ditransitive with DP questioned (acc object), pro-drop}
VP = V DP_1
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V head object> = <DP_1>
	<VP head fronted cat> = DP
		{<DP_1 head type reflexive> = +
	<VP head subject head agr> = <DP_1 head agr>
		/<DP_1 head type reflexive> = -
		}
	<DP_1 head case> = accusative
	<VP head type question> = +
	<V head type ditransitive> = +
	<V head type transitive> = +
	<V head type copular> = -
	<V head type passive> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type suffix> <= <DP_1 head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	<VP option> = 7qpNegObjVerbRequired

rule {VP option 8c - VSO with sentential complement}
VP = V DP {CP / IP}
	<VP head> = <V head>
	<V head subject> = <DP>
	<V embedded> = <CP>
	<V embedded> = <IP>
	<CP head type root> = -
	<CP head type relative> = -
	<IP head type relative> = -
	<IP head type comp> = -
	<IP head type prefix comp> = - | uses CP
	<IP head type suffix comp> = -
	<IP head type root> = -
	<IP head type question> = -
	<V head type sentential> = +
	<V head type passive> = -
	<VP head type pro-drop> = -
	<DP head case> = nominative
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP head type prefix copular> = -    | only in no V/Aux copulars
	<DP head type suffix copular> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	<VP head type suffix> <= <CP head type suffix>
	<VP head type suffix> <= <IP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 8c

rule {VP option 8ci - VSO with sentential complement, imperative}
VP = V {CP / IP}
	<VP head> = <V head>
	<VP head infl mood imperative> = +
	<V embedded> = <CP>
	<V embedded> = <IP>
	<CP head type root> = -
	<CP head type relative> = -
	<IP head type relative> = -
	<IP head type comp> = -
	<IP head type prefix comp> = - | uses CP
	<IP head type suffix comp> = -
	<IP head type root> = -
	<IP head type question> = -
	<V head type sentential> = +
	<V head type passive> = -
	<VP head type question> = -
	<VP head type suffix> <= <CP head type suffix>
	<VP head type suffix> <= <IP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 8ci

rule {VP option 8cp - VSO with sentential complement, pro-drop}
VP = V {CP / IP}
	<VP head> = <V head>
	<VP head type pro-drop> = +
	<V embedded> = <CP>
	<V embedded> = <IP>
	<CP head type root> = -
	<CP head type relative> = -
	<IP head type relative> = -
	<IP head type comp> = -
	<IP head type prefix comp> = - | uses CP
	<IP head type suffix comp> = -
	<IP head type root> = -
	<IP head type question> = -
	<V head type sentential> = +
	<V head type passive> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	<VP head type suffix> <= <CP head type suffix>
	<VP head type suffix> <= <IP head type suffix>
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 8cp

rule {VP option 8coNegObjVerbRequired - VSO object with sentential complement}
VP = V DP DP_1 {CP / IP}
	<VP head> = <V head>
	<V head subject> = <DP>
	<V head object> = <DP_1>
	<V embedded> = <CP>
	<V embedded> = <IP>
	<CP head type root> = -
	<CP head type relative> = -
	<IP head type relative> = -
	<IP head type comp> = -
	<IP head type prefix comp> = - | uses CP
	<IP head type suffix comp> = -
	<IP head type root> = -
	<IP head type question> = -
	<V head type sentential> = +
	<V head type passive> = -
	<VP head type pro-drop> = -
	<DP head case> = nominative
	<DP_1 head case> = accusative
	<DP head type suffix poss> = -         | only in possessor position
	<DP head type prefix poss> = -
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP head type prefix copular> = -    | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	{<VP head type question> = -
	/<VP head type question> = +
	 <VP head fronted cat> = AdvP
	/<VP head type question> = +
	 <VP head fronted> = none
	}
	<VP head type suffix> <= <CP head type suffix>
	<VP head type suffix> <= <IP head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 8coNegObjVerbRequired

rule {VP option 8cioNegObjVerbRequired - VSO object with sentential complement, imperative}
VP = V DP_1 {CP / IP}
	<VP head> = <V head>
	<VP head infl mood imperative> = +
	<V head object> = <DP_1>
	<V embedded> = <CP>
	<V embedded> = <IP>
	<CP head type root> = -
	<CP head type relative> = -
	<IP head type relative> = -
	<IP head type comp> = -
	<IP head type prefix comp> = - | uses CP
	<IP head type suffix comp> = -
	<IP head type root> = -
	<IP head type question> = -
	<V head type sentential> = +
	<V head type passive> = -
	<DP_1 head case> = accusative
	<DP_1 head type suffix poss> = -         | only in possessor position
	<DP_1 head type prefix poss> = -
	<DP_1 head type prefix copular> = -    | only in no V/Aux copulars
	<DP_1 head type suffix copular> = -
	<VP head type question> = -
	<VP head type suffix> <= <CP head type suffix>
	<VP head type suffix> <= <IP head type suffix>
	<VP head> == [object:[head:[type:[negative:+]]]] ->  | if object negative, VP must be
					 [type:[negative:+]]
	 <VP head fronted> == ~[cat:FocusP]
	<VP option> = 8cioNegObjVerbRequired

rule {DP option conj - conjoined DPs}
DP = (InitConj) DP_1 Conj DP_2
	<DP head> = <DP_1 head>
	<DP conjoined> = +
	<DP_1 conjoined> = -	|limit recursion
	<DP head type negative> <= <Conj head type negative>
	<DP head agr number> <= <Conj head agr number>
	<DP option> = conj

rule {DP option RelCP - headless relative CP}
DP = CP
	<DP head> = <CP head>
	<CP head type relative> = +
	<DP head type> <= <DP head type prefix>  |promote clitic values to phrase
	<DP head type> <= <DP head type suffix>  |promote clitic values to phrase
	<DP option> = RelCP

rule {DP option Pron - possessives, reflexives and reciprocals}
DP = Pron
	<DP head> = <Pron head>
	{<Pron head type possessive> = +
		/<Pron head type reflexive> = +
		/<Pron head type reciprocal> = +
		}
	<DP head type> <= <DP head type prefix>  |promote clitic values to phrase
	<DP head type> <= <DP head type suffix>  |promote clitic values to phrase
	<DP option> = Pron

rule {DP option 0 - no Deg modifiers}
DP = {D' / D''}
	<DP head> = <D' head>
	<DP head> = <D'' head>
	<DP head type> <= <DP head type prefix>  |promote clitic values to phrase
	<DP head type> <= <DP head type suffix>  |promote clitic values to phrase
	<DP option> = 0

rule {DP option 1 - degree modifier initial}
DP = Deg {D' / D''}
	<DP head> = <D' head>
	<DP head> = <D'' head>
	<Deg head type modifies_NP> = +
	<Deg head type DP-initial> = +
	<Deg head agr> = <DP head agr>
	<Deg head case> = <DP head case>
	<DP head type negative> <= <Deg head type negative> |polarity from Deg
	<DP head type prefix> <= <Deg head type prefix>
	<DP head type> <= <DP head type prefix>  |promote clitic values to phrase
	<DP head type> <= <DP head type suffix>  |promote clitic values to phrase
	<DP head> == ~[case:genitive] 	|Deg not w/in possessor
	<DP option> = 1

rule {DBar option QuantDetInitialNeg  - quantifier determiners initial - including neg}
D' = Det N'
	<D' head> = <N' head>
	<Det head type DP-initial> = +
	<Det head agr> = <N' head agr>
	<D' head type negative> <= <Det head type negative> |polarity from Det
	<D' head type negative-polarity> <= <Det head type negative-polarity>
	<D' head type prefix> <= <Det head type prefix>
	<D' head> == ~[case:genitive] 	|Det not w/in possessor
	<D' option> = QuantDetInitialNeg

rule {DBar option 1frel - relative clause CP final}
D' = D'_1 CP
	<D' head> = <D'_1 head>
	<CP head type relative> = +
	<CP head type question> = -
	<D' head agr animate> = <CP head agr animate>
	<D' head type suffix> <= <CP head type suffix>
	<D' option> = 1frel

rule {DBar option 4b - only demonstratives, final, optional}
D' = NP (Dem)
	<D' head> = <NP head>
	<Dem head agr> = <NP head agr>
	<Dem head case> = <NP head case>
	<D' head type wh> <= <Dem head type wh>
	<D' head type suffix> <= <Dem head type suffix>
	<D' option> = 4b

rule {NP option 0 - not possessed}
NP = {N'' / N'}
	<NP head> = <N'' head>
	<NP head> = <N' head>
	<NP head type possessed> = -
	<NP head possessor head agr> = none
	<NP option> = 0

rule {NP option 0p - possessed with person affix, pro-drop}
NP = {N'' / N'}
	<NP head> = <N'' head>
	<NP head> = <N' head>
	<NP head type possessed> <= +
	<NP head type genitive_PP> = -  | to restrict possessor w/ gen PP
	<NP head possessor> == ~[agr:none]
	<NP option> = 0p

rule {NP option 2b - optional marker before, possessor final}
NP = {N'' / N'} {{(Poss) DP} / Pron}
	<NP head> = <N'' head>
	<NP head> = <N' head>
	<NP head possessor> <= <DP>
	<NP head possessor> <= <Pron>
	<NP head type possessed> <= +
	<NP head type genitive_PP> = -  | to restrict possessor w/ gen PP
	<DP   head case> = genitive
	<Pron head case> = genitive
	<Pron head type possessive> = -    | not stand alone possessive
	<DP head case> = <Poss head case>
	<NP head type wh> <= <Pron head type wh>
	<NP option> = 2b

rule {NP option 7a - pronoun,dem,quantifiers w/ optional partitive PP after}
NP = {Pron / Dem / Q / Num / Deg} (PP)
	<NP head> = <Pron head>
	<Pron head type possessive> = -  | these use DP rule "Pron"
	<Pron head type reflexive> = -
	<Pron head type reciprocal> = -
	<NP head> = <Dem head>
	<NP head> = <Q head>
	<NP head> = <Num head>
	<NP head> = <Deg head>
	<Deg head type quantifier> = +
	<Dem head type wh > = -		| so "which" not separate
	<PP head type stranded> = -	| PP must have overt complement
	<PP head type sentential> = -	| sentential not within NP
|	<PP head type partitive> = +
	<NP head type prefix poss> = -  |can't be possessors
	<NP head type suffix poss> = -  |can't be possessors
	<Pron head> == ~[case:genitive]
	<NP option> = 7a

rule {NBarBar option 1 - QPs initial}
N'' = QP N'
	<N'' head> = <N' head>
	<QP head agr> = <N' head agr>
	<QP head type DP-initial> = +
	<N'' head type prefix> <= <QP head type prefix>
	<N'' head type wh> <= <QP head type wh>
	<N'' option> = 1

rule {NBar option 1b - AdjP final, recursive}
N'_1 = N'_2 AdjP
	<N'_1 head> = <N'_2 head>
	<AdjP head agr> = <N'_2 head agr>
	<AdjP head case> = <N'_2 head case>
	<AdjP head type DP-final> = +
	<AdjP head type prefix copular> = -      | only in no V/Aux copulars
	<AdjP head type suffix copular> = -
	<AdjP head type clausal-comp> = -
	<N'_1 head type suffix> <= <AdjP head type suffix> | N case marking can be overridden by AdjP, if AdjP also marked then another modifier required.
	<N' option> = 1b

rule {NBar option 1aPart - participle initial, recursive}
N'_1 = VP N'_2
	<N'_1 head> = <N'_2 head>
	<VP head type participle> = +
	<N' option> = 1aPart

rule {NBar option 1bPart - participle final, recursive}
N'_1 = N'_2 VP
	<N'_1 head> = <N'_2 head>
	<VP head type participle> = +
	<N' option> = 1bPart

rule {NBar option 4a - no compounds}
N' = N
	<N' head> = <N head>
		<N' option> = 4a

rule {NBar option Part - participle (phrase) as NBar}
N' = VP
	<N' head> = <VP head>
	<VP head type participle> = +

rule {PP option conj - conjoined PPs}
PP = (InitConj) PP_1 Conj PP_2
	<PP head> = <PP_1 head>
	<PP conjoined> = +
	<PP_1 conjoined> = -	|limit recursion
	<PP option> = conj

rule {PP option 0 - no modifiers}
PP = P'
	<PP head> = <P' head>
	<PP option> = 0

rule {PBar option 1a - prepositions, accusative DP complement}
P' = P DP
	<P' head> = <P head>
	<P' head object> = <DP>
	<P head type PP-initial> = +
	<DP head case> = accusative
	<P' head type stranded> = -		| not missing a complement
	<P' head type wh> = <DP head type wh>	| wh for pied-piping
	<DP head type prefix copular> = -    | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<P' head type suffix poss> <= <DP head type suffix poss>
	<P' option> = 1a

rule {PBar option 1aG - prepositions, genitive DP complement}
P' = P DP
	<P' head> = <P head>
	<P' head object> = <DP>
	<P head type PP-initial> = +
	<DP head case> = genitive
	<P' head type genitive_PP> = +        | for restricting w/ possessor
	<P' head type stranded> = -		| not missing a complement
	<P' head type wh> = <DP head type wh>	| wh for pied-piping
	<DP head type prefix copular> = -    | only in no V/Aux copulars
	<DP head type suffix copular> = -
	<P' head type suffix poss> <= <DP head type suffix poss>
	<P' option> = 1aG

rule {PBar option 3a - prepositions, locative PP complement}
P' = P PP
	<P' head> = <P head>
	<P head type PP-initial> = +
	<P head type locative> = +
	<PP head type locative> = +
	<P' head type stranded> = -		| not missing a complement
	<P' head type suffix poss> <= <PP head type suffix poss>
	<P' option> = 3a

rule {PBar option 4a - prepositions, IP complement }
P' = P IP
	<P' head> = <P head>
	<P head type PP-initial> = +
	<IP head type question> = -
	<IP head infl mood imperative> = -
	<IP head type copular> = -
	<P' head type stranded> = -		| not missing a complement
	<P' head type sentential> = +
	<P head type temporal> = +           | assuming only temporals take IPs
	<P' option> = 4a

rule {PBar option 4apart - prepositions, Participle complement}
P' = P VP
	<P' head> = <P head>
	<P head type PP-initial> = +
	<VP head type participle> = +
	<P' head type stranded> = -		| not missing a complement
	<P' head type sentential> = +
	<P head type temporal> = +           | assuming only temporals take VPs
	<P' option> = 4apart

rule {PBar option 5 - prepositions or postpositions with no complement}
P' = P
	<P' head> = <P head>
	<P' head type stranded> = +		| missing a complement
	<P' option> = 5

rule {AdjP option conj - conjoined AdjPs}
AdjP = (InitConj) AdjP_1 Conj AdjP_2
	<AdjP head> = <AdjP_1 head>
	<AdjP conjoined> = +
	<AdjP_1 conjoined> = -	|limit recursion
	<AdjP head type clausal-comp> = -
	<AdjP option> = conj

rule {AdjP option 0 - no modifiers}
AdjP = Adj'
	<AdjP head> = <Adj' head>
	<AdjP option> = 0

rule {Adj' option 0 - no complements}
Adj' = Adj
	<Adj' head> = <Adj head>
	<Adj' head type clausal-comp> = -
	<Adj' option> = 0

rule {Adj' option 1a - Adj initial, sentential complement}
Adj' = Adj {CP / IP}
	<Adj' head> = <Adj head>
	<Adj embedded> = <CP>
	<Adj embedded> = <IP>
	<CP head type root> = -
	<CP head type relative> = -
	<IP head type relative> = -
	<IP head type comp> = -
	<IP head type prefix comp> = - | uses CP
	<IP head type suffix comp> = -
	<IP head type root> = -
	<IP head type question> = -
	<Adj head type sentential> = +
	<Adj' head type clausal-comp> = +
	<Adj' head type suffix> <= <CP head type suffix>
	<Adj' head type suffix> <= <IP head type suffix>
	<Adj' option> = 1a

rule {AdvP option 0 - no modifiers}
AdvP = Adv'
	<AdvP head> = <Adv' head>
	<AdvP option> = 0

rule {AdvP option 1 - modifiers initial}
AdvP = Deg Adv'
	<AdvP head> = <Adv' head>
	<Deg head type AdvP-initial> = +
	<Deg head type modifies_Adv> = <Adv' head type>
	<AdvP head type prefix> <= <Deg head type prefix>
	<AdvP option> = 1

rule {AdvP option 2 - modifiers final}
AdvP = Adv' Deg
	<AdvP head> = <Adv' head>
	<Deg head type AdvP-final> = +
	<Deg head type modifies_Adv> = <Adv' head type>
	<AdvP head type suffix> <= <Deg head type suffix>
	<AdvP option> = 2

rule {AdvBar option 0 - no complements}
Adv' = Adv
	<Adv' head> = <Adv head>
	<Adv' option> = 0

rule {AdvBar option 1f - Adv complements final}
Adv' = Adv Adv_1
	<Adv' head> = <Adv head>
	<Adv head type temporal> = +
	<Adv_1 head type temporal> = +
	<Adv head type takes_Adv> = +
	<Adv' head type suffix> <= <Adv_1 head type suffix>
	<Adv' option> = 1f

rule {AdvBar option 2f - DP complements final}
Adv' = Adv DP
	<Adv' head> = <Adv head>
	<Adv head type temporal> = +
	<DP head type temporal> = +
	<Adv head type takes_DP> = +
	<Adv' head type suffix> <= <DP head type suffix>
	<Adv' option> = 2f

rule {AdvBar option 3f - IP complements final}
Adv' = Adv IP
	<Adv' head> = <Adv head>
	<Adv head type sentential> = +
	<Adv head embedded> = <IP head>
	<IP head type question> = -
	<IP head type relative> = -
	<IP head type root> = -
	<Adv' head type suffix> <= <IP head type suffix>
	<Adv' option> = 3f

rule {AdvBar option 4f - CP complements final}
Adv' = Adv CP
	<Adv' head> = <Adv head>
	<Adv head type sentential> = +
	<Adv head embedded> = <CP head>
	<CP head type question> = -
	<CP head type relative> = -
	<CP head type root> = -
	<Adv' head type suffix> <= <CP head type suffix>
	<Adv' option> = 4f

rule {QP option 0 - no modifiers}
QP = Q
	<QP head> = <Q head>
	<QP option> = 0

rule {QP option 2 - modifiers final}
QP = Q Deg
	<QP head> = <Q head>
	<Deg head type modifies_Q> = +
	<Deg head type QP-final>   = +
	<QP head type suffix> <= <Deg head type suffix>
	<QP option> = 2

rule {QP option Num2f - modifiers final, head final}
QP = (((((Num_5) Num_4) Num_3) Num_2) (Conj_1) Num_1) (Conj) Num Adj
	<QP head> = <Num head>
	<Adj head type ordinal> = +
	<Adj head type QP-final> = +
	<Conj head type conjoins_DP> = +
	<Conj_1 head type conjoins_DP> = +
	<QP option> = Num2f
