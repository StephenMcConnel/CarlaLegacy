<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE masterGrammar SYSTEM "..\Data\MasterGrammar.dtd">
<masterGrammar>
	<rule>
rule {AdvP option 0 - no modifiers}
AdvP = Adv'
	&lt;AdvP head&gt; = &lt;Adv' head&gt;
	&lt;AdvP option&gt; = 0
</rule>
	<rule show="AdvPoption1">
rule {AdvP option 1 - modifiers initial}
AdvP = Deg Adv'
	&lt;AdvP head&gt; = &lt;Adv' head&gt;
	&lt;AdvP head modifier&gt; = &lt;Deg head&gt;
	&lt;Deg head type AdvP-initial&gt; = +
	&lt;Deg head type comma&gt; = -
	&lt;AdvP head type prefix&gt; &lt;= &lt;Deg head type prefix&gt;
	&lt;AdvP head&gt; == [type:[manner:+]] -&gt; [modifier:[type:[modifies_Adv:[manner:+]]]]
	&lt;AdvP head&gt; == [type:[temporal:+]] -&gt; [modifier:[type:[modifies_Adv:[temporal:+]]]]
	&lt;AdvP head&gt; == [type:[locative:+]] -&gt; [modifier:[type:[modifies_Adv:[locative:+]]]]
	&lt;AdvP head&gt; == [type:[reason:+]] -&gt; [modifier:[type:[modifies_Adv:[reason:+]]]]
	&lt;AdvP option&gt; = 1
</rule>
	<showWhen id="AdvPoption1">
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="before"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="either"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="eitherOrBoth"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="beforeOrBoth"/>
	</showWhen>
	<rule show="AdvPoption2">
rule {AdvP option 2 - modifiers final}
AdvP = Adv' Deg
	&lt;AdvP head&gt; = &lt;Adv' head&gt;
	&lt;AdvP head modifier&gt; = &lt;Deg head&gt;
	&lt;Deg head type AdvP-final&gt; = +
	&lt;Adv' head type comma&gt; = -
	&lt;AdvP head type comma&gt; &lt;= &lt;Deg head type comma&gt;
	&lt;AdvP head type suffix&gt; &lt;= &lt;Deg head type suffix&gt;
	&lt;AdvP head&gt; == [type:[manner:+]] -&gt; [modifier:[type:[modifies_Adv:[manner:+]]]]
	&lt;AdvP head&gt; == [type:[temporal:+]] -&gt; [modifier:[type:[modifies_Adv:[temporal:+]]]]
	&lt;AdvP head&gt; == [type:[locative:+]] -&gt; [modifier:[type:[modifies_Adv:[locative:+]]]]
	&lt;AdvP head&gt; == [type:[reason:+]] -&gt; [modifier:[type:[modifies_Adv:[reason:+]]]]
	&lt;AdvP option&gt; = 2
</rule>
	<showWhen id="AdvPoption2">
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="after"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="either"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="eitherOrBoth"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="afterOrBoth"/>
	</showWhen>
	<rule show="AdvPoption3">
rule {AdvP option 3 - modifiers both sides}
AdvP = Deg_1 Adv' Deg_2
	&lt;AdvP head&gt; = &lt;Adv' head&gt;
	&lt;AdvP head modifier_initial&gt; = &lt;Deg_1 head&gt;
	&lt;AdvP head modifier_final&gt; = &lt;Deg_2 head&gt;
	&lt;Deg_1 head type AdvP-initial&gt; = +
	&lt;Deg_2 head type AdvP-final&gt;   = +
	&lt;Deg_1 head type comma&gt; = -
	&lt;Adv' head type comma&gt; = -
	&lt;AdvP head type comma&gt; &lt;= &lt;Deg_2 head type comma&gt;
	&lt;AdvP head type prefix&gt; &lt;= &lt;Deg_1 head type prefix&gt;
	&lt;AdvP head type suffix&gt; &lt;= &lt;Deg_2 head type suffix&gt;
	&lt;AdvP head&gt; == [type:[manner:+]] -&gt; [modifier_initial:[type:[modifies_Adv:[manner:+]]]]
	&lt;AdvP head&gt; == [type:[temporal:+]] -&gt; [modifier_initial:[type:[modifies_Adv:[temporal:+]]]]
	&lt;AdvP head&gt; == [type:[locative:+]] -&gt; [modifier_initial:[type:[modifies_Adv:[locative:+]]]]
	&lt;AdvP head&gt; == [type:[reason:+]] -&gt; [modifier_initial:[type:[modifies_Adv:[reason:+]]]]
	&lt;AdvP head&gt; == [type:[manner:+]] -&gt; [modifier_final:[type:[modifies_Adv:[manner:+]]]]
	&lt;AdvP head&gt; == [type:[temporal:+]] -&gt; [modifier_final:[type:[modifies_Adv:[temporal:+]]]]
	&lt;AdvP head&gt; == [type:[locative:+]] -&gt; [modifier_final:[type:[modifies_Adv:[locative:+]]]]
	&lt;AdvP head&gt; == [type:[reason:+]] -&gt; [modifier_final:[type:[modifies_Adv:[reason:+]]]]
	&lt;AdvP option&gt; = 3
</rule>
	<showWhen id="AdvPoption3">
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="both"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="beforeOrBoth"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="eitherOrBoth"/>
		<or/>
		<whenValue element="advp" attr="degree" value="yes"/>
		<and/>
		<whenValue element="advp" attr="degreePos" value="afterOrBoth"/>
	</showWhen>
	<rule>
rule {AdvBar option 0 - no complements}
Adv' = Adv
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type stand-alone&gt; = +   |must be able to stand alone
	&lt;Adv' option&gt; = 0
</rule>
	<rule show="AdvBaroption1f">
rule {AdvBar option 1f - Adv complements final}
Adv' = Adv Adv_1
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type temporal&gt; = +
	&lt;Adv_1 head type temporal&gt; = +
	&lt;Adv head type takes_Adv&gt; = +
	&lt;Adv head type comma&gt; = -
	&lt;Adv' head type comma&gt; &lt;= &lt;Adv_1 head type comma&gt;
	&lt;Adv' head type suffix&gt; &lt;= &lt;Adv_1 head type suffix&gt;
	&lt;Adv' option&gt; = 1f
</rule>
	<showWhen id="AdvBaroption1f">
		<whenValue element="advcl" attr="advOrNPPos" value="after"/>
<or/>
		<whenValue element="advcl" attr="advOrNPPos" value="either"/>
	</showWhen>
	<rule show="AdvBaroption1i">
rule {AdvBar option 1i - Adv complements initial}
Adv' = Adv_1 Adv
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type temporal&gt; = +
	&lt;Adv_1 head type temporal&gt; = +
	&lt;Adv head type takes_Adv&gt; = +
	&lt;Adv_1 head type comma&gt; = -
	&lt;Adv' head type prefix&gt; &lt;= &lt;Adv_1 head type prefix&gt;
	&lt;Adv' option&gt; = 1i
</rule>
   <showWhen id="AdvBaroption1i">
		<whenValue element="advcl" attr="advOrNPPos" value="before"/>
	</showWhen>
	<rule show="AdvBaroption2f">
rule {AdvBar option 2f - DP complements final}
Adv' = Adv DP
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type takes_DP&gt; = +
	&lt;Adv head type comma&gt; = -
	&lt;Adv' head type comma&gt; &lt;= &lt;DP head type comma&gt;
	&lt;Adv' head type suffix&gt; &lt;= &lt;DP head type suffix&gt;
	&lt;Adv' option&gt; = 2f
</rule>
	<showWhen id="AdvBaroption2f">
		<whenValue element="advcl" attr="advOrNPPos" value="after"/>
<or/>
		<whenValue element="advcl" attr="advOrNPPos" value="either"/>
	</showWhen>
	<rule show="AdvBaroption2i">
rule {AdvBar option 2i - DP complements initial}
Adv' = DP Adv
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type takes_DP&gt; = +
	&lt;DP head type comma&gt; = -
	&lt;Adv' head type prefix&gt; &lt;= &lt;DP head type prefix&gt;
	&lt;Adv' option&gt; = 2i
</rule>
	<showWhen id="AdvBaroption2i">
		<whenValue element="advcl" attr="advOrNPPos" value="before"/>
<or/>
		<whenValue element="advcl" attr="advOrNPPos" value="either"/>
	</showWhen>
	<rule>
rule {AdvBar option 3f - IP complements final}
Adv' = Adv IP
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type sentential&gt; = +
	&lt;IP head fronted&gt; = none
	&lt;IP head type question&gt; = -
	&lt;IP head type relative&gt; = -
	&lt;IP head type verbheaded&gt; = +
	&lt;IP head type root&gt; = -
	&lt;Adv head type comma&gt; = -
	&lt;Adv' head type comma&gt; &lt;= &lt;IP head type comma&gt;
	&lt;Adv' head type suffix&gt; &lt;= &lt;IP head type suffix&gt;
	&lt;Adv' head type motion&gt; &lt;= &lt;IP head type motion&gt;  |keep locative with motion V
	&lt;Adv' option&gt; = 3f
</rule>
	<rule show="AdvBaroption3i">
rule {AdvBar option 3i - IP complements initial}
Adv' = IP Adv
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type sentential&gt; = +
	&lt;IP head fronted&gt; = none
	&lt;IP head type question&gt; = -
	&lt;IP head type relative&gt; = -
	&lt;IP head type verbheaded&gt; = +
	&lt;IP head type root&gt; = -
	&lt;IP head type comma&gt; = -
	&lt;Adv' head type prefix&gt; &lt;= &lt;IP head type prefix&gt;
	&lt;Adv' head type motion&gt; &lt;= &lt;IP head type motion&gt;  |keep locative with motion V
	&lt;Adv' option&gt; = 3i
</rule>
	<showWhen id="AdvBaroption3i">
		<whenValue element="typology" attr="wordOrder" value="SOV" negateValue="no"/>
		<or/>
		<whenValue element="typology" attr="wordOrder" value="OVS" negateValue="no"/>
		<or/>
		<whenValue element="typology" attr="wordOrder" value="OSV" negateValue="no"/>
	</showWhen>
	<rule>
rule {AdvBar option 4f - CP complements final}
Adv' = Adv CP
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type sentential&gt; = +
	&lt;Adv head embedded&gt; = &lt;CP head&gt;
	&lt;CP head type question&gt; = -
	&lt;CP head type relative&gt; = -
	&lt;CP head type root&gt; = -
	&lt;Adv head type comma&gt; = -
	&lt;Adv' head type comma&gt; &lt;= &lt;CP head type comma&gt;
	&lt;Adv' head type suffix&gt; &lt;= &lt;CP head type suffix&gt;
	&lt;Adv' option&gt; = 4f
</rule>
	<rule show="AdvBaroption4i">
rule {AdvBar option 4i - CP complements initial}
Adv' = CP Adv
	&lt;Adv' head&gt; = &lt;Adv head&gt;
	&lt;Adv head type sentential&gt; = +
	&lt;Adv head embedded&gt; = &lt;CP head&gt;
	&lt;CP head type question&gt; = -
	&lt;CP head type relative&gt; = -
	&lt;CP head type root&gt; = -
	&lt;CP head type comma&gt; = -
	&lt;Adv' head type prefix&gt; &lt;= &lt;CP head type prefix&gt;
	&lt;Adv' option&gt; = 4i
</rule>
	<showWhen id="AdvBaroption4i">
		<whenValue element="typology" attr="wordOrder" value="SOV" negateValue="no"/>
		<or/>
		<whenValue element="typology" attr="wordOrder" value="OVS" negateValue="no"/>
		<or/>
		<whenValue element="typology" attr="wordOrder" value="OSV" negateValue="no"/>
	</showWhen>
</masterGrammar>
