<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html" version="1.0" encoding="UTF-16" indent="yes"/>
  <!-- ===========================================================
	  Version of this stylesheet
	  =========================================================== -->
  <xsl:variable name="sVersion">1.0</xsl:variable>
  <!-- ===========================================================
	  MAIN BODY
	  =========================================================== -->
  <xsl:template match="/lingPaper">
	<html>
	  <head>
		<xsl:comment> generated by XLingPap1.xsl Version <xsl:value-of select="$sVersion"/>&#x20;</xsl:comment>
		<title>
		  <xsl:value-of select="frontMatter/title"/>
		</title>
		<xsl:element name="link">
		  <xsl:attribute name="rel">stylesheet</xsl:attribute>
		  <xsl:attribute name="href"><xsl:if test="not(@css)">XLingPap1.css</xsl:if><xsl:if test="@css"><xsl:value-of select="@css"/></xsl:if></xsl:attribute>
		</xsl:element>
	  </head>
	  <body>
		<xsl:apply-templates/>
	  </body>
	</html>
  </xsl:template>
  <!-- ===========================================================
	  FRONTMATTER
	  =========================================================== -->
  <!--
	  title
	  -->
  <xsl:template match="title">&#xa;<center>
	  <b>
		<big>
		  <big>
			<big>
			  <xsl:apply-templates/>
			</big>
		  </big>
		</big>
	  </b>
	</center>
  </xsl:template>
  <!--
	  author
	  -->
  <xsl:template match="author">
	<xsl:if test="position()=1">&#xa;<br/>
	</xsl:if>
	<center>
	  <i>
		<xsl:value-of select="."/>
	  </i>
	</center>
  </xsl:template>
  <!--
	  affiliation
	  -->
  <xsl:template match="affiliation">
	<xsl:if test="position()=1">&#xa;<br/>
	</xsl:if>
	<center>
	  <i>
		<xsl:value-of select="."/>
	  </i>
	</center>
  </xsl:template>
  <!--
	  date
	  -->
  <xsl:template match="date">&#xa;<br/>
	<center>
	  <small>
		<xsl:value-of select="."/>
	  </small>
	</center>
  </xsl:template>
  <!--
	  version
	  -->
  <xsl:template match="version">
	<center>
	  <small>Version: <xsl:value-of select="."/>
	  </small>
	</center>
  </xsl:template>
  <!--
	  contents
	  -->
  <xsl:template match="contents">
	<hr/>
	<div>
	  <center>
		<big>
		  <big>
			<b>Table of Contents</b>
		  </big>
		</big>
	  </center>
	  <xsl:variable name="nLevel">
		<xsl:value-of select="number(@showLevel)"/>
	  </xsl:variable>
	  <ul>
		<xsl:if test="//abstract">
		  <li>
			<a href="#rXLingPapAbstract">Abstract</a>
		  </li>
		</xsl:if>
		<xsl:if test="//part">
		  <xsl:for-each select="//part">
			<li>
			  <xsl:element name="a">
				<xsl:attribute name="href">#<xsl:value-of select="@id"/></xsl:attribute>
				<xsl:apply-templates select="." mode="numberPart"/>&#xa0;<xsl:apply-templates select="secTitle"/>
			  </xsl:element>
			</li>
			<ul>
			  <xsl:for-each select="chapter">
				<li>
				  <xsl:element name="a">
					<xsl:attribute name="href">#<xsl:value-of select="@id"/></xsl:attribute>
					<xsl:apply-templates select="." mode="numberChapter"/>&#xa0;<xsl:apply-templates select="secTitle"/>
				  </xsl:element>
				  <ul>
					<xsl:call-template name="OutputAllSectionTOC">
					  <xsl:with-param name="nLevel">
						<xsl:value-of select="$nLevel"/>
					  </xsl:with-param>
					  <xsl:with-param name="nodesSection1" select="section1"/>
					</xsl:call-template>
				  </ul>
				</li>
			  </xsl:for-each>
			</ul>
		  </xsl:for-each>
		</xsl:if>
		<!-- part -->
		<xsl:if test="not(//part) and //chapter">
		  <xsl:for-each select="//chapter">
			<li>
			  <xsl:element name="a">
				<xsl:attribute name="href">#<xsl:value-of select="@id"/></xsl:attribute>
				<xsl:apply-templates select="." mode="numberChapter"/>&#xa0;<xsl:apply-templates select="secTitle"/>
			  </xsl:element>
			  <ul>
				<xsl:call-template name="OutputAllSectionTOC">
				  <xsl:with-param name="nLevel">
					<xsl:value-of select="$nLevel"/>
				  </xsl:with-param>
				  <xsl:with-param name="nodesSection1" select="section1"/>
				</xsl:call-template>
			  </ul>
			</li>
		  </xsl:for-each>
		</xsl:if>
		<!-- chapter -->
		<xsl:if test="not(//part) and not(//chapter)">
		  <xsl:call-template name="OutputAllSectionTOC">
			<xsl:with-param name="nLevel">
			  <xsl:value-of select="$nLevel"/>
			</xsl:with-param>
			<xsl:with-param name="nodesSection1" select="//section1[not(parent::appendix)]"/>
		  </xsl:call-template>
		</xsl:if>
		<xsl:for-each select="//appendix">
		  <li>
			<xsl:element name="a">
			  <xsl:attribute name="href">#<xsl:value-of select="@id"/></xsl:attribute>
			  <xsl:apply-templates select="." mode="numberAppendix"/>&#xa0;<xsl:apply-templates select="secTitle"/>
			</xsl:element>
			<ul>
			  <xsl:call-template name="OutputAllSectionTOC">
				<xsl:with-param name="nLevel">
				  <xsl:value-of select="$nLevel"/>
				</xsl:with-param>
				<xsl:with-param name="nodesSection1" select="section1"/>
			  </xsl:call-template>
			</ul>
		  </li>
		</xsl:for-each>
		<xsl:if test="//endnote">
		  <li>
			<a href="#rXLingPapEndnotes">Endnotes</a>
		  </li>
		</xsl:if>
		<xsl:if test="//references">
		  <li>
			<a href="#rXLingPapReferences">References</a>
		  </li>
		</xsl:if>
	  </ul>
	</div>
	<xsl:if test="//abstract">
	  <hr/>
	</xsl:if>
  </xsl:template>
  <!--
	  abstract
	  -->
  <xsl:template match="abstract">&#xa;<br/>
	<xsl:if test="not(//contents)">
	  <hr/>
	</xsl:if>
	<center>
	  <b>
		<big>
		  <big>
			<a name="rXLingPapAbstract">Abstract</a>
		  </big>
		</big>
	  </b>
	</center>
&#xa;<div style="margin-left: 0.5in; margin-right: 0.5in">
	  <xsl:apply-templates/>
	</div>
	<xsl:if test="not(//part)">
	  <hr/>
	</xsl:if>
  </xsl:template>
  <!-- ===========================================================
	  PARTS, CHAPTERS, SECTIONS, and APPENDICES
	  =========================================================== -->
  <!--
	  Part
	  -->
  <xsl:template match="part">&#xa;<hr size="3"/>
	<p>
	  <center>
		<big>
		  <big>
			<big>
			  <big>
				<big>
				  <b>
					<xsl:element name="a">
					  <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
					  <xsl:apply-templates select="." mode="numberPart"/>&#xa0;<xsl:apply-templates select="secTitle"/>
					</xsl:element>
				  </b>
				</big>
			  </big>
			</big>
		  </big>
		</big>
	  </center>
	</p>
	<hr size="3"/>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <!--
	  Chapter
	  -->
  <xsl:template match="chapter">&#xa;<xsl:call-template name="OutputChapTitle">
	  <xsl:with-param name="sTitle">
		<xsl:apply-templates select="." mode="numberChapter"/>&#xa0;<xsl:apply-templates select="secTitle"/>
	  </xsl:with-param>
	</xsl:call-template>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <!--
	  Sections
	  -->
  <xsl:template match="section1">&#xa;<h1>
	  <xsl:call-template name="OutputSection"/>
	</h1>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <xsl:template match="section2">&#xa;<h2>
	  <xsl:call-template name="OutputSection"/>
	</h2>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <xsl:template match="section3">&#xa;<h3>
	  <xsl:call-template name="OutputSection"/>
	</h3>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <xsl:template match="section4">&#xa;<h4>
	  <xsl:call-template name="OutputSection"/>
	</h4>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <xsl:template match="section5">&#xa;<h5>
	  <xsl:call-template name="OutputSection"/>
	</h5>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <xsl:template match="section6">&#xa;<h6>
	  <xsl:call-template name="OutputSection"/>
	</h6>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <!--
	  Appendix
	  -->
  <xsl:template match="appendix">&#xa;<hr size="3"/>
	<xsl:call-template name="OutputChapTitle">
	  <xsl:with-param name="sTitle">
		<xsl:apply-templates select="." mode="numberAppendix"/>&#xa0;<xsl:apply-templates select="secTitle"/>
	  </xsl:with-param>
	</xsl:call-template>
	<xsl:apply-templates select="child::node()[name()!='secTitle']"/>
  </xsl:template>
  <!--
	  secTitle
	  -->
  <xsl:template match="secTitle">
	<xsl:apply-templates/>
  </xsl:template>
  <!--
	  sectionRef
	  -->
  <xsl:template match="sectionRef">
	<xsl:element name="a">
	  <xsl:attribute name="href">#<xsl:value-of select="@sec"/></xsl:attribute>
	  <xsl:apply-templates select="id(@sec)" mode="number"/>
	</xsl:element>
  </xsl:template>
  <!-- ===========================================================
	  PARAGRAPH
	  =========================================================== -->
  <xsl:template match="p">
	<xsl:if test="parent::endnote and not(position()=1)">
	  <tr>
		<td/>
		<td>
		  <p>
			<xsl:apply-templates/>
		  </p>
		</td>
	  </tr>
	</xsl:if>
	<xsl:if test="not(parent::endnote) or position()=1">
	  <p>
		<xsl:apply-templates/>
	  </p>
	</xsl:if>
  </xsl:template>
  <!-- ===========================================================
	  QUOTES
	  =========================================================== -->
  <xsl:template match="q">"<xsl:apply-templates/>"</xsl:template>
  <xsl:template match="blockquote">
	<div style="margin-left:.5in;margin-right:.5in">
	  <xsl:apply-templates/>
	</div>
  </xsl:template>
  <!-- ===========================================================
	  LISTS
	  =========================================================== -->
  <xsl:template match="ol">
	<xsl:variable name="NestingLevel">
	  <xsl:value-of select="count(ancestor::ol[1])"/>
	</xsl:variable>
	<xsl:element name="ol">
	  <xsl:attribute name="style">list-style-type:<xsl:if test="$NestingLevel=0">decimal</xsl:if><xsl:if test="$NestingLevel=1">lower-alpha</xsl:if><xsl:if test="$NestingLevel=2">lower-roman</xsl:if></xsl:attribute>
	  <xsl:apply-templates/>
	</xsl:element>
  </xsl:template>
  <xsl:template match="ul">
	<ul>
	  <xsl:apply-templates/>
	</ul>
  </xsl:template>
  <xsl:template match="li">
	<li>
	  <xsl:apply-templates/>
	</li>
  </xsl:template>
  <xsl:template match="dl">
	<dl>
	  <xsl:apply-templates/>
	</dl>
  </xsl:template>
  <xsl:template match="dt">
	<dt>
	  <xsl:apply-templates/>
	</dt>
  </xsl:template>
  <xsl:template match="dd">
	<dd>
	  <xsl:apply-templates/>
	</dd>
  </xsl:template>
  <!-- ===========================================================
	  EXAMPLES
	  =========================================================== -->
  <xsl:template match="example">&#xa;<div style="margin-left: 0.25in; margin-right: 0.25in">&#xa;<table>
		<xsl:apply-templates/>&#xa;</table>&#xa;</div>
  </xsl:template>
  <!--
	  word
	  -->
  <xsl:template match="word">
	<tr>
	  <td valign="top">
		<xsl:element name="a">
		  <xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
		  <xsl:call-template name="exampleNumber"/>
		</xsl:element>
	  </td>
	  <xsl:for-each select="(langData | gloss)">
		<td>
		  <xsl:apply-templates select="."/>
		</td>
	  </xsl:for-each>
	</tr>
  </xsl:template>
  <!--
	  listWord
	  -->
  <xsl:template match="listWord">&#xa;<tr>
	  <td>
		<xsl:if test="position()=1">
		  <xsl:element name="a">
			<xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
			<xsl:call-template name="exampleNumber"/>
		  </xsl:element>
		</xsl:if>
	  </td>
	  <td>
		<xsl:element name="a">
		  <xsl:attribute name="name"><xsl:value-of select="@letter"/></xsl:attribute>
		  <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
	  </td>
	  <xsl:for-each select="(langData | gloss)">
		<td>
		  <xsl:apply-templates select="."/>
		</td>
	  </xsl:for-each>
	</tr>
  </xsl:template>
  <!--
	  single
	  -->
  <xsl:template match="single">
	<xsl:element name="a">
	  <xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
	  <xsl:call-template name="exampleNumber"/>
	</xsl:element>&#xa0;<xsl:apply-templates/>
  </xsl:template>
  <!--
	  listSingle
	  -->
  <xsl:template match="listSingle">&#xa;<tr>
	  <td>
		<xsl:if test="position()=1">
		  <xsl:element name="a">
			<xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
			<xsl:call-template name="exampleNumber"/>
		  </xsl:element>
		</xsl:if>
	  </td>
	  <td>
		<xsl:element name="a">
		  <xsl:attribute name="name"><xsl:value-of select="@letter"/></xsl:attribute>
		  <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
	  </td>
	  <td>
		<xsl:apply-templates/>
	  </td>
	</tr>
  </xsl:template>
  <!--
	  interlinear
	  -->
  <xsl:template match="interlinear">
&#xa;<table>
	  <xsl:choose>
		<xsl:when test="lineSet">
		  <xsl:for-each select="lineSet | conflation">
			<xsl:apply-templates/>
		  </xsl:for-each>
		</xsl:when>
		<xsl:otherwise>
		  <xsl:apply-templates/>
		</xsl:otherwise>
	  </xsl:choose>
	  &#xa;</table>
  </xsl:template>
  <!--
	  line
	  -->
  <xsl:template match="line">&#xa;<tr style="line-height:87.5%">
	  <td>
		<xsl:if test="name(..)='interlinear' and position()=1">
		  <xsl:call-template name="OutputExampleNumber"/>
		</xsl:if>
	  </td>
	  <xsl:choose>
		<xsl:when test="wrd">
		  <xsl:for-each select="wrd">
			<xsl:element name="td">
			  <xsl:attribute name="class"><xsl:value-of select="@lang"/></xsl:attribute>
			  <xsl:apply-templates/>
			</xsl:element>
		  </xsl:for-each>
		</xsl:when>
		<xsl:otherwise>
		  <xsl:variable name="class">
			<xsl:if test="langData">
			  <xsl:value-of select="id(langData/@lang)"/>
			</xsl:if>
			<xsl:if test="gloss">
			  <xsl:value-of select="id(gloss/@lang)"/>
			</xsl:if>
		  </xsl:variable>
		  <xsl:variable name="sContents">
			<xsl:apply-templates/>
		  </xsl:variable>
		  <xsl:call-template name="OutputTableCells">
			<xsl:with-param name="sList" select="$sContents"/>
			<xsl:with-param name="class" select="$class"/>
		  </xsl:call-template>
		</xsl:otherwise>
	  </xsl:choose>
	</tr>
  </xsl:template>
  <!--
	  conflatedLine
	  -->
  <xsl:template match="conflatedLine">&#xa;<tr style="line-height:87.5%">
	  <td valign="top">
		<xsl:if test="name(..)='interlinear' and position()=1">
		  <xsl:call-template name="OutputExampleNumber"/>
		</xsl:if>
	  </td>
	  <xsl:apply-templates/>
	</tr>
  </xsl:template>
  <!--
	  lineSet
	  -->
  <xsl:template match="lineSet">&#xa;
<xsl:choose>
	  <xsl:when test="name(..)='conflation'">
		<tr>
		  <xsl:if test="@letter">
			<td valign="top">
			  <xsl:element name="a">
				<xsl:attribute name="name"><xsl:value-of select="@letter"/></xsl:attribute>
				<xsl:apply-templates select="." mode="letter"/>.</xsl:element>
			</td>
		  </xsl:if>
		  <td>
			<table>
			  <xsl:apply-templates/>
			</table>
		  </td>
		</tr>
	  </xsl:when>
	  <xsl:otherwise>
		<td>
		  <table>
			<xsl:apply-templates/>
		  </table>
		</td>
	  </xsl:otherwise>
	</xsl:choose>
  </xsl:template>
  <!--
	  conflation
	  -->
  <xsl:template match="conflation">
	<xsl:variable name="sCount" select="count(descendant::*[lineSetRow])"/>
  sCount = <xsl:value-of select="$sCount"/>
	<td>
	  <img align="middle">
		<xsl:attribute name="src"><xsl:text>LeftBrace</xsl:text><xsl:value-of select="$sCount"/><xsl:text>.png</xsl:text></xsl:attribute>
	  </img>
	</td>
	<td>
	  <table>
		<xsl:apply-templates/>
	  </table>
	</td>
	<td>
	  <img align="middle">
		<xsl:attribute name="src"><xsl:text>RightBrace</xsl:text><xsl:value-of select="$sCount"/><xsl:text>.png</xsl:text></xsl:attribute>
	  </img>
	</td>
  </xsl:template>
  <!--
	  lineSetRow
	  -->
  <xsl:template match="lineSetRow">&#xa;<tr style="line-height:87.5%">
	  <xsl:for-each select="wrd">
		<xsl:element name="td">
		  <xsl:attribute name="class"><xsl:value-of select="@lang"/></xsl:attribute>
		  <xsl:apply-templates/>
		</xsl:element>
	  </xsl:for-each>
	</tr>
  </xsl:template>
  <!--
	  free
	  -->
  <xsl:template match="free">&#xa;<tr style="line-height:150%">
	  <td>
		<xsl:if test="position()=1">
		  <xsl:call-template name="OutputExampleNumber"/>
		</xsl:if>
	  </td>
	  <xsl:element name="td">
		<xsl:attribute name="colspan">30</xsl:attribute>
		<xsl:attribute name="class"><xsl:value-of select="id(gloss/@lang)"/></xsl:attribute>
		<xsl:value-of select="."/>
	  </xsl:element>
	</tr>
  </xsl:template>
  <!--
	  listInterlinear
	  -->
  <xsl:template match="listInterlinear">&#xa;<tr>
	  <td valign="top">
		<xsl:if test="position()=1">
		  <xsl:element name="a">
			<xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
			<xsl:call-template name="exampleNumber"/>
		  </xsl:element>
		</xsl:if>
	  </td>
	  <td valign="top">
		<xsl:element name="a">
		  <xsl:attribute name="name"><xsl:value-of select="@letter"/></xsl:attribute>
		  <xsl:apply-templates select="." mode="letter"/>.</xsl:element>
	  </td>
	  <td>
&#xa;<table>
		  <xsl:apply-templates/>&#xa;</table>
	  </td>
	</tr>
  </xsl:template>
  <!--
	  chart
	  -->
  <xsl:template match="chart">
	<tr>
	  <xsl:if test="name(..)='example'">
		<td valign="top">
		  <xsl:element name="a">
			<xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
			<xsl:call-template name="exampleNumber"/>
		  </xsl:element>
		</td>
		<xsl:if test="@class">
		  <td>
			<xsl:element name="div">
			  <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
			  <xsl:value-of select="." disable-output-escaping="yes"/>
			</xsl:element>
		  </td>
		</xsl:if>
		<xsl:if test="not(@class)">
		  <td>
			<xsl:value-of select="." disable-output-escaping="yes"/>
		  </td>
		</xsl:if>
	  </xsl:if>
	  <xsl:if test="name(..)!='example'">
		<xsl:if test="parent::endnote and not(position()=1)">
		  <tr>
			<td/>
			<td>
			  <div>
				<xsl:value-of select="." disable-output-escaping="yes"/>
			  </div>
			</td>
		  </tr>
		</xsl:if>
		<xsl:if test="not(parent::endnote) or position()=1">
		  <div>
			<xsl:value-of select="." disable-output-escaping="yes"/>
		  </div>
		</xsl:if>
	  </xsl:if>
	</tr>
  </xsl:template>
  <!--
	  tree
	  -->
  <xsl:template match="tree">
	<xsl:if test="name(..)='example'">
	  <xsl:element name="a">
		<xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
		<xsl:call-template name="exampleNumber"/>
	  </xsl:element>&#xa0;<xsl:value-of select="." disable-output-escaping="yes"/>
	</xsl:if>
	<xsl:if test="name(..)!='example'">
	  <div>
		<xsl:value-of select="." disable-output-escaping="yes"/>
	  </div>
	</xsl:if>
  </xsl:template>
  <!--
	  table
	  -->
  <xsl:template match="table">
	<xsl:if test="name(..)='example'">
	  <tr>
		<td valign="top">
		  <xsl:element name="a">
			<xsl:attribute name="name"><xsl:value-of select="../@num"/></xsl:attribute>
			<xsl:call-template name="exampleNumber"/>
		  </xsl:element>
		</td>
		<td>
		  <xsl:call-template name="OutputTable"/>
		</td>
	  </tr>
	</xsl:if>
	<xsl:if test="name(..)!='example'">
	  <div>
		<xsl:call-template name="OutputTable"/>
	  </div>
	</xsl:if>
  </xsl:template>
  <!--
		  headerRow for a table
	  -->
  <xsl:template match="headerRow">
	<xsl:if test="@class">
	  <xsl:element name="tr">
		<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
		<xsl:apply-templates/>
	  </xsl:element>
	</xsl:if>
	<xsl:if test="not(@class)">
	  <tr>
		<xsl:apply-templates/>
	  </tr>
	</xsl:if>
  </xsl:template>
  <!--
		  headerCol for a table
	  -->
  <xsl:template match="headerCol">
	<xsl:element name="th">
	  <xsl:if test="@class">
		<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
	  </xsl:if>
	  <xsl:attribute name="align">left</xsl:attribute>
	  <xsl:attribute name="valign">top</xsl:attribute>
	  <xsl:apply-templates/>
	</xsl:element>
  </xsl:template>
  <!--
		  row for a table
	  -->
  <xsl:template match="row">
	<xsl:if test="@class">
	  <xsl:element name="tr">
		<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
		<xsl:apply-templates/>
	  </xsl:element>
	</xsl:if>
	<xsl:if test="not(@class)">
	  <tr>
		<xsl:apply-templates/>
	  </tr>
	</xsl:if>
  </xsl:template>
  <!--
		  col for a table
	  -->
  <xsl:template match="col">
	<xsl:element name="td">
	  <xsl:if test="@class">
		<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
	  </xsl:if>
	  <xsl:attribute name="align">left</xsl:attribute>
	  <xsl:attribute name="valign">top</xsl:attribute>
	  <xsl:apply-templates/>
	</xsl:element>
  </xsl:template>
  <!--
		  caption for a table
	  -->
  <xsl:template match="caption">
	<xsl:if test="@class">
	  <xsl:element name="tr">
		<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
		<td colspan="30">
		  <xsl:apply-templates/>
		</td>
	  </xsl:element>
	</xsl:if>
	<xsl:if test="not(@class)">
	  <tr>
		<td colspan="30">
		  <xsl:apply-templates/>
		</td>
	  </tr>
	</xsl:if>
  </xsl:template>
  <!--
	  exampleRef
	  -->
  <xsl:template match="exampleRef">
	<xsl:if test="@letter">
	  <xsl:element name="a">
		<xsl:attribute name="href">#<xsl:value-of select="@letter"/></xsl:attribute>
		<xsl:if test="not(@paren) or @paren='both' or @paren='initial'">(</xsl:if>
		<xsl:if test="@equal='yes'">=</xsl:if>
		<xsl:if test="not(@letterOnly='yes')">
		  <xsl:apply-templates select="id(@letter)" mode="example"/>
		</xsl:if>
		<xsl:apply-templates select="id(@letter)" mode="letter"/>
		<xsl:if test="@punct">
		  <xsl:value-of select="@punct"/>
		</xsl:if>
		<xsl:if test="not(@paren) or @paren='both' or @paren='final'">)</xsl:if>
	  </xsl:element>
	</xsl:if>
	<xsl:if test="@num">
	  <xsl:element name="a">
		<xsl:attribute name="href">#<xsl:value-of select="@num"/></xsl:attribute>
		<xsl:if test="not(@paren) or @paren='both' or @paren='initial'">(</xsl:if>
		<xsl:if test="@equal='yes'">=</xsl:if>
		<xsl:apply-templates select="id(@num)" mode="example"/>
		<xsl:if test="@punct">
		  <xsl:value-of select="@punct"/>
		</xsl:if>
		<xsl:if test="not(@paren) or @paren='both' or @paren='final'">)</xsl:if>
	  </xsl:element>
	</xsl:if>
  </xsl:template>
  <!-- ===========================================================
	  ENDNOTES and ENDNOTEREFS
	  =========================================================== -->
  <!--
	  endnotes
	  -->
  <xsl:template match="endnotes">
	<xsl:if test="//endnote">
	  <hr size="3"/>
	  <a name="rXLingPapEndnotes">
		<xsl:call-template name="OutputChapTitle">
		  <xsl:with-param name="sTitle">Endnotes</xsl:with-param>
		</xsl:call-template>
	  </a>
	  <table>
		<xsl:apply-templates select="//endnote" mode="backMatter"/>
	  </table>
	</xsl:if>
  </xsl:template>
  <!--
	  endnote in flow of text
	  -->
  <xsl:template match="endnote">
	<span class="super">[<xsl:element name="a">
		<xsl:attribute name="href">#<xsl:value-of select="@id"/></xsl:attribute>
		<xsl:apply-templates select="." mode="endnote"/>
	  </xsl:element>]</span>
  </xsl:template>
  <!--
	  endnote in back matter
	  -->
  <xsl:template match="endnote" mode="backMatter">
	<tr>
	  <td valign="top">
		<xsl:element name="a">
		  <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>[<xsl:apply-templates select="." mode="endnote"/>]</xsl:element>
	  </td>
	  <td>
		<xsl:apply-templates/>
	  </td>
	</tr>
  </xsl:template>
  <!--
	  endnoteRef
	  -->
  <xsl:template match="endnoteRef">
	<span class="super">[<xsl:element name="a">
		<xsl:attribute name="href">#<xsl:value-of select="@ref"/></xsl:attribute>
		<xsl:apply-templates select="id(@ref)" mode="endnote"/>
	  </xsl:element>]</span>
  </xsl:template>
  <!-- ===========================================================
	  CITATIONS and REFERENCES
	  =========================================================== -->
  <!--
	  citation
	  -->
  <xsl:template match="//citation">
	<xsl:variable name="refer" select="id(@ref)"/>
	<xsl:element name="a">
	  <xsl:attribute name="href">#<xsl:value-of select="@ref"/></xsl:attribute>
	  <xsl:if test="@author='yes'">
		<xsl:value-of select="$refer/../@citeName"/>&#x20;</xsl:if>
	  <xsl:if test="not(@paren) or @paren='both' or @paren='initial'">(</xsl:if>
	  <xsl:variable name="works" select="//refWork[../@name=$refer/../@name and @id=//citation/@ref]"/>
	  <xsl:variable name="date">
		<xsl:value-of select="$refer/refDate"/>
	  </xsl:variable>
	  <xsl:value-of select="$date"/>
	  <xsl:if test="count($works[refDate=$date])>1">
		<xsl:apply-templates select="$refer" mode="dateLetter"/>
	  </xsl:if>
	  <xsl:if test="@page">:<xsl:value-of select="@page"/>
	  </xsl:if>
	  <xsl:if test="not(@paren) or @paren='both' or @paren='final'">)</xsl:if>
	</xsl:element>
  </xsl:template>
  <!--
	  references
	  -->
  <xsl:template match="references">
	<hr size="3"/>
	<a name="rXLingPapReferences">
	  <xsl:call-template name="OutputChapTitle">
		<xsl:with-param name="sTitle">References</xsl:with-param>
	  </xsl:call-template>
	</a>
	<div style="margin-left:0.25in">
	  <xsl:for-each select="//refAuthor[refWork/@id=//citation/@ref]">
		<xsl:variable name="works" select="refWork[@id=//citation/@ref]"/>
		<xsl:for-each select="$works">
		  <p style="text-indent:-0.25in;margin-bottom:0in;margin-top:0in">
			<xsl:variable name="author">
			  <xsl:value-of select="normalize-space(../@name)"/>
			</xsl:variable>
			<xsl:element name="a">
			  <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
			  <xsl:value-of select="$author"/>
			</xsl:element>
			<xsl:if test="substring($author,string-length($author),string-length($author))!='.'">.</xsl:if>&#x20;  <xsl:variable name="date">
			  <xsl:value-of select="refDate"/>
			</xsl:variable>
			<xsl:value-of select="$date"/>
			<xsl:if test="count($works[refDate=$date])>1">
			  <xsl:apply-templates select="." mode="dateLetter"/>
			</xsl:if>.
<!--
							   book
 -->
			<xsl:if test="book">
			  <i>
				<xsl:apply-templates select="refTitle"/>.  </i>
			  <xsl:if test="book/series">
				<xsl:value-of select="book/series"/>.  </xsl:if>
			  <xsl:value-of select="book/publisher"/>.  <xsl:value-of select="book/location"/>
			</xsl:if>
			<!--
							   collection
 -->
			<xsl:if test="collection">
			  "<xsl:apply-templates select="refTitle"/>."  In <xsl:value-of select="collection/collEd"/>, ed<xsl:if test="collection/collEd/@plural='yes'">s</xsl:if>.  <i>
				<xsl:value-of select="collection/collTitle"/>
			  </i>&#x20;
			  <xsl:if test="collection/collVol">&#x20;
				<xsl:value-of select="collection/collVol"/>:<xsl:value-of select="collection/collPage"/>.  </xsl:if>
			  <xsl:value-of select="collection/publisher"/>
			  <xsl:if test="collection/location">, <xsl:value-of select="collection/location"/>
			  </xsl:if>
			</xsl:if>
			<!--
							   dissertation
 -->
			<xsl:if test="dissertation">
			  <i>
				<xsl:apply-templates select="refTitle"/>.  </i>
			  <xsl:value-of select="dissertation/location"/>: <xsl:value-of select="dissertation/institution"/> Ph.D. dissertation.<xsl:if test="dissertation/published">  Published by <xsl:value-of select="dissertation/published/publisher"/>, <xsl:value-of select="dissertation/published/location"/>, <xsl:value-of select="dissertation/published/pubDate"/>
			  </xsl:if>
			</xsl:if>
			<!--
							   journal article
 -->
			<xsl:if test="article">
"<xsl:apply-templates select="refTitle"/>."
			  <i>
				<xsl:value-of select="article/jTitle"/>&#x20;
				<xsl:value-of select="article/jVol"/>:<xsl:value-of select="article/jPages"/>
			  </i>
			</xsl:if>
			<!--
							   ms (manuscript)
 -->
			<xsl:if test="ms">
			  "<xsl:apply-templates select="refTitle"/>."  <xsl:value-of select="ms/institution"/> ms</xsl:if>
			<!--
							   paper
 -->
			<xsl:if test="paper">
			  "<xsl:apply-templates select="refTitle"/>."  Paper presented at the <xsl:value-of select="paper/conference"/>
			  <xsl:if test="paper/location">, <xsl:value-of select="paper/location"/>
			  </xsl:if>
			</xsl:if>
			<!--
							   proceedings
 -->
			<xsl:if test="proceedings">
			  "<xsl:apply-templates select="refTitle"/>."  In <xsl:value-of select="proceedings/procEd"/>, ed<xsl:if test="proceedings/procEd/@plural='yes'">s</xsl:if>.  <i>
				<xsl:value-of select="proceedings/procTitle"/>
			  </i>
			  <xsl:if test="proceedings/procVol">&#x20;
				<xsl:value-of select="proceedings/procVol"/>:<xsl:value-of select="proceedings/procPage"/>.  </xsl:if>
			  <xsl:value-of select="proceedings/publisher"/>, <xsl:value-of select="proceedings/location"/>
			</xsl:if>
			<!--
							   thesis
 -->
			<xsl:if test="thesis">
			  <i>
				<xsl:apply-templates select="refTitle"/>.  </i>
			  <xsl:value-of select="thesis/location"/>: <xsl:value-of select="thesis/institution"/> M.A. thesis<xsl:if test="thesis/published">  Published by <xsl:value-of select="thesis/published/publisher"/>, <xsl:value-of select="thesis/published/location"/>, <xsl:value-of select="thesis/published/pubDate"/>
			  </xsl:if>
			</xsl:if>
			<!--
							   webPage
 -->
			<xsl:if test="webPage">
			  "<xsl:apply-templates select="refTitle"/>."  <xsl:if test="webPage/institution">
				<xsl:value-of select="webPage/institution"/>
			  </xsl:if>
			  <xsl:if test="webPage/publisher">
				<xsl:value-of select="webPage/publisher"/>
			  </xsl:if>
			  <xsl:if test="webPage/location">, <xsl:value-of select="webPage/location"/>
			  </xsl:if> (<xsl:element name="a">
				<xsl:attribute name="href"><xsl:value-of select="webPage/url"/></xsl:attribute>
				<xsl:value-of select="webPage/url"/>
			  </xsl:element>)</xsl:if>.</p>
		</xsl:for-each>
	  </xsl:for-each>
	</div>
  </xsl:template>
  <!--
	  refTitle
	  -->
  <xsl:template match="refTitle">
	<xsl:apply-templates/>
  </xsl:template>
  <!-- ===========================================================
	  BR
	  =========================================================== -->
  <xsl:template match="br">
	<br/>
  </xsl:template>
  <!-- ===========================================================
	  GLOSS
	  =========================================================== -->
  <xsl:template match="gloss">
	<xsl:element name="span">
	  <xsl:attribute name="class"><xsl:value-of select="id(@lang)"/></xsl:attribute>
	  <xsl:apply-templates/>
	</xsl:element>
  </xsl:template>
  <!-- ===========================================================
	  LANGDATA
	  =========================================================== -->
  <xsl:template match="langData">
	<xsl:element name="span">
	  <xsl:attribute name="class"><xsl:value-of select="id(@lang)"/></xsl:attribute>
	  <xsl:apply-templates/>
	</xsl:element>
  </xsl:template>
  <!-- ===========================================================
	  OBJECT
	  =========================================================== -->
  <xsl:template match="object">
	<xsl:element name="span">
	  <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
	  <xsl:value-of select="."/>
	</xsl:element>
  </xsl:template>
  <!-- ===========================================================
	  IMG
	  =========================================================== -->
  <xsl:template match="img">
	<xsl:element name="img">
	  <xsl:attribute name="src"><xsl:value-of select="@src"/></xsl:attribute>
	  <xsl:value-of select="."/>
	</xsl:element>
  </xsl:template>
  <!-- ===========================================================
	  NUMBERING PROCESSING
	  =========================================================== -->
  <!--
				  sections
-->
  <xsl:template mode="number" match="*">
	<xsl:if test="//chapter">
	  <xsl:apply-templates select="." mode="numberChapter"/>.</xsl:if>
	<xsl:number level="multiple" count="section1 | section2 | section3 | section4 | section5 | section6" format="1.1"/>
  </xsl:template>
  <!--
				  appendix
-->
  <xsl:template mode="numberAppendix" match="*">
	<xsl:number level="multiple" count="appendix | section1 | section2 | section3 | section4 | section5 | section6" format="A.1"/>
  </xsl:template>
  <!--
				  chapter
-->
  <xsl:template mode="numberChapter" match="*">
	<xsl:number level="any" count="chapter" format="1"/>
  </xsl:template>
  <!--
				  part
-->
  <xsl:template mode="numberPart" match="*">
	<xsl:number level="multiple" count="part" format="I"/>
  </xsl:template>
  <!--
				  endnote
-->
  <xsl:template mode="endnote" match="*">
	<xsl:number level="any" count="endnote" format="1"/>
  </xsl:template>
  <!--
				  example
-->
  <xsl:template mode="example" match="*">
	<xsl:number level="any" count="example" format="1"/>
  </xsl:template>
  <!--
				  letter
-->
  <xsl:template mode="letter" match="*">
	<xsl:number level="single" count="listWord | listSingle | listInterlinear | lineSet" format="a"/>
  </xsl:template>
  <!--
				  dateLetter
-->
  <xsl:template mode="dateLetter" match="*">
	<xsl:number level="single" count="refWork[@id=//citation/@ref]" format="a"/>
  </xsl:template>
  <!-- ===========================================================
	  NAMED TEMPLATES
	  =========================================================== -->
  <!--
				  exampleNumber
-->
  <xsl:template name="exampleNumber">(<xsl:apply-templates select="." mode="example"/>)</xsl:template>
  <!--
				  OutputChapTitle
-->
  <xsl:template name="OutputChapTitle">
	<xsl:param name="sTitle"/>
	<p>
	  <big>
		<big>
		  <big>
			<b>
			  <xsl:element name="a">
				<xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
				<xsl:value-of select="$sTitle"/>
			  </xsl:element>
			</b>
		  </big>
		</big>
	  </big>
	</p>
  </xsl:template>
  <!--
				  OutputExampleNumber
-->
  <xsl:template name="OutputExampleNumber">
	<xsl:element name="a">
	  <xsl:attribute name="name"><xsl:value-of select="../../@num"/></xsl:attribute>
	  <xsl:call-template name="exampleNumber"/>
	</xsl:element>
  </xsl:template>
  <!--
				  OutputSection
-->
  <xsl:template name="OutputSection">
	<xsl:element name="a">
	  <xsl:attribute name="name"><xsl:value-of select="@id"/></xsl:attribute>
	  <xsl:call-template name="OutputSectionNumberAndTitle"/>
	</xsl:element>
  </xsl:template>
  <!--
				  OutputSectionNumberAndTitle
-->
  <xsl:template name="OutputSectionNumberAndTitle">
	<xsl:variable name="bAppendix">
	  <xsl:for-each select="ancestor::*">
		<xsl:if test="name(.)='appendix'">Y</xsl:if>
	  </xsl:for-each>
	</xsl:variable>
	<xsl:if test="$bAppendix='Y'">
	  <xsl:apply-templates select="." mode="numberAppendix"/>
	</xsl:if>
	<xsl:if test="not($bAppendix='Y')">
	  <xsl:apply-templates select="." mode="number"/>
	</xsl:if>&#xa0;<xsl:apply-templates select="secTitle"/>
  </xsl:template>
  <!--
				  OutputAllSectionTOC
-->
  <xsl:template name="OutputAllSectionTOC">
	<xsl:param name="nLevel" select="3"/>
	<xsl:param name="nodesSection1"/>
	<xsl:for-each select="$nodesSection1">
	  <xsl:call-template name="OutputSectionTOC"/>
	  <xsl:if test="section2 and $nLevel>=2">
		<ul>
		  <xsl:for-each select="section2">
			<xsl:call-template name="OutputSectionTOC"/>
			<xsl:if test="section3 and $nLevel>=3">
			  <ul>
				<xsl:for-each select="section3">
				  <xsl:call-template name="OutputSectionTOC"/>
				  <xsl:if test="section4 and $nLevel>=4">
					<ul>
					  <xsl:for-each select="section4">
						<xsl:call-template name="OutputSectionTOC"/>
						<xsl:if test="section5 and $nLevel>=5">
						  <ul>
							<xsl:for-each select="section5">
							  <xsl:call-template name="OutputSectionTOC"/>
							  <xsl:if test="section6 and $nLevel>=6">
								<ul>
								  <xsl:for-each select="section6">
									<xsl:call-template name="OutputSectionTOC"/>
								  </xsl:for-each>
								</ul>
							  </xsl:if>
							</xsl:for-each>
						  </ul>
						</xsl:if>
					  </xsl:for-each>
					</ul>
				  </xsl:if>
				</xsl:for-each>
			  </ul>
			</xsl:if>
		  </xsl:for-each>
		</ul>
	  </xsl:if>
	</xsl:for-each>
  </xsl:template>
  <!--
				  OutputSectionTOC
-->
  <xsl:template name="OutputSectionTOC">
	<li>
	  <xsl:element name="a">
		<xsl:attribute name="href">#<xsl:value-of select="@id"/></xsl:attribute>
		<xsl:call-template name="OutputSectionNumberAndTitle"/>
	  </xsl:element>
	</li>
  </xsl:template>
  <!--
				  OutputTable
-->
  <xsl:template name="OutputTable">
	<xsl:element name="table">
	  <xsl:if test="@class">
		<xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
	  </xsl:if>
	  <xsl:if test="@border">
		<xsl:attribute name="border"><xsl:value-of select="@border"/></xsl:attribute>
	  </xsl:if>
	  <xsl:apply-templates/>
	</xsl:element>
  </xsl:template>
  <!--
				  OutputTableCells
-->
  <xsl:template name="OutputTableCells">
	<xsl:param name="sList"/>
	<xsl:param name="class"/>
	<xsl:variable name="sNewList" select="concat(normalize-space($sList),' ')"/>
	<xsl:variable name="sFirst" select="substring-before($sNewList,' ')"/>
	<xsl:variable name="sRest" select="substring-after($sNewList,' ')"/>
	<xsl:element name="td">
	  <xsl:attribute name="class"><xsl:value-of select="$class"/></xsl:attribute>
	  <xsl:value-of select="$sFirst"/>
	</xsl:element>
	<xsl:if test="$sRest">
	  <xsl:call-template name="OutputTableCells">
		<xsl:with-param name="sList" select="$sRest"/>
		<xsl:with-param name="class" select="$class"/>
	  </xsl:call-template>
	</xsl:if>
  </xsl:template>
  <!-- ===========================================================
	  ELEMENTS TO IGNORE
	  =========================================================== -->
  <xsl:template match="language"/>
  <xsl:template match="comment"/>
</xsl:stylesheet>
<!-- ===========================================================
	  REVISION HISTORY
	  ===========================================================
1.3  Andy Black  31-Jul-2002    Made <title> use apply-templates
1.2  Andy Black  03-Jul-2002    Added <wrd/> and conflated lines (first pass)
1.1  Andy Black  08-May-2002  Changed some spaces to non-breaking spaces so there would be a space between
													section numbers and section titles.
1.0  Andy Black  21-Jun-2001  Initial version.
 -->
