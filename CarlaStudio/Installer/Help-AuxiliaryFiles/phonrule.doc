		 Phonological Rule Program Reference Documentation
						   Alan Buseman
					  Version 0.1s  6 Mar 92

The PHONRULE  (Phonological Rule) program uses phonological rules
to generate allomorphs for the CADA programs (AMPLE and STAMP).

PHONRULE reads a file of phonological rules and applies them to a
dictionary  file.   It  outputs  the  dictionary  file  with  new
allomorphs reflecting the phonological rules.  This is especially
useful for  generating  allomorphs of roots.  It eliminates extra
typing and  the  need  to remember to add allomorphs to new roots
when they are added.

PHONRULE uses a notation that is more current linguistically than
the notation  used  by  AMPLE and STAMP.  For example, in English
most verbs  ending in "e" drop the "e" before "ing".  This can be
expressed with  a  generative  rule  saying  that  an "e" goes to
nothing before  "ing".   Such a rule might be written as follows:
(The 0 is a digit zero, which says "e" goes to nothing.)

	e -> 0 / _ ing

For the  PHONRULE  program  the rule is written exactly as above,
except that  it  is  preceded  by  a "\pr" marker.  Thus the rule
above would be written as follows in the rule file:

	\pr e -> 0 / _ ing

The rule  above  might  be applied to a dictionary containing the
following entry:

	\r care
	\c V

The result would be the following entry:

	\r care
	\a car / _ ing
	\c V

A rule  is applied to a "base form" to produce a modified form as
an allomorph.   For  example,  in the example above "care" is the
base form.

The environment of a rule can be anything acceptable to AMPLE and
STAMP.  Thus  it  can  contain  multiple alternatives, negations,
classes, and  so  on.  The only restriction is that it should not
have environment on both sides of the underline.

A rule  can  be restricted to apply only to words of a particular
category by  putting  the  category at the beginning of the rule.
For example,  to  restrict the above rule to apply only to verbs,
the category "V" would be added as follows:

	\pr V e -> 0 / _ ing

The category  can  also  be  a category class in square brackets.
Category classes  are defined with \ccl as in AMPLE and STAMP.  A
class must be defined before any rule that uses it.

For example,  the  following  rule makes the above change on both
transitive and intransitive verbs:

	\ccl V Vt Vi
	\pr [V] e -> 0 _ ing

It is also acceptable to include one or more allomorph properties
before the  environment.   For  example,  to  make  the allomorph
generated by  the above rule have a property of "final_e" put the
property before the environment as follows:

	\pr V e -> 0 final_e / _ ing

Applying that  rule  to  the  above entry would give an allomoprh
with a property of "final_e" as follows:

	\r care
	\a car final_e / _ ing
	\c V

String classes  can  be  used  in  rules  to  capture  linguistic
generalizations.  String  classes  are  defined  in the rule file
with \scl  just  like  in AMPLE and STAMP.  String classes can be
defined anywhere  in  the file as long as they are defined before
they are used.

String  classes   can   be   used  in  pairs,  with  the  members
corresponding linguistically.   For example, assume the following
string classes:

	\scl +vd b d g
	\scl -vd p t k

These string classes could be used to say that stops voice before
vowels as follows:

	\pr [-vd] -> [+vd] / _ [V]

This says  that "b" becomes "p", "d" becomes "t", and "g" becomes
"k" before a vowel.

The notation  used is entirely up to the user.  The classes above
do not  contain  all  voiced and voiceless segments, but only the
subset that enters into a particular rule.  To refer specifically
to voiced stops one could use the following:

	\scl +stop+vd b d g
	\scl +stop-vd p t k

	\pr [+stop-vd] -> [+stop+vd] / _ [V]

Or one could use a general name instead of feature notation:

	\scl voicedstop   b d g
	\scl unvoicedstop p t k

	\pr [unvoicedstop] -> [voicedstop] / _ [V]

Note that the [V] string class in the environment must be defined
in  AMPLE   and   STAMP,  but  is  not  used  in  PHONRULE.   The
[voicedstop] and  [unvoicedstop]  classes are not needed by AMPLE
and STAMP.

If multiple  string classes are used in a match, they are assumed
to correspond to multiple classes in the replace.  For example:

	\pr [V][-vd] -> [V][+vd] / _ [V]

In this  rule, the [V] in the match corresponds to the [V] in the
replace, and  the  [-vd] in the match corresponds to the [+vd] in
the replace.

This rule also illustrates that a class can be used to restrict a
rule to  apply  in  a limited context.  Putting the same class at
the same  place  in the replacement keeps the matched segment the
same.

Sometimes rules  need  to  be  blocked  in certain contexts.  For
example, consider  the  result  of applying the "e deletion" rule
above to the entry below:

	\r see
	\c V

The result  would  be  an allomorph "se", which is not valid.  To
block the  rule  from applying, add a class reference to restrict
it to apply only after consonants:

	\scl C b c d f g h j k l m n p q r s t v w x y z
	\pr V [C]e -> [C] final_e / _ ing

Another kind  of  blocking  is  for allomorphs that are part of a
standard pattern,  but  do  not  occur for specific idiosyncratic
words.  One way to block those is to include the allomorph in the
dictionary entry  before  PHONRULE  is  run,  but  to  give it an
impossible environment.    For   example,   / *_ is an impossible
environment if  the  asterisk  is not a word formation character.
(Since no  asterisks  occur  in  words,  no allomorph ever occurs
after an  asterisk.)  The  existence  of  the  allomorph  in  the
dictionary  prevents   PHONRULE  from  making  another,  but  the
impossible environment  prevents  it  from being used by AMPLE or
STAMP.

The environment  of  a rule is used to determine whether the rule
applies to  the  beginning  or  end  of  the  base  form.  If the
environment refers  to  things to the right of the form, the rule
is applied to the right end of the base form.  If the environment
refers to  things to the left of the form, the rule is applied to
the left  end  of the base form.  For example, the following rule
would modify the front of a root after a prefix:

	\pr n -> m / m _

A rule  called a "base rule" (\br) is used to convert a base from
a citation  form to a base for allomorph generation.  A base rule
looks just  like a \pr rule, except that it starts with \br.  The
result of  a  base rule is a modified base, which is used for all
future phonological rules.

For example, the following rule could be used to remove the final
"r" from Spanish infinitive citation forms:

	\br V r -> 0

The result  of  this  rule  would be to produce a base of "habla"
from the infinitive "hablar" (to speak).

Of course  it  would also produce "i" from "ir" (to go), which is
wrong.  The  real  allomorphs  given in the entry would generally
override this  wrong  one.   If  the  wrong one gave trouble, the
approach given  above  with  the  impossible environment could be
used to block the production of this wrong form.

Because a  base  rule is used only to produce a new base, it does
not usually  have  an environment.  If it has an environment, the
environment  does   not   become  part  of  the  new  base.   The
environment is  used  only to determine whether to apply the rule
at the  beginning or end of the form.  The default is to the end,
so an  environment  is needed only on base rules that are applied
to the  beginning  of the form.  For example an environment of "/
#_" can  be  used  for  this purpose.  For example, the following
form of  the  above rule would remove "r" from the front of every
verb:

	\br V r -> 0 / #_

The environment  of  the above rule has no function other than to
signal that  the  rule  is  to be applied at the beginning rather
than the end of the form.

For producing  allomorphs  from  a dictionary with citation forms
PHONRULE has an option that says the base should always be copied
over as  the last allomorph.  This means that the base form as it
exists in  the  dictionary  does not have to be an allomorph.  If
base rules  are  used  to  modify it, then only the modified form
will be  an  allomorph,  not  the  original citation form.  (When
using this  approach,  the citation form is not passed into AMPLE
or STAMP as an allomorph.)

This option is triggered by including in the rule file the line:

	\base_becomes_allomorph

The base  can  be  modified  by  base  rules before it becomes an
allomorph.   But   it   cannot  be  prevented  from  becoming  an
allomorph.

To copy  the  base  to an allomorph for only some categories, use
the following type of rule:

	\pr ADV 0 -> 0

Because this  rule  has  a  match  of  zero,  it applies to every
adverb, producing an allomorph which is the base form without any
environment.

PHONRULE is most useful for making root allomorphs, but it can be
used to  make  allomorphs of prefixes or suffixes as well.  To do
that it  is  necessary  to tell it to look for different markers.
The following  marker  definition  codes  can be used in the rule
file to tell the program what markers to look for:

	\r record marker (defaults to \r)
	\b base form marker (defaults to record marker)
	\a allomorph marker (defaults to \a)
	\c category marker (defaults to \c)

For example, the following line would tell PHONRULE to search for
the \s line and apply the rules to it:

	\r \s

Markers can be given either with or without a backslash.

The rule  file  can  have  an  \id  line at the top, and may have
comments anywhere  in  it.   All  lines  that do not begin with a
backslash marker   meaningful  to PHONRULE are ignored.

The vertical  bar  character  starts a comment that continues for
the rest  of the line.  The character that begins comments can be
changed to  something  besides  vertical  bar with the -c option,
just as in AMPLE and STAMP.  A comment on the same line as a rule
is placed  in the dictionary with each allomorph generated by the
rule.  This  can be used to tag allomorphs generated by rules, if
desired.  Comments  that  are not wanted in the dictionary should
be made above or below the rule.

The PHONRULE  program  can  be  safely run on a dictionary it has
already processed.   It  checks  to  see  if each allomorph it is
about to  add  already  exists  in  the  entry.  If the allomorph
exists, it  is  not added again.  This allows one to run PHONRULE
on a  dictionary,  add  new  entries,  and  run  PHONRULE  again.
PHONRULE will add new allomorphs only to the new entries.

It is  also  possible to add a new rule to a rule file and run it
over a  dictionary again.  Only the new rule will add allomorphs,
because all of the ones made by the other rules will exist.

The test  for  existence  of  the allomorph does not check to see
that the  environment  it  is  about to add is the same.  It just
checks to see if the allomorph exists.  This means that if you to
adjust the  environment of an allomorph to customize it, PHONRULE
will not  destroy  your  changes.   You  can  also add any custom
allomorphs you  want to any entry, because PHONRULE never removes
an allomorph.  It only adds new ones.

The rules above all show an arrow made up of a hyphen and wedge,
but it is also acceptable to use the wedge only.  For example,
the first rule above could be written:

	\pr e > 0 / _ ing

PHONRULE takes  the  names  of  input  and  output files from the
command line.  For a summary of the command line arguments, type:

	phonrule ?

This will produce the following message:

	Usage: phonrule -r rulefile -i infile -o outfile [options]
	-r file     rulefile contains phonological rules
	-i file     infile is a dictionary file
	-o file     outfile is a modified dictionary file
	-m          monitor number of rules applied on each entry
	-t          trace rule application
	-c char     comment character
	report output can be redirected by > outfile

To apply  the  rules  in  rulefile x.rul to the dictionary x.dic,
with output to file x.out, type:

	phonrule -r x.rul -i x.dic -o x.out

The input  and output file names must be different.  So to modify
a dictionary  the  normal  sequence  is  to output to a different
filename, and  then  copy or rename the output dictionary file to
the name  of  the input file.  This is easiest if done in a batch
file.  For  example,  a batch file to modify the dictionary x.dic
above (and monitor rule applications) might look as follows:

	phonrule -m -r x.rul -i x.dic -o x.out
	del x.dic
	ren x.out x.dic

The delete  is  necessary  because  rename refuses to rename to a
file name  that already exists.  Copy doesn't check for existence
of the output file, so doesn't require deleting it first.

The -m  option above shows progress of the program on the screen.
It outputs  a  dot  for  each  entry  processed.   If one or more
allomorphs are  added  to  an  entry,  then instead of a dot, the
number of  allomorphs  added is displayed.  This gives an idea of
the effects  the rules are having.  It is good to use the monitor
option.

The -t  option shows the base form, rule, and resulting allomorph
for every  rule  applied.   This can be helpful if the program is
not doing what you expect it to do.

The -m  and  -t  options can be anywhere in the command line, but
they are usually put at the beginning.

Report bugs and wishes for the PHONRULE program to: Alan Buseman,
JAARS, Box 248, Waxhaw, NC 28173.
